/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __llvm__: u32 = 1;
pub const __clang__: u32 = 1;
pub const __clang_major__: u32 = 10;
pub const __clang_minor__: u32 = 0;
pub const __clang_patchlevel__: u32 = 0;
pub const __clang_version__: &'static [u8; 8usize] = b"10.0.0 \0";
pub const __ATOMIC_RELAXED: u32 = 0;
pub const __ATOMIC_CONSUME: u32 = 1;
pub const __ATOMIC_ACQUIRE: u32 = 2;
pub const __ATOMIC_RELEASE: u32 = 3;
pub const __ATOMIC_ACQ_REL: u32 = 4;
pub const __ATOMIC_SEQ_CST: u32 = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM: u32 = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP: u32 = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE: u32 = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES: u32 = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP: u32 = 4;
pub const __PRAGMA_REDEFINE_EXTNAME: u32 = 1;
pub const __VERSION__: &'static [u8; 14usize] = b"Clang 10.0.0 \0";
pub const __OBJC_BOOL_IS_BOOL: u32 = 0;
pub const __CONSTANT_CFSTRINGS__: u32 = 1;
pub const __ORDER_LITTLE_ENDIAN__: u32 = 1234;
pub const __ORDER_BIG_ENDIAN__: u32 = 4321;
pub const __ORDER_PDP_ENDIAN__: u32 = 3412;
pub const __BYTE_ORDER__: u32 = 1234;
pub const __LITTLE_ENDIAN__: u32 = 1;
pub const _ILP32: u32 = 1;
pub const __ILP32__: u32 = 1;
pub const __CHAR_BIT__: u32 = 8;
pub const __SCHAR_MAX__: u32 = 127;
pub const __SHRT_MAX__: u32 = 32767;
pub const __INT_MAX__: u32 = 2147483647;
pub const __LONG_MAX__: u32 = 2147483647;
pub const __LONG_LONG_MAX__: u64 = 9223372036854775807;
pub const __WCHAR_MAX__: u32 = 65535;
pub const __WINT_MAX__: u32 = 65535;
pub const __INTMAX_MAX__: u64 = 9223372036854775807;
pub const __SIZE_MAX__: u32 = 4294967295;
pub const __UINTMAX_MAX__: i32 = -1;
pub const __PTRDIFF_MAX__: u32 = 2147483647;
pub const __INTPTR_MAX__: u32 = 2147483647;
pub const __UINTPTR_MAX__: u32 = 4294967295;
pub const __SIZEOF_DOUBLE__: u32 = 8;
pub const __SIZEOF_FLOAT__: u32 = 4;
pub const __SIZEOF_INT__: u32 = 4;
pub const __SIZEOF_LONG__: u32 = 4;
pub const __SIZEOF_LONG_DOUBLE__: u32 = 8;
pub const __SIZEOF_LONG_LONG__: u32 = 8;
pub const __SIZEOF_POINTER__: u32 = 4;
pub const __SIZEOF_SHORT__: u32 = 2;
pub const __SIZEOF_PTRDIFF_T__: u32 = 4;
pub const __SIZEOF_SIZE_T__: u32 = 4;
pub const __SIZEOF_WCHAR_T__: u32 = 2;
pub const __SIZEOF_WINT_T__: u32 = 2;
pub const __INTMAX_FMTd__: &'static [u8; 4usize] = b"lld\0";
pub const __INTMAX_FMTi__: &'static [u8; 4usize] = b"lli\0";
pub const __UINTMAX_FMTo__: &'static [u8; 4usize] = b"llo\0";
pub const __UINTMAX_FMTu__: &'static [u8; 4usize] = b"llu\0";
pub const __UINTMAX_FMTx__: &'static [u8; 4usize] = b"llx\0";
pub const __UINTMAX_FMTX__: &'static [u8; 4usize] = b"llX\0";
pub const __INTMAX_WIDTH__: u32 = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __PTRDIFF_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __PTRDIFF_WIDTH__: u32 = 32;
pub const __INTPTR_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INTPTR_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INTPTR_WIDTH__: u32 = 32;
pub const __SIZE_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __SIZE_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __SIZE_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __SIZE_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __SIZE_WIDTH__: u32 = 32;
pub const __WCHAR_WIDTH__: u32 = 16;
pub const __WINT_WIDTH__: u32 = 16;
pub const __SIG_ATOMIC_WIDTH__: u32 = 32;
pub const __SIG_ATOMIC_MAX__: u32 = 2147483647;
pub const __UINTMAX_WIDTH__: u32 = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINTPTR_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINTPTR_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINTPTR_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINTPTR_WIDTH__: u32 = 32;
pub const __FLT_HAS_DENORM__: u32 = 1;
pub const __FLT_DIG__: u32 = 6;
pub const __FLT_DECIMAL_DIG__: u32 = 9;
pub const __FLT_HAS_INFINITY__: u32 = 1;
pub const __FLT_HAS_QUIET_NAN__: u32 = 1;
pub const __FLT_MANT_DIG__: u32 = 24;
pub const __FLT_MAX_10_EXP__: u32 = 38;
pub const __FLT_MAX_EXP__: u32 = 128;
pub const __FLT_MIN_10_EXP__: i32 = -37;
pub const __FLT_MIN_EXP__: i32 = -125;
pub const __DBL_HAS_DENORM__: u32 = 1;
pub const __DBL_DIG__: u32 = 15;
pub const __DBL_DECIMAL_DIG__: u32 = 17;
pub const __DBL_HAS_INFINITY__: u32 = 1;
pub const __DBL_HAS_QUIET_NAN__: u32 = 1;
pub const __DBL_MANT_DIG__: u32 = 53;
pub const __DBL_MAX_10_EXP__: u32 = 308;
pub const __DBL_MAX_EXP__: u32 = 1024;
pub const __DBL_MIN_10_EXP__: i32 = -307;
pub const __DBL_MIN_EXP__: i32 = -1021;
pub const __LDBL_HAS_DENORM__: u32 = 1;
pub const __LDBL_DIG__: u32 = 15;
pub const __LDBL_DECIMAL_DIG__: u32 = 17;
pub const __LDBL_HAS_INFINITY__: u32 = 1;
pub const __LDBL_HAS_QUIET_NAN__: u32 = 1;
pub const __LDBL_MANT_DIG__: u32 = 53;
pub const __LDBL_MAX_10_EXP__: u32 = 308;
pub const __LDBL_MAX_EXP__: u32 = 1024;
pub const __LDBL_MIN_10_EXP__: i32 = -307;
pub const __LDBL_MIN_EXP__: i32 = -1021;
pub const __POINTER_WIDTH__: u32 = 32;
pub const __BIGGEST_ALIGNMENT__: u32 = 16;
pub const __WCHAR_UNSIGNED__: u32 = 1;
pub const __WINT_UNSIGNED__: u32 = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __INT64_FMTd__: &'static [u8; 4usize] = b"lld\0";
pub const __INT64_FMTi__: &'static [u8; 4usize] = b"lli\0";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __UINT8_MAX__: u32 = 255;
pub const __INT8_MAX__: u32 = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __UINT16_MAX__: u32 = 65535;
pub const __INT16_MAX__: u32 = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __UINT32_MAX__: u32 = 4294967295;
pub const __INT32_MAX__: u32 = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 4usize] = b"llo\0";
pub const __UINT64_FMTu__: &'static [u8; 4usize] = b"llu\0";
pub const __UINT64_FMTx__: &'static [u8; 4usize] = b"llx\0";
pub const __UINT64_FMTX__: &'static [u8; 4usize] = b"llX\0";
pub const __UINT64_MAX__: i32 = -1;
pub const __INT64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST8_MAX__: u32 = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_LEAST8_MAX__: u32 = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_LEAST16_MAX__: u32 = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_LEAST16_MAX__: u32 = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_LEAST32_MAX__: u32 = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_LEAST32_MAX__: u32 = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_LEAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 4usize] = b"lld\0";
pub const __INT_LEAST64_FMTi__: &'static [u8; 4usize] = b"lli\0";
pub const __UINT_LEAST64_MAX__: i32 = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 4usize] = b"llo\0";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 4usize] = b"llu\0";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 4usize] = b"llx\0";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 4usize] = b"llX\0";
pub const __INT_FAST8_MAX__: u32 = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\0";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\0";
pub const __UINT_FAST8_MAX__: u32 = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\0";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\0";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\0";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\0";
pub const __INT_FAST16_MAX__: u32 = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\0";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\0";
pub const __UINT_FAST16_MAX__: u32 = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\0";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\0";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\0";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\0";
pub const __INT_FAST32_MAX__: u32 = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\0";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\0";
pub const __UINT_FAST32_MAX__: u32 = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\0";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\0";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\0";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\0";
pub const __INT_FAST64_MAX__: u64 = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 4usize] = b"lld\0";
pub const __INT_FAST64_FMTi__: &'static [u8; 4usize] = b"lli\0";
pub const __UINT_FAST64_MAX__: i32 = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 4usize] = b"llo\0";
pub const __UINT_FAST64_FMTu__: &'static [u8; 4usize] = b"llu\0";
pub const __UINT_FAST64_FMTx__: &'static [u8; 4usize] = b"llx\0";
pub const __UINT_FAST64_FMTX__: &'static [u8; 4usize] = b"llX\0";
pub const __FINITE_MATH_ONLY__: u32 = 0;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE: u32 = 2;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE: u32 = 2;
pub const __NO_INLINE__: u32 = 1;
pub const __FLT_EVAL_METHOD__: u32 = 0;
pub const __FLT_RADIX__: u32 = 2;
pub const __DECIMAL_DIG__: u32 = 17;
pub const __GCC_ASM_FLAG_OUTPUTS__: u32 = 1;
pub const __code_model_small_: u32 = 1;
pub const i386: u32 = 1;
pub const __i386: u32 = 1;
pub const __i386__: u32 = 1;
pub const __SEG_GS: u32 = 1;
pub const __SEG_FS: u32 = 1;
pub const __pentium4: u32 = 1;
pub const __pentium4__: u32 = 1;
pub const __tune_pentium4__: u32 = 1;
pub const __NO_MATH_INLINES: u32 = 1;
pub const __FXSR__: u32 = 1;
pub const __SSE2__: u32 = 1;
pub const __SSE2_MATH__: u32 = 1;
pub const __SSE__: u32 = 1;
pub const __SSE_MATH__: u32 = 1;
pub const _M_IX86_FP: u32 = 2;
pub const __MMX__: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: u32 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: u32 = 1;
pub const _WIN32: u32 = 1;
pub const _MSC_VER: u32 = 1900;
pub const _MSC_FULL_VER: u32 = 190024241;
pub const _MSC_BUILD: u32 = 1;
pub const _MSC_EXTENSIONS: u32 = 1;
pub const _INTEGRAL_MAX_BITS: u32 = 64;
pub const _M_IX86: u32 = 600;
pub const __STDC_HOSTED__: u32 = 1;
pub const __STDC_VERSION__: u32 = 201112;
pub const __STDC_UTF_16__: u32 = 1;
pub const __STDC_UTF_32__: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 2usize] = b"_\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const _UPPER: u32 = 1;
pub const _LOWER: u32 = 2;
pub const _DIGIT: u32 = 4;
pub const _SPACE: u32 = 8;
pub const _PUNCT: u32 = 16;
pub const _CONTROL: u32 = 32;
pub const _BLANK: u32 = 64;
pub const _HEX: u32 = 128;
pub const _LEADBYTE: u32 = 32768;
pub const _ALPHA: u32 = 259;
pub const _SH_DENYRW: u32 = 16;
pub const _SH_DENYWR: u32 = 32;
pub const _SH_DENYRD: u32 = 48;
pub const _SH_DENYNO: u32 = 64;
pub const _SH_SECURE: u32 = 128;
pub const SH_DENYRW: u32 = 16;
pub const SH_DENYWR: u32 = 32;
pub const SH_DENYRD: u32 = 48;
pub const SH_DENYNO: u32 = 64;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const _S_IFMT: u32 = 61440;
pub const _S_IFDIR: u32 = 16384;
pub const _S_IFCHR: u32 = 8192;
pub const _S_IFIFO: u32 = 4096;
pub const _S_IFREG: u32 = 32768;
pub const _S_IREAD: u32 = 256;
pub const _S_IWRITE: u32 = 128;
pub const _S_IEXEC: u32 = 64;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFREG: u32 = 32768;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const TCOD_MAJOR_VERSION: u32 = 1;
pub const TCOD_MINOR_VERSION: u32 = 16;
pub const TCOD_PATCHLEVEL: u32 = 0;
pub const TCOD_STRVERSION: &'static [u8; 16usize] = b"1.16.0-alpha.12\0";
pub const TCOD_HEXVERSION: u32 = 69632;
pub const TCOD_TECHVERSION: u32 = 17825792;
pub const TCOD_STRVERSIONNAME: &'static [u8; 24usize] = b"libtcod 1.16.0-alpha.12\0";
pub const TCOD_KEY_TEXT_SIZE: u32 = 32;
pub const TCOD_NOISE_MAX_OCTAVES: u32 = 128;
pub const TCOD_NOISE_MAX_DIMENSIONS: u32 = 4;
pub const TCOD_NOISE_DEFAULT_HURST: f64 = 0.5;
pub const TCOD_NOISE_DEFAULT_LACUNARITY: f64 = 2.0;
pub const TCOD_LEX_FLAG_NOCASE: u32 = 1;
pub const TCOD_LEX_FLAG_NESTING_COMMENT: u32 = 2;
pub const TCOD_LEX_FLAG_TOKENIZE_COMMENTS: u32 = 4;
pub const TCOD_LEX_ERROR: i32 = -1;
pub const TCOD_LEX_UNKNOWN: u32 = 0;
pub const TCOD_LEX_SYMBOL: u32 = 1;
pub const TCOD_LEX_KEYWORD: u32 = 2;
pub const TCOD_LEX_IDEN: u32 = 3;
pub const TCOD_LEX_STRING: u32 = 4;
pub const TCOD_LEX_INTEGER: u32 = 5;
pub const TCOD_LEX_FLOAT: u32 = 6;
pub const TCOD_LEX_CHAR: u32 = 7;
pub const TCOD_LEX_EOF: u32 = 8;
pub const TCOD_LEX_COMMENT: u32 = 9;
pub const TCOD_LEX_MAX_SYMBOLS: u32 = 100;
pub const TCOD_LEX_SYMBOL_SIZE: u32 = 5;
pub const TCOD_LEX_MAX_KEYWORDS: u32 = 100;
pub const TCOD_LEX_KEYWORD_SIZE: u32 = 20;
pub const TCOD_HEAP_DEFAULT_CAPACITY: u32 = 256;
pub const TCOD_HEAP_MAX_NODE_SIZE: u32 = 256;
pub const TCOD_PATHFINDER_MAX_DIMENSIONS: u32 = 4;
pub type va_list = *mut ::std::os::raw::c_char;
pub type size_t = ::std::os::raw::c_uint;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "fastcall" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure();
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        12usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        4usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
impl Default for __crt_locale_data_public {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        4usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
impl Default for __crt_locale_pointers {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _cgetws_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _SizeRead: *mut size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _cputws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getwch() -> wint_t;
}
extern "C" {
    pub fn _getwche() -> wint_t;
}
extern "C" {
    pub fn _putwch(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _ungetwch(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn _getwch_nolock() -> wint_t;
}
extern "C" {
    pub fn _getwche_nolock() -> wint_t;
}
extern "C" {
    pub fn _putwch_nolock(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _ungetwch_nolock(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn __conio_common_vcwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __pctype_func() -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __pwctype_func() -> *const wctype_t;
}
extern "C" {
    pub fn iswalnum(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswascii(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iswcsymf(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iswcsym(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswalnum_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswalpha_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswblank_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcntrl_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswgraph_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswlower_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswprint_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswpunct_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswspace_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswupper_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswxdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcsymf_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcsym_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towupper(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn towlower(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn iswctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _towupper_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn _towlower_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn _iswctype_l(_C: wint_t, _Type: wctype_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isleadbyte(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isleadbyte_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_wctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wgetcwd(_DstBuf: *mut wchar_t, _SizeInWords: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetdcwd(
        _Drive: ::std::os::raw::c_int,
        _DstBuf: *mut wchar_t,
        _SizeInWords: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wchdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmkdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrmdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
pub type _fsize_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wfinddata32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata32_t() {
    assert_eq!(
        ::std::mem::size_of::<_wfinddata32_t>(),
        540usize,
        concat!("Size of: ", stringify!(_wfinddata32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_wfinddata32_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).time_create as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).time_access as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).time_write as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).name as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(name)
        )
    );
}
impl Default for _wfinddata32_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wfinddata32i64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata32i64_t() {
    assert_eq!(
        ::std::mem::size_of::<_wfinddata32i64_t>(),
        544usize,
        concat!("Size of: ", stringify!(_wfinddata32i64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata32i64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata32i64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).time_create as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).time_access as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).time_write as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(name)
        )
    );
}
impl Default for _wfinddata32i64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wfinddata64i32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata64i32_t() {
    assert_eq!(
        ::std::mem::size_of::<_wfinddata64i32_t>(),
        560usize,
        concat!("Size of: ", stringify!(_wfinddata64i32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata64i32_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata64i32_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).time_create as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).time_access as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).time_write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).name as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(name)
        )
    );
}
impl Default for _wfinddata64i32_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wfinddata64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata64_t() {
    assert_eq!(
        ::std::mem::size_of::<_wfinddata64_t>(),
        560usize,
        concat!("Size of: ", stringify!(_wfinddata64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).time_create as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).time_access as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).time_write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(name)
        )
    );
}
impl Default for _wfinddata64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn _waccess(
        _FileName: *const wchar_t,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _waccess_s(_FileName: *const wchar_t, _AccessMode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _wchmod(
        _FileName: *const wchar_t,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcreat(
        _FileName: *const wchar_t,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindfirst32(_FileName: *const wchar_t, _FindData: *mut _wfinddata32_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wunlink(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrename(
        _OldFileName: *const wchar_t,
        _NewFileName: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmktemp_s(_TemplateName: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wmktemp(_TemplateName: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wfindfirst32i64(_FileName: *const wchar_t, _FindData: *mut _wfinddata32i64_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64i32(_FileName: *const wchar_t, _FindData: *mut _wfinddata64i32_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64(_FileName: *const wchar_t, _FindData: *mut _wfinddata64_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32i64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32i64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64i32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64i32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen_s(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionFlag: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsopen_dispatch(
        _FileName: *const wchar_t,
        _OFlag: ::std::os::raw::c_int,
        _ShFlag: ::std::os::raw::c_int,
        _PMode: ::std::os::raw::c_int,
        _PFileHandle: *mut ::std::os::raw::c_int,
        _BSecure: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wexecl(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexecle(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexeclp(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexeclpe(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexecv(_FileName: *const wchar_t, _ArgList: *const *const wchar_t) -> isize;
}
extern "C" {
    pub fn _wexecve(
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wexecvp(_FileName: *const wchar_t, _ArgList: *const *const wchar_t) -> isize;
}
extern "C" {
    pub fn _wexecvpe(
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnl(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnle(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnv(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnve(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        4usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        4usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
impl Default for _iobuf {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: size_t,
        _Value: wchar_t,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: size_t, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        36usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
}
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type _ino_t = ::std::os::raw::c_ushort;
pub type ino_t = _ino_t;
pub type _dev_t = ::std::os::raw::c_uint;
pub type dev_t = _dev_t;
pub type _off_t = ::std::os::raw::c_long;
pub type off_t = _off_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _stat32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[test]
fn bindgen_test_layout__stat32() {
    assert_eq!(
        ::std::mem::size_of::<_stat32>(),
        36usize,
        concat!("Size of: ", stringify!(_stat32))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat32>(),
        4usize,
        concat!("Alignment of ", stringify!(_stat32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_atime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_mtime as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_ctime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _stat32i64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[test]
fn bindgen_test_layout__stat32i64() {
    assert_eq!(
        ::std::mem::size_of::<_stat32i64>(),
        48usize,
        concat!("Size of: ", stringify!(_stat32i64))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat32i64>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat32i64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_atime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_mtime as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_ctime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _stat64i32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[test]
fn bindgen_test_layout__stat64i32() {
    assert_eq!(
        ::std::mem::size_of::<_stat64i32>(),
        48usize,
        concat!("Size of: ", stringify!(_stat64i32))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat64i32>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat64i32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_atime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_mtime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_ctime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _stat64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[test]
fn bindgen_test_layout__stat64() {
    assert_eq!(
        ::std::mem::size_of::<_stat64>(),
        56usize,
        concat!("Size of: ", stringify!(_stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_atime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_mtime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_ctime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct stat {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: time_t,
    pub st_mtime: time_t,
    pub st_ctime: time_t,
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        48usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctime)
        )
    );
}
extern "C" {
    pub fn _fstat32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat32i64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64i32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32i64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64i32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32(_FileName: *const wchar_t, _Stat: *mut _stat32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32i64(_FileName: *const wchar_t, _Stat: *mut _stat32i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64i32(_FileName: *const wchar_t, _Stat: *mut _stat64i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64(_FileName: *const wchar_t, _Stat: *mut _stat64) -> ::std::os::raw::c_int;
}
pub type _Wint_t = wchar_t;
extern "C" {
    pub fn _wsetlocale(_Category: ::std::os::raw::c_int, _Locale: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcreate_locale(_Category: ::std::os::raw::c_int, _Locale: *const wchar_t) -> _locale_t;
}
extern "C" {
    pub fn btowc(_Ch: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn mbrlen(
        _Ch: *const ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _State: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbrtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _State: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbsrtowcs_s(
        _Retval: *mut size_t,
        _Dst: *mut wchar_t,
        _Size: size_t,
        _PSrc: *mut *const ::std::os::raw::c_char,
        _N: size_t,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbsrtowcs(
        _Dest: *mut wchar_t,
        _PSrc: *mut *const ::std::os::raw::c_char,
        _Count: size_t,
        _State: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcrtomb_s(
        _Retval: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Ch: wchar_t,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcrtomb(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: wchar_t,
        _State: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcsrtombs_s(
        _Retval: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Src: *mut *const wchar_t,
        _Size: size_t,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsrtombs(
        _Dest: *mut ::std::os::raw::c_char,
        _PSource: *mut *const wchar_t,
        _Count: size_t,
        _State: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctob(_WCh: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy_s(_S1: *mut wchar_t, _N1: rsize_t, _S2: *const wchar_t, _N: rsize_t) -> errno_t;
}
extern "C" {
    pub fn wmemmove_s(_S1: *mut wchar_t, _N1: rsize_t, _S2: *const wchar_t, _N: rsize_t)
        -> errno_t;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn TCOD_strdup(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_strcasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_strncasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: size_t,
    ) -> ::std::os::raw::c_int;
}
#[doc = "  \\brief A callback to be passed to TCOD_line"]
#[doc = ""]
#[doc = "  The points given to the callback include both the starting and ending"]
#[doc = "  positions."]
#[doc = ""]
#[doc = "  \\param x"]
#[doc = "  \\param y"]
#[doc = "  \\return As long as this callback returns true it will be called with the"]
#[doc = "          next x,y point on the line."]
pub type TCOD_line_listener_t = ::std::option::Option<
    unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> bool,
>;
extern "C" {
    pub fn TCOD_line_init(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_line_step(
        xCur: *mut ::std::os::raw::c_int,
        yCur: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_line(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
        listener: TCOD_line_listener_t,
    ) -> bool;
}
#[doc = "  \\brief A struct used for computing a bresenham line."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_bresenham_data_t {
    pub stepx: ::std::os::raw::c_int,
    pub stepy: ::std::os::raw::c_int,
    pub e: ::std::os::raw::c_int,
    pub deltax: ::std::os::raw::c_int,
    pub deltay: ::std::os::raw::c_int,
    pub origx: ::std::os::raw::c_int,
    pub origy: ::std::os::raw::c_int,
    pub destx: ::std::os::raw::c_int,
    pub desty: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TCOD_bresenham_data_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_bresenham_data_t>(),
        36usize,
        concat!("Size of: ", stringify!(TCOD_bresenham_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_bresenham_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_bresenham_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).stepx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(stepx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).stepy as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(stepy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).e as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).deltax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(deltax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).deltay as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(deltay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).origx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(origx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).origy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(origy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).destx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(destx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bresenham_data_t>())).desty as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bresenham_data_t),
            "::",
            stringify!(desty)
        )
    );
}
extern "C" {
    pub fn TCOD_line_init_mt(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
        data: *mut TCOD_bresenham_data_t,
    );
}
extern "C" {
    pub fn TCOD_line_step_mt(
        xCur: *mut ::std::os::raw::c_int,
        yCur: *mut ::std::os::raw::c_int,
        data: *mut TCOD_bresenham_data_t,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_line_mt(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
        listener: TCOD_line_listener_t,
        data: *mut TCOD_bresenham_data_t,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Random {
    _unused: [u8; 0],
}
pub type TCOD_random_t = *mut TCOD_Random;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_dice_t {
    pub nb_rolls: ::std::os::raw::c_int,
    pub nb_faces: ::std::os::raw::c_int,
    pub multiplier: f32,
    pub addsub: f32,
}
#[test]
fn bindgen_test_layout_TCOD_dice_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_dice_t>(),
        16usize,
        concat!("Size of: ", stringify!(TCOD_dice_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_dice_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_dice_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_dice_t>())).nb_rolls as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_dice_t),
            "::",
            stringify!(nb_rolls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_dice_t>())).nb_faces as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_dice_t),
            "::",
            stringify!(nb_faces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_dice_t>())).multiplier as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_dice_t),
            "::",
            stringify!(multiplier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_dice_t>())).addsub as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_dice_t),
            "::",
            stringify!(addsub)
        )
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_random_algo_t {
    TCOD_RNG_MT = 0,
    TCOD_RNG_CMWC = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_distribution_t {
    TCOD_DISTRIBUTION_LINEAR = 0,
    TCOD_DISTRIBUTION_GAUSSIAN = 1,
    TCOD_DISTRIBUTION_GAUSSIAN_RANGE = 2,
    TCOD_DISTRIBUTION_GAUSSIAN_INVERSE = 3,
    TCOD_DISTRIBUTION_GAUSSIAN_RANGE_INVERSE = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TCOD_tree_t {
    pub next: *mut _TCOD_tree_t,
    pub father: *mut _TCOD_tree_t,
    pub sons: *mut _TCOD_tree_t,
}
#[test]
fn bindgen_test_layout__TCOD_tree_t() {
    assert_eq!(
        ::std::mem::size_of::<_TCOD_tree_t>(),
        12usize,
        concat!("Size of: ", stringify!(_TCOD_tree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_TCOD_tree_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_TCOD_tree_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TCOD_tree_t>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TCOD_tree_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TCOD_tree_t>())).father as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TCOD_tree_t),
            "::",
            stringify!(father)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TCOD_tree_t>())).sons as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TCOD_tree_t),
            "::",
            stringify!(sons)
        )
    );
}
impl Default for _TCOD_tree_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_tree_t = _TCOD_tree_t;
extern "C" {
    pub fn TCOD_tree_new() -> *mut TCOD_tree_t;
}
extern "C" {
    pub fn TCOD_tree_add_son(node: *mut TCOD_tree_t, son: *mut TCOD_tree_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_bsp_t {
    pub tree: TCOD_tree_t,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub position: ::std::os::raw::c_int,
    pub level: u8,
    pub horizontal: bool,
}
#[test]
fn bindgen_test_layout_TCOD_bsp_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_bsp_t>(),
        36usize,
        concat!("Size of: ", stringify!(TCOD_bsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_bsp_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_bsp_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).tree as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).w as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).h as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).position as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).level as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_bsp_t>())).horizontal as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_bsp_t),
            "::",
            stringify!(horizontal)
        )
    );
}
impl Default for TCOD_bsp_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_bsp_callback_t = ::std::option::Option<
    unsafe extern "C" fn(node: *mut TCOD_bsp_t, userData: *mut ::std::os::raw::c_void) -> bool,
>;
extern "C" {
    pub fn TCOD_bsp_new() -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_new_with_size(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_delete(node: *mut TCOD_bsp_t);
}
extern "C" {
    pub fn TCOD_bsp_left(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_right(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_father(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_is_leaf(node: *mut TCOD_bsp_t) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_pre_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_in_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_post_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_level_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_inverted_level_order(
        node: *mut TCOD_bsp_t,
        listener: TCOD_bsp_callback_t,
        userData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_contains(
        node: *mut TCOD_bsp_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_find_node(
        node: *mut TCOD_bsp_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_resize(
        node: *mut TCOD_bsp_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_bsp_split_once(
        node: *mut TCOD_bsp_t,
        horizontal: bool,
        position: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_bsp_split_recursive(
        node: *mut TCOD_bsp_t,
        randomizer: TCOD_random_t,
        nb: ::std::os::raw::c_int,
        minHSize: ::std::os::raw::c_int,
        minVSize: ::std::os::raw::c_int,
        maxHRatio: f32,
        maxVRatio: f32,
    );
}
extern "C" {
    pub fn TCOD_bsp_remove_sons(node: *mut TCOD_bsp_t);
}
#[doc = "  A three channel color struct."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_ColorRGB {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}
#[test]
fn bindgen_test_layout_TCOD_ColorRGB() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_ColorRGB>(),
        3usize,
        concat!("Size of: ", stringify!(TCOD_ColorRGB))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_ColorRGB>(),
        1usize,
        concat!("Alignment of ", stringify!(TCOD_ColorRGB))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ColorRGB>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ColorRGB),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ColorRGB>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ColorRGB),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ColorRGB>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ColorRGB),
            "::",
            stringify!(b)
        )
    );
}
pub type TCOD_color_t = TCOD_ColorRGB;
#[doc = "  A four channel color struct."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_ColorRGBA {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[test]
fn bindgen_test_layout_TCOD_ColorRGBA() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_ColorRGBA>(),
        4usize,
        concat!("Size of: ", stringify!(TCOD_ColorRGBA))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_ColorRGBA>(),
        1usize,
        concat!("Alignment of ", stringify!(TCOD_ColorRGBA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ColorRGBA>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ColorRGBA),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ColorRGBA>())).g as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ColorRGBA),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ColorRGBA>())).b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ColorRGBA),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ColorRGBA>())).a as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ColorRGBA),
            "::",
            stringify!(a)
        )
    );
}
extern "C" {
    pub fn TCOD_color_RGB(r: u8, g: u8, b: u8) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_HSV(hue: f32, saturation: f32, value: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_equals(c1: TCOD_color_t, c2: TCOD_color_t) -> bool;
}
extern "C" {
    pub fn TCOD_color_add(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_subtract(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_multiply(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_multiply_scalar(c1: TCOD_color_t, value: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_lerp(c1: TCOD_color_t, c2: TCOD_color_t, coef: f32) -> TCOD_color_t;
}
extern "C" {
    #[doc = "  Blend `src` into `dst` as an alpha blending operation."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.16"]
    #[doc = "  \\endrst"]
    pub fn TCOD_color_alpha_blend(dst: *mut TCOD_ColorRGBA, src: *const TCOD_ColorRGBA);
}
extern "C" {
    pub fn TCOD_color_set_HSV(color: *mut TCOD_color_t, hue: f32, saturation: f32, value: f32);
}
extern "C" {
    pub fn TCOD_color_get_HSV(
        color: TCOD_color_t,
        hue: *mut f32,
        saturation: *mut f32,
        value: *mut f32,
    );
}
extern "C" {
    pub fn TCOD_color_get_hue(color: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_hue(color: *mut TCOD_color_t, hue: f32);
}
extern "C" {
    pub fn TCOD_color_get_saturation(color: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_saturation(color: *mut TCOD_color_t, saturation: f32);
}
extern "C" {
    pub fn TCOD_color_get_value(color: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_value(color: *mut TCOD_color_t, value: f32);
}
extern "C" {
    pub fn TCOD_color_shift_hue(color: *mut TCOD_color_t, hshift: f32);
}
extern "C" {
    pub fn TCOD_color_scale_HSV(color: *mut TCOD_color_t, saturation_coef: f32, value_coef: f32);
}
extern "C" {
    pub fn TCOD_color_gen_map(
        map: *mut TCOD_color_t,
        nb_key: ::std::os::raw::c_int,
        key_color: *const TCOD_color_t,
        key_index: *const ::std::os::raw::c_int,
    );
}
pub const TCOD_COLOR_RED: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_RED;
pub const TCOD_COLOR_FLAME: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_FLAME;
pub const TCOD_COLOR_ORANGE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_ORANGE;
pub const TCOD_COLOR_AMBER: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_AMBER;
pub const TCOD_COLOR_YELLOW: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_YELLOW;
pub const TCOD_COLOR_LIME: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_LIME;
pub const TCOD_COLOR_CHARTREUSE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_CHARTREUSE;
pub const TCOD_COLOR_GREEN: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_GREEN;
pub const TCOD_COLOR_SEA: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_SEA;
pub const TCOD_COLOR_TURQUOISE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_TURQUOISE;
pub const TCOD_COLOR_CYAN: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_CYAN;
pub const TCOD_COLOR_SKY: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_SKY;
pub const TCOD_COLOR_AZURE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_AZURE;
pub const TCOD_COLOR_BLUE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_BLUE;
pub const TCOD_COLOR_HAN: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_HAN;
pub const TCOD_COLOR_VIOLET: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_VIOLET;
pub const TCOD_COLOR_PURPLE: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_PURPLE;
pub const TCOD_COLOR_FUCHSIA: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_FUCHSIA;
pub const TCOD_COLOR_MAGENTA: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_MAGENTA;
pub const TCOD_COLOR_PINK: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_PINK;
pub const TCOD_COLOR_CRIMSON: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_CRIMSON;
pub const TCOD_COLOR_NB: _bindgen_ty_1 = _bindgen_ty_1::TCOD_COLOR_NB;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    TCOD_COLOR_RED = 0,
    TCOD_COLOR_FLAME = 1,
    TCOD_COLOR_ORANGE = 2,
    TCOD_COLOR_AMBER = 3,
    TCOD_COLOR_YELLOW = 4,
    TCOD_COLOR_LIME = 5,
    TCOD_COLOR_CHARTREUSE = 6,
    TCOD_COLOR_GREEN = 7,
    TCOD_COLOR_SEA = 8,
    TCOD_COLOR_TURQUOISE = 9,
    TCOD_COLOR_CYAN = 10,
    TCOD_COLOR_SKY = 11,
    TCOD_COLOR_AZURE = 12,
    TCOD_COLOR_BLUE = 13,
    TCOD_COLOR_HAN = 14,
    TCOD_COLOR_VIOLET = 15,
    TCOD_COLOR_PURPLE = 16,
    TCOD_COLOR_FUCHSIA = 17,
    TCOD_COLOR_MAGENTA = 18,
    TCOD_COLOR_PINK = 19,
    TCOD_COLOR_CRIMSON = 20,
    TCOD_COLOR_NB = 21,
}
pub const TCOD_COLOR_DESATURATED: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_DESATURATED;
pub const TCOD_COLOR_LIGHTEST: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_LIGHTEST;
pub const TCOD_COLOR_LIGHTER: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_LIGHTER;
pub const TCOD_COLOR_LIGHT: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_LIGHT;
pub const TCOD_COLOR_NORMAL: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_NORMAL;
pub const TCOD_COLOR_DARK: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_DARK;
pub const TCOD_COLOR_DARKER: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_DARKER;
pub const TCOD_COLOR_DARKEST: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_DARKEST;
pub const TCOD_COLOR_LEVELS: _bindgen_ty_2 = _bindgen_ty_2::TCOD_COLOR_LEVELS;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    TCOD_COLOR_DESATURATED = 0,
    TCOD_COLOR_LIGHTEST = 1,
    TCOD_COLOR_LIGHTER = 2,
    TCOD_COLOR_LIGHT = 3,
    TCOD_COLOR_NORMAL = 4,
    TCOD_COLOR_DARK = 5,
    TCOD_COLOR_DARKER = 6,
    TCOD_COLOR_DARKEST = 7,
    TCOD_COLOR_LEVELS = 8,
}
extern "C" {
    pub static mut TCOD_colors: [[TCOD_color_t; 8usize]; 21usize];
}
extern "C" {
    pub static TCOD_black: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_white: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_brass: TCOD_color_t;
}
extern "C" {
    pub static TCOD_copper: TCOD_color_t;
}
extern "C" {
    pub static TCOD_gold: TCOD_color_t;
}
extern "C" {
    pub static TCOD_silver: TCOD_color_t;
}
extern "C" {
    pub static TCOD_celadon: TCOD_color_t;
}
extern "C" {
    pub static TCOD_peach: TCOD_color_t;
}
#[repr(i32)]
#[doc = "  An enum of libtcod error codes."]
#[doc = ""]
#[doc = "  On values other than `TCOD_E_OK` you can use `TCOD_get_error()` to learn"]
#[doc = "  more information."]
#[doc = "  \\rst"]
#[doc = "  .. versionadded:: 1.16"]
#[doc = "  \\endrst"]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_Error {
    #[doc = "  The function completed successfully without issues."]
    #[doc = ""]
    #[doc = "  A function is successful when `(err >= 0)`.  Positive values may be used"]
    #[doc = "  for warnings, or for other outputs."]
    TCOD_E_OK = 0,
    #[doc = "  The error code for generic runtime errors."]
    #[doc = ""]
    #[doc = "  The returned code my be changed in the future to something more specific."]
    #[doc = "  Use `(err < 0)` to check if the value is an error."]
    TCOD_E_ERROR = -1,
    #[doc = "  The function failed because a given input argument was invalid."]
    TCOD_E_INVALID_ARGUMENT = -2,
    #[doc = "  The function failed because it was unable to allocate enough memory."]
    TCOD_E_OUT_OF_MEMORY = -3,
    #[doc = "  The function completed, but a minor issue was detected."]
    TCOD_E_WARN = 1,
}
extern "C" {
    #[doc = "  Return the last error message.  If there is no error then the string will"]
    #[doc = "  have a length of zero."]
    #[doc = ""]
    #[doc = "  The error state is thread specific."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.12"]
    #[doc = "  \\endrst"]
    pub fn TCOD_get_error() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "  Set an error message and return TCOD_E_ERROR."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.12"]
    #[doc = "  \\endrst"]
    pub fn TCOD_set_error(msg: *const ::std::os::raw::c_char) -> TCOD_Error;
}
extern "C" {
    #[doc = "  Set an error message and return TCOD_E_ERROR."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.16"]
    #[doc = "  \\endrst"]
    pub fn TCOD_set_errorf(fmt: *const ::std::os::raw::c_char, ...) -> TCOD_Error;
}
extern "C" {
    #[doc = "  Clear a current existing error message."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.16"]
    #[doc = "  \\endrst"]
    pub fn TCOD_clear_error();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_TilesetObserver {
    pub tileset: *mut TCOD_Tileset,
    pub next: *mut TCOD_TilesetObserver,
    pub userdata: *mut ::std::os::raw::c_void,
    pub on_observer_delete:
        ::std::option::Option<unsafe extern "C" fn(observer: *mut TCOD_TilesetObserver)>,
    pub on_tile_changed: ::std::option::Option<
        unsafe extern "C" fn(
            observer: *mut TCOD_TilesetObserver,
            tile_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_TCOD_TilesetObserver() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_TilesetObserver>(),
        20usize,
        concat!("Size of: ", stringify!(TCOD_TilesetObserver))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_TilesetObserver>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_TilesetObserver))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetObserver>())).tileset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetObserver),
            "::",
            stringify!(tileset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetObserver>())).next as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetObserver),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetObserver>())).userdata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetObserver),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_TilesetObserver>())).on_observer_delete as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetObserver),
            "::",
            stringify!(on_observer_delete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_TilesetObserver>())).on_tile_changed as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetObserver),
            "::",
            stringify!(on_tile_changed)
        )
    );
}
impl Default for TCOD_TilesetObserver {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Tileset {
    pub tile_width: ::std::os::raw::c_int,
    pub tile_height: ::std::os::raw::c_int,
    pub tile_length: ::std::os::raw::c_int,
    pub tiles_capacity: ::std::os::raw::c_int,
    pub tiles_count: ::std::os::raw::c_int,
    pub pixels: *mut TCOD_ColorRGBA,
    pub character_map_length: ::std::os::raw::c_int,
    pub character_map: *mut ::std::os::raw::c_int,
    pub observer_list: *mut TCOD_TilesetObserver,
    pub virtual_columns: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TCOD_Tileset() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Tileset>(),
        44usize,
        concat!("Size of: ", stringify!(TCOD_Tileset))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Tileset>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Tileset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).tile_width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(tile_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).tile_height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(tile_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).tile_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(tile_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).tiles_capacity as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(tiles_capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).tiles_count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(tiles_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).pixels as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(pixels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_Tileset>())).character_map_length as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(character_map_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).character_map as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(character_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).observer_list as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(observer_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).virtual_columns as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(virtual_columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Tileset>())).ref_count as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Tileset),
            "::",
            stringify!(ref_count)
        )
    );
}
impl Default for TCOD_Tileset {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[doc = "  Create a new tile-set with the given tile size."]
    pub fn TCOD_tileset_new(
        tile_width: ::std::os::raw::c_int,
        tile_height: ::std::os::raw::c_int,
    ) -> *mut TCOD_Tileset;
}
extern "C" {
    #[doc = "  Delete a tile-set."]
    pub fn TCOD_tileset_delete(tileset: *mut TCOD_Tileset);
}
extern "C" {
    #[doc = "  Return the pixel width of tiles in this tileset."]
    #[doc = ""]
    #[doc = "  The tileset functions are provisional, the API may change in the future."]
    pub fn TCOD_tileset_get_tile_width_(tileset: *const TCOD_Tileset) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  Return the pixel height of tiles in this tileset."]
    #[doc = ""]
    #[doc = "  The tileset functions are provisional, the API may change in the future."]
    pub fn TCOD_tileset_get_tile_height_(tileset: *const TCOD_Tileset) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  Fetch a tile, outputting its data to a pixel buffer."]
    #[doc = ""]
    #[doc = "  `codepoint` is the index for the tile.  Unicode is recommend."]
    #[doc = ""]
    #[doc = "  `buffer` is a pointer to a contiguous row-major array of pixels.  The tile"]
    #[doc = "  data will be outputted here.  This pointer can be NULL if you only want to"]
    #[doc = "  know if the tileset has a specific tile."]
    #[doc = ""]
    #[doc = "  Returns 0 if the tile exists.  Returns a negative value on an error or if"]
    #[doc = "  the tileset does not have a tile for this codepoint."]
    #[doc = ""]
    #[doc = "  The tileset functions are provisional, the API may change in the future."]
    pub fn TCOD_tileset_get_tile_(
        tileset: *const TCOD_Tileset,
        codepoint: ::std::os::raw::c_int,
        buffer: *mut TCOD_ColorRGBA,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "  Upload a tile from a pixel buffer into this tileset."]
    #[doc = ""]
    #[doc = "  `codepoint` is the index for the tile.  Unicode is recommend."]
    #[doc = ""]
    #[doc = "  `buffer` is a pointer to a contiguous row-major array of pixels."]
    #[doc = "  This can not be NULL."]
    #[doc = ""]
    #[doc = "  The tileset functions are provisional, the API may change in the future."]
    pub fn TCOD_tileset_set_tile_(
        tileset: *mut TCOD_Tileset,
        codepoint: ::std::os::raw::c_int,
        buffer: *const TCOD_ColorRGBA,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "  Load a font from a tilesheet."]
    pub fn TCOD_tileset_load(
        filename: *const ::std::os::raw::c_char,
        columns: ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        charmap: *mut ::std::os::raw::c_int,
    ) -> *mut TCOD_Tileset;
}
extern "C" {
    #[doc = "  Assign a codepoint to an existing tile based on its tile ID."]
    #[doc = ""]
    #[doc = "  Returns the tile ID on success."]
    #[doc = ""]
    #[doc = "  Returns a negative value on error."]
    pub fn TCOD_tileset_assign_tile(
        tileset: *mut TCOD_Tileset,
        tile_id: ::std::os::raw::c_int,
        codepoint: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  Return a pointer to the tile for `codepoint`."]
    #[doc = ""]
    #[doc = "  Returns NULL if no tile exists for codepoint."]
    pub fn TCOD_tileset_get_tile(
        tileset: *const TCOD_Tileset,
        codepoint: ::std::os::raw::c_int,
    ) -> *const TCOD_ColorRGBA;
}
extern "C" {
    #[doc = "  Return a new observer to this tileset."]
    #[doc = ""]
    #[doc = "  For internal use."]
    pub fn TCOD_tileset_observer_new(tileset: *mut TCOD_Tileset) -> *mut TCOD_TilesetObserver;
}
extern "C" {
    #[doc = "  Delete an existing observer."]
    #[doc = ""]
    #[doc = "  Will call this observers on_observer_delete callback."]
    #[doc = ""]
    #[doc = "  For internal use."]
    pub fn TCOD_tileset_observer_delete(observer: *mut TCOD_TilesetObserver);
}
extern "C" {
    #[doc = "  Called to notify any observers that a tile has been changed.  This may"]
    #[doc = "  cause running atlases to update or mark cache consoles as dirty."]
    #[doc = ""]
    #[doc = "  For internal use."]
    pub fn TCOD_tileset_notify_tile_changed(
        tileset: *mut TCOD_Tileset,
        tile_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "  Reserve memory for a specific amount of tiles."]
    #[doc = ""]
    #[doc = "  For internal use."]
    pub fn TCOD_tileset_reserve(
        tileset: *mut TCOD_Tileset,
        desired: ::std::os::raw::c_int,
    ) -> TCOD_Error;
}
#[repr(i32)]
#[doc = "  \\enum TCOD_bkgnd_flag_t"]
#[doc = ""]
#[doc = "  Background color blend modes."]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_bkgnd_flag_t {
    TCOD_BKGND_NONE = 0,
    TCOD_BKGND_SET = 1,
    TCOD_BKGND_MULTIPLY = 2,
    TCOD_BKGND_LIGHTEN = 3,
    TCOD_BKGND_DARKEN = 4,
    TCOD_BKGND_SCREEN = 5,
    TCOD_BKGND_COLOR_DODGE = 6,
    TCOD_BKGND_COLOR_BURN = 7,
    TCOD_BKGND_ADD = 8,
    TCOD_BKGND_ADDA = 9,
    TCOD_BKGND_BURN = 10,
    TCOD_BKGND_OVERLAY = 11,
    TCOD_BKGND_ALPH = 12,
    TCOD_BKGND_DEFAULT = 13,
}
#[repr(i32)]
#[doc = "  \\enum TCOD_alignment_t"]
#[doc = ""]
#[doc = "  Print justification options."]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_alignment_t {
    TCOD_LEFT = 0,
    TCOD_RIGHT = 1,
    TCOD_CENTER = 2,
}
#[doc = "  A console tile."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_ConsoleTile {
    #[doc = "  The Unicode codepoint for this tile."]
    pub ch: ::std::os::raw::c_int,
    #[doc = "  The tile glyph color, rendered on top of the background."]
    pub fg: TCOD_ColorRGBA,
    #[doc = "  The tile background color, rendered behind the glyph."]
    pub bg: TCOD_ColorRGBA,
}
#[test]
fn bindgen_test_layout_TCOD_ConsoleTile() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_ConsoleTile>(),
        12usize,
        concat!("Size of: ", stringify!(TCOD_ConsoleTile))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_ConsoleTile>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_ConsoleTile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ConsoleTile>())).ch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ConsoleTile),
            "::",
            stringify!(ch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ConsoleTile>())).fg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ConsoleTile),
            "::",
            stringify!(fg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ConsoleTile>())).bg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ConsoleTile),
            "::",
            stringify!(bg)
        )
    );
}
#[doc = "  The libtcod console struct."]
#[doc = ""]
#[doc = "  All attributes should be considered private."]
#[doc = ""]
#[doc = "  All C++ methods should be considered provisional, and are subject to"]
#[doc = "  change."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Console {
    #[doc = " Console width and height (in characters, not pixels.)"]
    pub w: ::std::os::raw::c_int,
    #[doc = " Console width and height (in characters, not pixels.)"]
    pub h: ::std::os::raw::c_int,
    #[doc = " A contiguous array of console tiles."]
    pub tiles: *mut TCOD_ConsoleTile,
    #[doc = " Default background operator for print & print_rect functions."]
    pub bkgnd_flag: TCOD_bkgnd_flag_t,
    #[doc = " Default alignment for print & print_rect functions."]
    pub alignment: TCOD_alignment_t,
    #[doc = " Foreground (text) and background colors."]
    pub fore: TCOD_color_t,
    #[doc = " Foreground (text) and background colors."]
    pub back: TCOD_color_t,
    #[doc = " True if a key color is being used."]
    pub has_key_color: bool,
    #[doc = " The current key color for this console."]
    pub key_color: TCOD_color_t,
    #[doc = "The total length of the tiles array.  Same as `w * h`."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub elements: ::std::os::raw::c_int,
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub userdata: *mut ::std::os::raw::c_void,
    #[doc = " Internal use."]
    pub on_delete: ::std::option::Option<unsafe extern "C" fn(self_: *mut TCOD_Console)>,
}
#[test]
fn bindgen_test_layout_TCOD_Console() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Console>(),
        44usize,
        concat!("Size of: ", stringify!(TCOD_Console))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Console>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Console))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).h as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).tiles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(tiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).bkgnd_flag as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(bkgnd_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).alignment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).fore as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(fore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).back as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).has_key_color as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(has_key_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).key_color as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(key_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).elements as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(elements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).userdata as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Console>())).on_delete as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Console),
            "::",
            stringify!(on_delete)
        )
    );
}
impl Default for TCOD_Console {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_console_t = *mut TCOD_Console;
extern "C" {
    #[doc = "  Return a new console with a specific number of columns and rows."]
    #[doc = ""]
    #[doc = "  \\param w Number of columns."]
    #[doc = "  \\param h Number of columns."]
    #[doc = "  \\return A pointer to the new console, or NULL on error."]
    pub fn TCOD_console_new(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut TCOD_Console;
}
extern "C" {
    #[doc = "  Return the width of a console."]
    pub fn TCOD_console_get_width(con: *const TCOD_Console) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  Return the height of a console."]
    pub fn TCOD_console_get_height(con: *const TCOD_Console) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_set_key_color(con: *mut TCOD_Console, col: TCOD_color_t);
}
extern "C" {
    #[doc = "  Blit from one console to another."]
    #[doc = ""]
    #[doc = "  \\param srcCon Pointer to the source console."]
    #[doc = "  \\param xSrc The left region of the source console to blit from."]
    #[doc = "  \\param ySrc The top region of the source console to blit from."]
    #[doc = "  \\param wSrc The width of the region to blit from."]
    #[doc = "              If 0 then it will fill to the maximum width."]
    #[doc = "  \\param hSrc The height of the region to blit from."]
    #[doc = "              If 0 then it will fill to the maximum height."]
    #[doc = "  \\param dstCon Pointer to the destination console."]
    #[doc = "  \\param xDst The left corner to blit onto the destination console."]
    #[doc = "  \\param yDst The top corner to blit onto the destination console."]
    #[doc = "  \\param foreground_alpha Foreground blending alpha."]
    #[doc = "  \\param background_alpha Background blending alpha."]
    #[doc = ""]
    #[doc = "  If the source console has a key color, this function will use it."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionchanged:: 1.16"]
    #[doc = "      Blits can now handle per-cell alpha transparency."]
    #[doc = "  \\endrst"]
    pub fn TCOD_console_blit(
        src: *const TCOD_Console,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        wSrc: ::std::os::raw::c_int,
        hSrc: ::std::os::raw::c_int,
        dst: *mut TCOD_Console,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        foreground_alpha: f32,
        background_alpha: f32,
    );
}
extern "C" {
    pub fn TCOD_console_blit_key_color(
        src: *const TCOD_Console,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        wSrc: ::std::os::raw::c_int,
        hSrc: ::std::os::raw::c_int,
        dst: *mut TCOD_Console,
        xDst: ::std::os::raw::c_int,
        yDst: ::std::os::raw::c_int,
        foreground_alpha: f32,
        background_alpha: f32,
        key_color: *const TCOD_color_t,
    );
}
extern "C" {
    #[doc = "  Delete a console."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = ""]
    #[doc = "  If the console being deleted is the root console, then the display will be"]
    #[doc = "  uninitialized."]
    pub fn TCOD_console_delete(console: *mut TCOD_Console);
}
extern "C" {
    pub fn TCOD_console_set_default_background(con: *mut TCOD_Console, col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_set_default_foreground(con: *mut TCOD_Console, col: TCOD_color_t);
}
extern "C" {
    #[doc = "  Clear a console to its default colors and the space character code."]
    pub fn TCOD_console_clear(con: *mut TCOD_Console);
}
extern "C" {
    #[doc = "  Blend a background color onto a console tile."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The Y coordinate, the top-most position being 0."]
    #[doc = "  \\param col The background color to blend."]
    #[doc = "  \\param flag The blend mode to use."]
    pub fn TCOD_console_set_char_background(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        col: TCOD_color_t,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    #[doc = "  Change the foreground color of a console tile."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The Y coordinate, the top-most position being 0."]
    #[doc = "  \\param col The foreground color to set."]
    pub fn TCOD_console_set_char_foreground(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        col: TCOD_color_t,
    );
}
extern "C" {
    #[doc = "  Change a character on a console tile, without changing its colors."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The Y coordinate, the top-most position being 0."]
    #[doc = "  \\param c The character code to set."]
    pub fn TCOD_console_set_char(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "  Draw a character on a console using the default colors."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The Y coordinate, the top-most position being 0."]
    #[doc = "  \\param c The character code to place."]
    #[doc = "  \\param flag A TCOD_bkgnd_flag_t flag."]
    pub fn TCOD_console_put_char(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    #[doc = "  Draw a character on the console with the given colors."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The Y coordinate, the top-most position being 0."]
    #[doc = "  \\param c The character code to place."]
    #[doc = "  \\param fore The foreground color."]
    #[doc = "  \\param back The background color.  This color will not be blended."]
    pub fn TCOD_console_put_char_ex(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        fore: TCOD_color_t,
        back: TCOD_color_t,
    );
}
extern "C" {
    #[doc = "  Set a consoles default background flag."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param flag One of `TCOD_bkgnd_flag_t`."]
    pub fn TCOD_console_set_background_flag(con: *mut TCOD_Console, flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    #[doc = "  Return a consoles default background flag."]
    pub fn TCOD_console_get_background_flag(con: *mut TCOD_Console) -> TCOD_bkgnd_flag_t;
}
extern "C" {
    #[doc = "  Set a consoles default alignment."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param alignment One of TCOD_alignment_t"]
    pub fn TCOD_console_set_alignment(con: *mut TCOD_Console, alignment: TCOD_alignment_t);
}
extern "C" {
    #[doc = "  Return a consoles default alignment."]
    pub fn TCOD_console_get_alignment(con: *mut TCOD_Console) -> TCOD_alignment_t;
}
extern "C" {
    pub fn TCOD_console_get_default_background(con: *mut TCOD_Console) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_default_foreground(con: *mut TCOD_Console) -> TCOD_color_t;
}
extern "C" {
    #[doc = "  Return the background color of a console at x,y"]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The Y coordinate, the top-most position being 0."]
    #[doc = "  \\return A TCOD_color_t struct with a copy of the background color."]
    pub fn TCOD_console_get_char_background(
        con: *const TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> TCOD_color_t;
}
extern "C" {
    #[doc = "  Return the foreground color of a console at x,y"]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The Y coordinate, the top-most position being 0."]
    #[doc = "  \\return A TCOD_color_t struct with a copy of the foreground color."]
    pub fn TCOD_console_get_char_foreground(
        con: *const TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> TCOD_color_t;
}
extern "C" {
    #[doc = "  Return a character code of a console at x,y"]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The Y coordinate, the top-most position being 0."]
    #[doc = "  \\return The character code."]
    pub fn TCOD_console_get_char(
        con: *const TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  Fade the color of the display."]
    #[doc = ""]
    #[doc = "  \\param val Where at 255 colors are normal and at 0 colors are completely"]
    #[doc = "             faded."]
    #[doc = "  \\param fadecol Color to fade towards."]
    pub fn TCOD_console_set_fade(val: u8, fade: TCOD_color_t);
}
extern "C" {
    #[doc = "  Return the fade value."]
    #[doc = ""]
    #[doc = "  \\return At 255 colors are normal and at 0 colors are completely faded."]
    pub fn TCOD_console_get_fade() -> u8;
}
extern "C" {
    #[doc = "  Return the fade color."]
    #[doc = ""]
    #[doc = "  \\return The current fading color."]
    pub fn TCOD_console_get_fading_color() -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_resize_(
        console: *mut TCOD_Console,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_keycode_t {
    TCODK_NONE = 0,
    TCODK_ESCAPE = 1,
    TCODK_BACKSPACE = 2,
    TCODK_TAB = 3,
    TCODK_ENTER = 4,
    TCODK_SHIFT = 5,
    TCODK_CONTROL = 6,
    TCODK_ALT = 7,
    TCODK_PAUSE = 8,
    TCODK_CAPSLOCK = 9,
    TCODK_PAGEUP = 10,
    TCODK_PAGEDOWN = 11,
    TCODK_END = 12,
    TCODK_HOME = 13,
    TCODK_UP = 14,
    TCODK_LEFT = 15,
    TCODK_RIGHT = 16,
    TCODK_DOWN = 17,
    TCODK_PRINTSCREEN = 18,
    TCODK_INSERT = 19,
    TCODK_DELETE = 20,
    TCODK_LWIN = 21,
    TCODK_RWIN = 22,
    TCODK_APPS = 23,
    TCODK_0 = 24,
    TCODK_1 = 25,
    TCODK_2 = 26,
    TCODK_3 = 27,
    TCODK_4 = 28,
    TCODK_5 = 29,
    TCODK_6 = 30,
    TCODK_7 = 31,
    TCODK_8 = 32,
    TCODK_9 = 33,
    TCODK_KP0 = 34,
    TCODK_KP1 = 35,
    TCODK_KP2 = 36,
    TCODK_KP3 = 37,
    TCODK_KP4 = 38,
    TCODK_KP5 = 39,
    TCODK_KP6 = 40,
    TCODK_KP7 = 41,
    TCODK_KP8 = 42,
    TCODK_KP9 = 43,
    TCODK_KPADD = 44,
    TCODK_KPSUB = 45,
    TCODK_KPDIV = 46,
    TCODK_KPMUL = 47,
    TCODK_KPDEC = 48,
    TCODK_KPENTER = 49,
    TCODK_F1 = 50,
    TCODK_F2 = 51,
    TCODK_F3 = 52,
    TCODK_F4 = 53,
    TCODK_F5 = 54,
    TCODK_F6 = 55,
    TCODK_F7 = 56,
    TCODK_F8 = 57,
    TCODK_F9 = 58,
    TCODK_F10 = 59,
    TCODK_F11 = 60,
    TCODK_F12 = 61,
    TCODK_NUMLOCK = 62,
    TCODK_SCROLLLOCK = 63,
    TCODK_SPACE = 64,
    TCODK_CHAR = 65,
    TCODK_TEXT = 66,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_key_t {
    pub vk: TCOD_keycode_t,
    pub c: ::std::os::raw::c_char,
    pub text: [::std::os::raw::c_char; 32usize],
    pub pressed: bool,
    pub lalt: bool,
    pub lctrl: bool,
    pub lmeta: bool,
    pub ralt: bool,
    pub rctrl: bool,
    pub rmeta: bool,
    pub shift: bool,
}
#[test]
fn bindgen_test_layout_TCOD_key_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_key_t>(),
        48usize,
        concat!("Size of: ", stringify!(TCOD_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_key_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).vk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(vk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).c as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).text as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).pressed as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).lalt as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(lalt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).lctrl as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(lctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).lmeta as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(lmeta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).ralt as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(ralt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).rctrl as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(rctrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).rmeta as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(rmeta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_key_t>())).shift as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_key_t),
            "::",
            stringify!(shift)
        )
    );
}
impl Default for TCOD_key_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_chars_t {
    TCOD_CHAR_HLINE = 196,
    TCOD_CHAR_VLINE = 179,
    TCOD_CHAR_NE = 191,
    TCOD_CHAR_NW = 218,
    TCOD_CHAR_SE = 217,
    TCOD_CHAR_SW = 192,
    TCOD_CHAR_TEEW = 180,
    TCOD_CHAR_TEEE = 195,
    TCOD_CHAR_TEEN = 193,
    TCOD_CHAR_TEES = 194,
    TCOD_CHAR_CROSS = 197,
    TCOD_CHAR_DHLINE = 205,
    TCOD_CHAR_DVLINE = 186,
    TCOD_CHAR_DNE = 187,
    TCOD_CHAR_DNW = 201,
    TCOD_CHAR_DSE = 188,
    TCOD_CHAR_DSW = 200,
    TCOD_CHAR_DTEEW = 185,
    TCOD_CHAR_DTEEE = 204,
    TCOD_CHAR_DTEEN = 202,
    TCOD_CHAR_DTEES = 203,
    TCOD_CHAR_DCROSS = 206,
    TCOD_CHAR_BLOCK1 = 176,
    TCOD_CHAR_BLOCK2 = 177,
    TCOD_CHAR_BLOCK3 = 178,
    TCOD_CHAR_ARROW_N = 24,
    TCOD_CHAR_ARROW_S = 25,
    TCOD_CHAR_ARROW_E = 26,
    TCOD_CHAR_ARROW_W = 27,
    TCOD_CHAR_ARROW2_N = 30,
    TCOD_CHAR_ARROW2_S = 31,
    TCOD_CHAR_ARROW2_E = 16,
    TCOD_CHAR_ARROW2_W = 17,
    TCOD_CHAR_DARROW_H = 29,
    TCOD_CHAR_DARROW_V = 18,
    TCOD_CHAR_CHECKBOX_UNSET = 224,
    TCOD_CHAR_CHECKBOX_SET = 225,
    TCOD_CHAR_RADIO_UNSET = 9,
    TCOD_CHAR_RADIO_SET = 10,
    TCOD_CHAR_SUBP_NW = 226,
    TCOD_CHAR_SUBP_NE = 227,
    TCOD_CHAR_SUBP_N = 228,
    TCOD_CHAR_SUBP_SE = 229,
    TCOD_CHAR_SUBP_DIAG = 230,
    TCOD_CHAR_SUBP_E = 231,
    TCOD_CHAR_SUBP_SW = 232,
    TCOD_CHAR_SMILIE = 1,
    TCOD_CHAR_SMILIE_INV = 2,
    TCOD_CHAR_HEART = 3,
    TCOD_CHAR_DIAMOND = 4,
    TCOD_CHAR_CLUB = 5,
    TCOD_CHAR_SPADE = 6,
    TCOD_CHAR_BULLET = 7,
    TCOD_CHAR_BULLET_INV = 8,
    TCOD_CHAR_MALE = 11,
    TCOD_CHAR_FEMALE = 12,
    TCOD_CHAR_NOTE = 13,
    TCOD_CHAR_NOTE_DOUBLE = 14,
    TCOD_CHAR_LIGHT = 15,
    TCOD_CHAR_EXCLAM_DOUBLE = 19,
    TCOD_CHAR_PILCROW = 20,
    TCOD_CHAR_SECTION = 21,
    TCOD_CHAR_POUND = 156,
    TCOD_CHAR_MULTIPLICATION = 158,
    TCOD_CHAR_FUNCTION = 159,
    TCOD_CHAR_RESERVED = 169,
    TCOD_CHAR_HALF = 171,
    TCOD_CHAR_ONE_QUARTER = 172,
    TCOD_CHAR_COPYRIGHT = 184,
    TCOD_CHAR_CENT = 189,
    TCOD_CHAR_YEN = 190,
    TCOD_CHAR_CURRENCY = 207,
    TCOD_CHAR_THREE_QUARTERS = 243,
    TCOD_CHAR_DIVISION = 246,
    TCOD_CHAR_GRADE = 248,
    TCOD_CHAR_UMLAUT = 249,
    TCOD_CHAR_POW1 = 251,
    TCOD_CHAR_POW3 = 252,
    TCOD_CHAR_POW2 = 253,
    TCOD_CHAR_BULLET_SQUARE = 254,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_key_status_t {
    TCOD_KEY_PRESSED = 1,
    TCOD_KEY_RELEASED = 2,
}
impl TCOD_font_flags_t {
    #[doc = " Tiles are arranged in column-major order."]
    #[doc = ""]
    #[doc = "       0 3 6"]
    #[doc = "       1 4 7"]
    #[doc = "       2 5 8"]
    pub const TCOD_FONT_LAYOUT_ASCII_INCOL: TCOD_font_flags_t = TCOD_font_flags_t(1);
}
impl TCOD_font_flags_t {
    #[doc = " Tiles are arranged in row-major order."]
    #[doc = ""]
    #[doc = "       0 1 2"]
    #[doc = "       3 4 5"]
    #[doc = "       6 7 8"]
    pub const TCOD_FONT_LAYOUT_ASCII_INROW: TCOD_font_flags_t = TCOD_font_flags_t(2);
}
impl TCOD_font_flags_t {
    #[doc = " Converts all tiles into a monochrome gradient."]
    pub const TCOD_FONT_TYPE_GREYSCALE: TCOD_font_flags_t = TCOD_font_flags_t(4);
}
impl TCOD_font_flags_t {
    #[doc = " Converts all tiles into a monochrome gradient."]
    pub const TCOD_FONT_TYPE_GRAYSCALE: TCOD_font_flags_t = TCOD_font_flags_t(4);
}
impl TCOD_font_flags_t {
    #[doc = " A unique layout used by some of libtcod's fonts."]
    pub const TCOD_FONT_LAYOUT_TCOD: TCOD_font_flags_t = TCOD_font_flags_t(8);
}
impl TCOD_font_flags_t {
    #[doc = "  Decode a code page 437 tileset into Unicode code-points."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.10"]
    #[doc = "  \\endrst"]
    pub const TCOD_FONT_LAYOUT_CP437: TCOD_font_flags_t = TCOD_font_flags_t(16);
}
impl ::std::ops::BitOr<TCOD_font_flags_t> for TCOD_font_flags_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        TCOD_font_flags_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for TCOD_font_flags_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: TCOD_font_flags_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<TCOD_font_flags_t> for TCOD_font_flags_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        TCOD_font_flags_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for TCOD_font_flags_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: TCOD_font_flags_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[doc = "  These font flags can be OR'd together into a bit-field and passed to"]
#[doc = "  TCOD_console_set_custom_font"]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct TCOD_font_flags_t(pub i32);
#[repr(i32)]
#[doc = "  The available renderers."]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_renderer_t {
    #[doc = " Alias for TCOD_RENDERER_OPENGL2."]
    TCOD_RENDERER_GLSL = 0,
    #[doc = "  An OpenGL 1.1 implementation."]
    #[doc = ""]
    #[doc = "  Performs worse than TCOD_RENDERER_GLSL without many benefits."]
    TCOD_RENDERER_OPENGL = 1,
    #[doc = "  A software based renderer."]
    #[doc = ""]
    #[doc = "  The font file is loaded into RAM instead of VRAM in this implementation."]
    TCOD_RENDERER_SDL = 2,
    #[doc = "  A new SDL2 renderer.  Allows the window to be resized."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.8"]
    #[doc = "  \\endrst"]
    TCOD_RENDERER_SDL2 = 3,
    #[doc = "  A new OpenGL 2.0 core renderer.  Allows the window to be resized."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.9"]
    #[doc = ""]
    #[doc = "  .. versionchanged:: 1.11.0"]
    #[doc = "      This renderer now uses OpenGL 2.0 instead of 2.1."]
    #[doc = "  \\endrst"]
    TCOD_RENDERER_OPENGL2 = 4,
    #[doc = "  A new OpenGL 2.0 core renderer.  Allows the window to be resized."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.9"]
    #[doc = ""]
    #[doc = "  .. versionchanged:: 1.11.0"]
    #[doc = "      This renderer now uses OpenGL 2.0 instead of 2.1."]
    #[doc = "  \\endrst"]
    TCOD_NB_RENDERERS = 5,
}
extern "C" {
    #[doc = "  Draw a rectangle onto a console."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The starting region, the left-most position being 0."]
    #[doc = "  \\param y The starting region, the top-most position being 0."]
    #[doc = "  \\param rw The width of the rectangle."]
    #[doc = "  \\param rh The height of the rectangle."]
    #[doc = "  \\param clear If true the drawing region will be filled with spaces."]
    #[doc = "  \\param flag The blending flag to use."]
    pub fn TCOD_console_rect(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        clear: bool,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    #[doc = "  Draw a horizontal line using the default colors."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The starting X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The starting Y coordinate, the top-most position being 0."]
    #[doc = "  \\param l The width of the line."]
    #[doc = "  \\param flag The blending flag."]
    #[doc = ""]
    #[doc = "  This function makes assumptions about the fonts character encoding."]
    #[doc = "  It will fail if the font encoding is not `cp437`."]
    pub fn TCOD_console_hline(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    #[doc = "  Draw a vertical line using the default colors."]
    #[doc = ""]
    #[doc = "  \\param con A console pointer."]
    #[doc = "  \\param x The starting X coordinate, the left-most position being 0."]
    #[doc = "  \\param y The starting Y coordinate, the top-most position being 0."]
    #[doc = "  \\param l The height of the line."]
    #[doc = "  \\param flag The blending flag."]
    #[doc = ""]
    #[doc = "  This function makes assumptions about the fonts character encoding."]
    #[doc = "  It will fail if the font encoding is not `cp437`."]
    pub fn TCOD_console_vline(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    #[doc = "  Place a single tile on a `console` at `x`,`y`."]
    #[doc = ""]
    #[doc = "  If `ch` is 0 then the character code will not be updated."]
    #[doc = ""]
    #[doc = "  If `fg`,`bg` is NULL then their respective colors will not be updated."]
    pub fn TCOD_console_put_rgb(
        console: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        ch: ::std::os::raw::c_int,
        fg: *const TCOD_color_t,
        bg: *const TCOD_color_t,
        flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    #[doc = "  Draw a rectangle on a `console` with a shape of `x`,`y`,`width`,`height`."]
    #[doc = ""]
    #[doc = "  If `ch` is 0 then the character code will not be updated."]
    #[doc = ""]
    #[doc = "  If `fg`,`bg` is NULL then their respective colors will not be updated."]
    pub fn TCOD_console_draw_rect_rgb(
        console: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        ch: ::std::os::raw::c_int,
        fg: *const TCOD_color_t,
        bg: *const TCOD_color_t,
        flag: TCOD_bkgnd_flag_t,
    );
}
#[doc = "Viewport options for the rendering context."]
#[doc = "\\rst"]
#[doc = ".. versionadded:: 1.16"]
#[doc = "\\endrst"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_ViewportOptions {
    #[doc = "If true then the aspect ratio will be kept square when the console is"]
    #[doc = "scaled.  The view will be letter-boxed."]
    #[doc = ""]
    #[doc = "If false the console will be stretched to fill the screen."]
    #[doc = ""]
    #[doc = "Set this is true if your tileset is deigned for square pixels."]
    pub keep_aspect: bool,
    #[doc = "If true then console scaling will be fixed to integer increments."]
    #[doc = ""]
    #[doc = "Has no effect if the console must be scaled down."]
    pub integer_scaling: bool,
    #[doc = "Not used."]
    pub reserved_: bool,
    #[doc = "The color to clear the screen with before rendering the console."]
    pub clear_color: TCOD_ColorRGBA,
    #[doc = "Alignment of the console when it is letter-boxed: 0.0f renders the"]
    #[doc = "console in the upper-left corner, and 1.0f in the lower-right."]
    #[doc = ""]
    #[doc = "Values of 0.5f will center the console."]
    #[doc = "Values outside of the range 0.0f to 1.0f are clamped."]
    pub align_x: f32,
    pub align_y: f32,
}
#[test]
fn bindgen_test_layout_TCOD_ViewportOptions() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_ViewportOptions>(),
        16usize,
        concat!("Size of: ", stringify!(TCOD_ViewportOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_ViewportOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_ViewportOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_ViewportOptions>())).keep_aspect as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ViewportOptions),
            "::",
            stringify!(keep_aspect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_ViewportOptions>())).integer_scaling as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ViewportOptions),
            "::",
            stringify!(integer_scaling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ViewportOptions>())).reserved_ as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ViewportOptions),
            "::",
            stringify!(reserved_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_ViewportOptions>())).clear_color as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ViewportOptions),
            "::",
            stringify!(clear_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ViewportOptions>())).align_x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ViewportOptions),
            "::",
            stringify!(align_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ViewportOptions>())).align_y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ViewportOptions),
            "::",
            stringify!(align_y)
        )
    );
}
extern "C" {
    pub static TCOD_VIEWPORT_DEFAULT_: TCOD_ViewportOptions;
}
extern "C" {
    #[doc = "Allocate a new viewport options struct."]
    #[doc = ""]
    #[doc = "You should not allocate this struct manually since the size of it may change"]
    #[doc = "between versions."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_viewport_new() -> *mut TCOD_ViewportOptions;
}
extern "C" {
    #[doc = "Delete a viewport."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_viewport_delete(viewport: *mut TCOD_ViewportOptions);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Window {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Renderer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Rect {
    _unused: [u8; 0],
}
#[doc = "  A rendering context for libtcod."]
#[doc = "  \\rst"]
#[doc = "  .. versionadded:: 1.16"]
#[doc = "  \\endrst"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Context {
    pub type_: ::std::os::raw::c_int,
    pub contextdata: *mut ::std::os::raw::c_void,
    pub destructor_: ::std::option::Option<unsafe extern "C" fn(self_: *mut TCOD_Context)>,
    pub present_: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut TCOD_Context,
            console: *const TCOD_Console,
            viewport: *const TCOD_ViewportOptions,
        ) -> TCOD_Error,
    >,
    pub pixel_to_tile_: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut TCOD_Context, x: *mut f64, y: *mut f64),
    >,
    pub save_screenshot_: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut TCOD_Context,
            filename: *const ::std::os::raw::c_char,
        ) -> TCOD_Error,
    >,
    pub get_sdl_window_:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TCOD_Context) -> *mut SDL_Window>,
    pub get_sdl_renderer_:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TCOD_Context) -> *mut SDL_Renderer>,
    pub accumulate_: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut TCOD_Context,
            console: *const TCOD_Console,
            viewport: *const TCOD_ViewportOptions,
        ) -> TCOD_Error,
    >,
    #[doc = "Change the tileset used by this context."]
    pub set_tileset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut TCOD_Context, tileset: *mut TCOD_Tileset) -> TCOD_Error,
    >,
    #[doc = "Output the recommended console size to `columns` and `rows`."]
    pub cb_recommended_console_size_: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut TCOD_Context,
            columns: *mut ::std::os::raw::c_int,
            rows: *mut ::std::os::raw::c_int,
        ) -> TCOD_Error,
    >,
}
#[test]
fn bindgen_test_layout_TCOD_Context() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Context>(),
        44usize,
        concat!("Size of: ", stringify!(TCOD_Context))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Context>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).contextdata as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(contextdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).destructor_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(destructor_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).present_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(present_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).pixel_to_tile_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(pixel_to_tile_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).save_screenshot_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(save_screenshot_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).get_sdl_window_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(get_sdl_window_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).get_sdl_renderer_ as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(get_sdl_renderer_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).accumulate_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(accumulate_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Context>())).set_tileset as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(set_tileset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_Context>())).cb_recommended_console_size_ as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Context),
            "::",
            stringify!(cb_recommended_console_size_)
        )
    );
}
impl Default for TCOD_Context {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[doc = "  Delete a rendering context."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.16"]
    #[doc = "  \\endrst"]
    pub fn TCOD_context_delete(renderer: *mut TCOD_Context);
}
extern "C" {
    #[doc = "  Create an uninitialized rendering context."]
    #[doc = ""]
    #[doc = "  Used internally."]
    pub fn TCOD_context_new_() -> *mut TCOD_Context;
}
extern "C" {
    #[doc = "Present a console to the screen, using a rendering context."]
    #[doc = ""]
    #[doc = "`console` is the console to present, the console can be any size."]
    #[doc = ""]
    #[doc = "`viewport` is the optional viewport options to use."]
    #[doc = "This will affect the scaling of the console with the current context."]
    #[doc = "This can be NULL to use the default options, which are to stretch the"]
    #[doc = "console to fit the screen."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_present(
        context: *mut TCOD_Context,
        console: *const TCOD_Console,
        viewport: *const TCOD_ViewportOptions,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Convert the screen coordinates to tile coordinates for this context."]
    #[doc = ""]
    #[doc = "`x` and `y` are the pointers to the screen coordinates, these will be"]
    #[doc = "converted to tile coordinates after the call to this function."]
    #[doc = ""]
    #[doc = "The parameters given to the last call to `TCOD_context_present` will"]
    #[doc = "determine where the tiles are for this call."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_screen_pixel_to_tile_d(
        context: *mut TCOD_Context,
        x: *mut f64,
        y: *mut f64,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Convert the screen coordinates to integer tile coordinates for this context."]
    #[doc = ""]
    #[doc = "Save as `TCOD_context_screen_pixel_to_tile` but the inputs and results are"]
    #[doc = "integers.  This is useful if you don't need sub-tile coordinates."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_screen_pixel_to_tile_i(
        context: *mut TCOD_Context,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Save the last presented console to a PNG file."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_save_screenshot(
        context: *mut TCOD_Context,
        filename: *const ::std::os::raw::c_char,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Return a pointer the SDL_Window for this context if it uses one."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_get_sdl_window(context: *mut TCOD_Context) -> *mut SDL_Window;
}
extern "C" {
    #[doc = "Return a pointer the SDL_Renderer for this context if it uses one."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_get_sdl_renderer(context: *mut TCOD_Context) -> *mut SDL_Renderer;
}
extern "C" {
    #[doc = "Change the active tileset for this context."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_change_tileset(
        self_: *mut TCOD_Context,
        tileset: *mut TCOD_Tileset,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Return the `TCOD_renderer_t` renderer type for this context."]
    #[doc = ""]
    #[doc = "Returns a negative number on error, such as `context` being NULL."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_get_renderer_type(context: *mut TCOD_Context) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "Set `columns` and `rows` to the recommended console size for this context."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_recommended_console_size(
        context: *mut TCOD_Context,
        columns: *mut ::std::os::raw::c_int,
        rows: *mut ::std::os::raw::c_int,
    ) -> TCOD_Error;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_mipmap_ {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub fwidth: f32,
    pub fheight: f32,
    pub buf: *mut TCOD_ColorRGB,
    pub dirty: bool,
}
#[test]
fn bindgen_test_layout_TCOD_mipmap_() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_mipmap_>(),
        24usize,
        concat!("Size of: ", stringify!(TCOD_mipmap_))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_mipmap_>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_mipmap_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mipmap_>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mipmap_),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mipmap_>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mipmap_),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mipmap_>())).fwidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mipmap_),
            "::",
            stringify!(fwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mipmap_>())).fheight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mipmap_),
            "::",
            stringify!(fheight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mipmap_>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mipmap_),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mipmap_>())).dirty as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mipmap_),
            "::",
            stringify!(dirty)
        )
    );
}
impl Default for TCOD_mipmap_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Image {
    pub nb_mipmaps: ::std::os::raw::c_int,
    pub mipmaps: *mut TCOD_mipmap_,
    pub key_color: TCOD_ColorRGB,
    pub has_key_color: bool,
}
#[test]
fn bindgen_test_layout_TCOD_Image() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Image>(),
        12usize,
        concat!("Size of: ", stringify!(TCOD_Image))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Image>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Image))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Image>())).nb_mipmaps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Image),
            "::",
            stringify!(nb_mipmaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Image>())).mipmaps as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Image),
            "::",
            stringify!(mipmaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Image>())).key_color as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Image),
            "::",
            stringify!(key_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Image>())).has_key_color as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Image),
            "::",
            stringify!(has_key_color)
        )
    );
}
impl Default for TCOD_Image {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_image_t = *mut TCOD_Image;
extern "C" {
    pub fn TCOD_image_new(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut TCOD_Image;
}
extern "C" {
    #[doc = "  Return a new image rendered from a console."]
    #[doc = ""]
    #[doc = "  This effectively returns a screenshot of the console."]
    pub fn TCOD_image_from_console(console: *const TCOD_Console) -> *mut TCOD_Image;
}
extern "C" {
    #[doc = "  Same as TCOD_image_from_console, but with an existing image."]
    pub fn TCOD_image_refresh_console(image: *mut TCOD_Image, console: *const TCOD_Console);
}
extern "C" {
    pub fn TCOD_image_load(filename: *const ::std::os::raw::c_char) -> *mut TCOD_Image;
}
extern "C" {
    pub fn TCOD_image_clear(image: *mut TCOD_Image, color: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_invert(image: *mut TCOD_Image);
}
extern "C" {
    pub fn TCOD_image_hflip(image: *mut TCOD_Image);
}
extern "C" {
    pub fn TCOD_image_rotate90(image: *mut TCOD_Image, numRotations: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_image_vflip(image: *mut TCOD_Image);
}
extern "C" {
    pub fn TCOD_image_scale(
        image: *mut TCOD_Image,
        neww: ::std::os::raw::c_int,
        newh: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_image_save(image: *const TCOD_Image, filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_image_get_size(
        image: *const TCOD_Image,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_image_get_pixel(
        image: *const TCOD_Image,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_image_get_alpha(
        image: *const TCOD_Image,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  Return a mipmapped pixel of image."]
    #[doc = ""]
    #[doc = "  Mipmaps are updated when you call this, so it can't be called from multiple"]
    #[doc = "  threads."]
    pub fn TCOD_image_get_mipmap_pixel(
        image: *mut TCOD_Image,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
    ) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_image_put_pixel(
        image: *mut TCOD_Image,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        col: TCOD_color_t,
    );
}
extern "C" {
    pub fn TCOD_image_blit(
        image: *mut TCOD_Image,
        console: TCOD_console_t,
        x: f32,
        y: f32,
        bkgnd_flag: TCOD_bkgnd_flag_t,
        scalex: f32,
        scaley: f32,
        angle: f32,
    );
}
extern "C" {
    pub fn TCOD_image_blit_rect(
        image: *mut TCOD_Image,
        console: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        bkgnd_flag: TCOD_bkgnd_flag_t,
    );
}
extern "C" {
    pub fn TCOD_image_blit_2x(
        image: *const TCOD_Image,
        dest: TCOD_console_t,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        sx: ::std::os::raw::c_int,
        sy: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_image_delete(image: *mut TCOD_Image);
}
extern "C" {
    pub fn TCOD_image_set_key_color(image: *mut TCOD_Image, key_color: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_is_pixel_transparent(
        image: *const TCOD_Image,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_List {
    _unused: [u8; 0],
}
pub type TCOD_list_t = *mut TCOD_List;
extern "C" {
    pub fn TCOD_list_new() -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_allocate(nb_elements: ::std::os::raw::c_int) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_duplicate(l: TCOD_list_t) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_delete(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_push(l: TCOD_list_t, elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_pop(l: TCOD_list_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_peek(l: TCOD_list_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_add_all(l: TCOD_list_t, l2: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_get(l: TCOD_list_t, idx: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_set(
        l: TCOD_list_t,
        elt: *const ::std::os::raw::c_void,
        idx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_list_begin(l: TCOD_list_t) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_end(l: TCOD_list_t) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_reverse(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_remove_iterator(
        l: TCOD_list_t,
        elt: *mut *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_remove(l: TCOD_list_t, elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_remove_iterator_fast(
        l: TCOD_list_t,
        elt: *mut *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_remove_fast(l: TCOD_list_t, elt: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_list_contains(l: TCOD_list_t, elt: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn TCOD_list_clear(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_clear_and_delete(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_size(l: TCOD_list_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_list_insert_before(
        l: TCOD_list_t,
        elt: *const ::std::os::raw::c_void,
        before: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_list_is_empty(l: TCOD_list_t) -> bool;
}
extern "C" {
    pub fn TCOD_console_set_custom_font(
        fontFile: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        nb_char_horiz: ::std::os::raw::c_int,
        nb_char_vertic: ::std::os::raw::c_int,
    ) -> TCOD_Error;
}
extern "C" {
    pub fn TCOD_console_map_ascii_code_to_font(
        asciiCode: ::std::os::raw::c_int,
        fontCharX: ::std::os::raw::c_int,
        fontCharY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_map_ascii_codes_to_font(
        asciiCode: ::std::os::raw::c_int,
        nbCodes: ::std::os::raw::c_int,
        fontCharX: ::std::os::raw::c_int,
        fontCharY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_map_string_to_font(
        s: *const ::std::os::raw::c_char,
        fontCharX: ::std::os::raw::c_int,
        fontCharY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_map_string_to_font_utf(
        s: *const wchar_t,
        fontCharX: ::std::os::raw::c_int,
        fontCharY: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_set_dirty(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "Render and present a console with optional viewport options."]
    #[doc = ""]
    #[doc = "`console` is the console to render."]
    #[doc = ""]
    #[doc = "`viewport` is optional."]
    #[doc = ""]
    #[doc = "Returns a negative values on error.  See `TCOD_get_error`."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_console_flush_ex(
        console: *mut TCOD_Console,
        viewport: *mut TCOD_ViewportOptions,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "  Render and present the root console to the active display."]
    pub fn TCOD_console_flush() -> TCOD_Error;
}
extern "C" {
    pub fn TCOD_console_check_for_keypress(flags: ::std::os::raw::c_int) -> TCOD_key_t;
}
extern "C" {
    pub fn TCOD_console_wait_for_keypress(flush: bool) -> TCOD_key_t;
}
extern "C" {
    pub fn TCOD_console_is_key_pressed(key: TCOD_keycode_t) -> bool;
}
extern "C" {
    pub fn TCOD_console_from_file(filename: *const ::std::os::raw::c_char) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_load_asc(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_load_apf(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_asc(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_apf(
        con: TCOD_console_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_credits();
}
extern "C" {
    pub fn TCOD_console_credits_reset();
}
extern "C" {
    pub fn TCOD_console_credits_render(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        alpha: bool,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_set_keyboard_repeat(
        initial_delay: ::std::os::raw::c_int,
        interval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_console_disable_keyboard_repeat();
}
extern "C" {
    #[doc = "  \\brief Initialize the libtcod graphical engine."]
    #[doc = ""]
    #[doc = "  \\param w The width in tiles."]
    #[doc = "  \\param h The height in tiles."]
    #[doc = "  \\param title The title for the window."]
    #[doc = "  \\param fullscreen Fullscreen option."]
    #[doc = "  \\param renderer Which renderer to use when rendering the console."]
    #[doc = ""]
    #[doc = "  You may want to call TCOD_console_set_custom_font BEFORE calling this"]
    #[doc = "  function.  By default this function loads libtcod's `terminal.png` image"]
    #[doc = "  from the working directory."]
    #[doc = ""]
    #[doc = "  Afterwards TCOD_quit must be called before the program exits."]
    #[doc = ""]
    #[doc = "  Returns 0 on success, or -1 on an error, you can check the error with"]
    #[doc = "  TCOD_sys_get_error()"]
    #[doc = ""]
    #[doc = "  `renderer` and vsync settings can be overridden by the `TCOD_RENDERER` or"]
    #[doc = "  `TCOD_VSYNC` environment variables."]
    #[doc = ""]
    #[doc = "  Valid case-sensitive options for `TCOD_RENDERER` are:"]
    #[doc = "  - sdl"]
    #[doc = "  - opengl"]
    #[doc = "  - glsl"]
    #[doc = "  - sdl2"]
    #[doc = "  - opengl2"]
    #[doc = ""]
    #[doc = "  Valid options for `TCOD_VSYNC` are `0` or `1`."]
    #[doc = ""]
    #[doc = "  \\rst"]
    #[doc = "  .. versionchanged:: 1.12"]
    #[doc = "      Now returns -1 on error instead of crashing."]
    #[doc = ""]
    #[doc = "  .. versionchanged:: 1.13"]
    #[doc = "      Added the `TCOD_RENDERER` and `TCOD_VSYNC` overrides."]
    #[doc = "  \\endrst"]
    pub fn TCOD_console_init_root(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        fullscreen: bool,
        renderer: TCOD_renderer_t,
    ) -> TCOD_Error;
}
extern "C" {
    pub fn TCOD_console_init_root_(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        fullscreen: bool,
        renderer: TCOD_renderer_t,
        vsync: bool,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "  Shutdown libtcod.  This must be called before your program exits."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.8"]
    #[doc = "  \\endrst"]
    pub fn TCOD_quit();
}
extern "C" {
    #[doc = "  Change the title string of the active window."]
    #[doc = ""]
    #[doc = "  \\param title A utf8 string."]
    pub fn TCOD_console_set_window_title(title: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = "  Set the display to be full-screen or windowed."]
    #[doc = ""]
    #[doc = "  \\param fullscreen If true the display will go full-screen."]
    pub fn TCOD_console_set_fullscreen(fullscreen: bool);
}
extern "C" {
    #[doc = "  Return true if the display is full-screen."]
    pub fn TCOD_console_is_fullscreen() -> bool;
}
extern "C" {
    #[doc = "  Return true if the window has mouse focus."]
    pub fn TCOD_console_has_mouse_focus() -> bool;
}
extern "C" {
    #[doc = "  Return true if the window has keyboard focus."]
    #[doc = ""]
    #[doc = "  \\verbatim embed:rst:leading-asterisk"]
    #[doc = "  .. versionchanged: 1.7"]
    #[doc = "      This function was previously broken.  It now keeps track of keyboard"]
    #[doc = "      focus."]
    #[doc = "  \\endverbatim"]
    pub fn TCOD_console_is_active() -> bool;
}
extern "C" {
    #[doc = "  Return true if the window is closing."]
    pub fn TCOD_console_is_window_closed() -> bool;
}
extern "C" {
    #[doc = "  Return an SDL_Window pointer if one is in use, returns NULL otherwise."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.11"]
    #[doc = "  \\endrst"]
    pub fn TCOD_sys_get_sdl_window() -> *mut SDL_Window;
}
extern "C" {
    #[doc = "  Return an SDL_Renderer pointer if one is in use, returns NULL otherwise."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.11"]
    #[doc = "  \\endrst"]
    pub fn TCOD_sys_get_sdl_renderer() -> *mut SDL_Renderer;
}
extern "C" {
    #[doc = "  Render a console over the display."]
    #[doc = "  \\rst"]
    #[doc = "  `console` can be any size, the active render will try to scale it to fit"]
    #[doc = "  the screen."]
    #[doc = ""]
    #[doc = "  The function will only work for the SDL2/OPENGL2 renderers."]
    #[doc = ""]
    #[doc = "  Unlike :any:`TCOD_console_flush` this will not present the display."]
    #[doc = "  You will need to do that manually, likely with the SDL API."]
    #[doc = ""]
    #[doc = "  Returns 0 on success, or a negative number on a failure such as the"]
    #[doc = "  incorrect renderer being active."]
    #[doc = ""]
    #[doc = "  .. versionadded:: 1.11"]
    #[doc = ""]
    #[doc = "  .. seealso::"]
    #[doc = "      :any:`TCOD_sys_get_sdl_window` :any:`TCOD_sys_get_sdl_renderer`"]
    #[doc = "  \\endrst"]
    pub fn TCOD_sys_accumulate_console(console: *const TCOD_Console) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_sys_accumulate_console_(
        console: *const TCOD_Console,
        viewport: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_print_ex(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_print_rect(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print_rect_ex(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print_frame(
        con: TCOD_console_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        empty: bool,
        flag: TCOD_bkgnd_flag_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_get_height_rect(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print_utf(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fmt: *const wchar_t,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_print_ex_utf(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const wchar_t,
        ...
    );
}
extern "C" {
    pub fn TCOD_console_print_rect_utf(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_print_rect_ex_utf(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect_utf(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
impl TCOD_colctrl_t {
    pub const TCOD_COLCTRL_NUMBER: TCOD_colctrl_t = TCOD_colctrl_t::TCOD_COLCTRL_5;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_colctrl_t {
    TCOD_COLCTRL_1 = 1,
    TCOD_COLCTRL_2 = 2,
    TCOD_COLCTRL_3 = 3,
    TCOD_COLCTRL_4 = 4,
    TCOD_COLCTRL_5 = 5,
    TCOD_COLCTRL_FORE_RGB = 6,
    TCOD_COLCTRL_BACK_RGB = 7,
    TCOD_COLCTRL_STOP = 8,
}
extern "C" {
    pub fn TCOD_console_set_color_control(
        con: TCOD_colctrl_t,
        fore: TCOD_color_t,
        back: TCOD_color_t,
    );
}
extern "C" {
    #[doc = "Format and print a UTF-8 string to a console."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.8"]
    #[doc = ""]
    #[doc = ".. versionchanged:: 1.16"]
    #[doc = "Now returns a negative error code on failure."]
    #[doc = "\\endrst"]
    pub fn TCOD_console_printf(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Format and print a UTF-8 string to a console."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.8"]
    #[doc = ""]
    #[doc = ".. versionchanged:: 1.16"]
    #[doc = "Now returns a negative error code on failure."]
    #[doc = "\\endrst"]
    pub fn TCOD_console_printf_ex(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Format and print a UTF-8 string to a console."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.8"]
    #[doc = ""]
    #[doc = ".. versionchanged:: 1.16"]
    #[doc = "Now returns a negative error code on failure."]
    #[doc = "\\endrst"]
    pub fn TCOD_console_printf_rect(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "Format and print a UTF-8 string to a console."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.8"]
    #[doc = ""]
    #[doc = ".. versionchanged:: 1.16"]
    #[doc = "Now returns a negative error code on failure."]
    #[doc = "\\endrst"]
    pub fn TCOD_console_printf_rect_ex(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "Print a framed and optionally titled region to a console, using default"]
    #[doc = "colors and alignment."]
    #[doc = ""]
    #[doc = "This function uses Unicode box-drawing characters and a UTF-8 formatted"]
    #[doc = "string."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.8"]
    #[doc = ""]
    #[doc = ".. versionchanged:: 1.16"]
    #[doc = "Now returns a negative error code on failure."]
    #[doc = "\\endrst"]
    pub fn TCOD_console_printf_frame(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        empty: ::std::os::raw::c_int,
        flag: TCOD_bkgnd_flag_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Return the number of lines that would be printed by this formatted string."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.8"]
    #[doc = ""]
    #[doc = ".. versionchanged:: 1.16"]
    #[doc = "Now returns a negative error code on failure."]
    #[doc = "\\endrst"]
    pub fn TCOD_console_get_height_rect_fmt(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_printn(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        str: *const ::std::os::raw::c_char,
        fg: *const TCOD_color_t,
        bg: *const TCOD_color_t,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
    ) -> TCOD_Error;
}
extern "C" {
    pub fn TCOD_console_printn_rect(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        str: *const ::std::os::raw::c_char,
        fg: *const TCOD_color_t,
        bg: *const TCOD_color_t,
        flag: TCOD_bkgnd_flag_t,
        alignment: TCOD_alignment_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect_n(
        console: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect_wn(
        width: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_console_printn_frame(
        con: *mut TCOD_Console,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        fg: *const TCOD_color_t,
        bg: *const TCOD_color_t,
        flag: TCOD_bkgnd_flag_t,
        empty: bool,
    ) -> TCOD_Error;
}
extern "C" {
    pub fn TCOD_console_from_xp(filename: *const ::std::os::raw::c_char) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_load_xp(
        con: *mut TCOD_Console,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_xp(
        con: *const TCOD_Console,
        filename: *const ::std::os::raw::c_char,
        compress_level: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_console_list_from_xp(filename: *const ::std::os::raw::c_char) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_console_list_save_xp(
        console_list: TCOD_list_t,
        filename: *const ::std::os::raw::c_char,
        compress_level: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[doc = "Create a new context with the given console size."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "Same as `TCOD_context_new_window`, but the following parameters have"]
    #[doc = "different effects:"]
    #[doc = ""]
    #[doc = "`columns` and `rows` is the desired size of the terminal window."]
    #[doc = "The actual size of the window will be derived from this and the given"]
    #[doc = "`tileset`."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_new_terminal(
        columns: ::std::os::raw::c_int,
        rows: ::std::os::raw::c_int,
        renderer_type: ::std::os::raw::c_int,
        tileset: *mut TCOD_Tileset,
        vsync: bool,
        sdl_window_flags: ::std::os::raw::c_int,
        window_title: *const ::std::os::raw::c_char,
        out: *mut *mut TCOD_Context,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Create a new context with a window of the given size."]
    #[doc = ""]
    #[doc = "Same as `TCOD_context_new_terminal`, but the following parameters have"]
    #[doc = "different effects:"]
    #[doc = ""]
    #[doc = "`pixel_width` and `pixel_height` are the desired size of the window in"]
    #[doc = "pixels."]
    #[doc = ""]
    #[doc = "`renderer_type` is a `TCOD_renderer_t` type."]
    #[doc = ""]
    #[doc = "`tileset` is an optional pointer to a tileset object."]
    #[doc = ""]
    #[doc = "If `vsync` is True, then vertical sync will be enabled whenever possible."]
    #[doc = "A value of true is recommended."]
    #[doc = ""]
    #[doc = "`sdl_window_flags` is a bitfield of SDL_WindowFlags flags."]
    #[doc = "For a window, a value of ``SDL_WINDOW_RESIZABLE`` is recommended."]
    #[doc = "For fullscreen, a value of"]
    #[doc = "``SDL_WINDOW_RESIZABLE | SDL_WINDOW_FULLSCREEN_DESKTOP`` is recommended."]
    #[doc = "You should avoid the ``SDL_WINDOW_FULLSCREEN`` flag whenever possible."]
    #[doc = ""]
    #[doc = "`window_title` is the title of the opened window."]
    #[doc = ""]
    #[doc = "`out` is the output for the `TCOD_Context`, must not be NULL."]
    #[doc = ""]
    #[doc = "Returns a negative error code on failure, `out` will unlikely be set in this"]
    #[doc = "case."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_context_new_window(
        pixel_width: ::std::os::raw::c_int,
        pixel_height: ::std::os::raw::c_int,
        renderer_type: ::std::os::raw::c_int,
        tileset: *mut TCOD_Tileset,
        vsync: bool,
        sdl_window_flags: ::std::os::raw::c_int,
        window_title: *const ::std::os::raw::c_char,
        out: *mut *mut TCOD_Context,
    ) -> TCOD_Error;
}
#[doc = "  Private map cell struct."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_MapCell {
    pub transparent: bool,
    pub walkable: bool,
    pub fov: bool,
}
#[test]
fn bindgen_test_layout_TCOD_MapCell() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_MapCell>(),
        3usize,
        concat!("Size of: ", stringify!(TCOD_MapCell))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_MapCell>(),
        1usize,
        concat!("Alignment of ", stringify!(TCOD_MapCell))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_MapCell>())).transparent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_MapCell),
            "::",
            stringify!(transparent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_MapCell>())).walkable as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_MapCell),
            "::",
            stringify!(walkable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_MapCell>())).fov as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_MapCell),
            "::",
            stringify!(fov)
        )
    );
}
#[doc = "  Private map struct."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Map {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub nbcells: ::std::os::raw::c_int,
    pub cells: *mut TCOD_MapCell,
}
#[test]
fn bindgen_test_layout_TCOD_Map() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Map>(),
        16usize,
        concat!("Size of: ", stringify!(TCOD_Map))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Map>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Map>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Map),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Map>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Map),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Map>())).nbcells as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Map),
            "::",
            stringify!(nbcells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Map>())).cells as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Map),
            "::",
            stringify!(cells)
        )
    );
}
impl Default for TCOD_Map {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_map_t = *mut TCOD_Map;
#[repr(i32)]
#[doc = "  Field-of-view options."]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_fov_algorithm_t {
    #[doc = "  Basic: http://roguebasin.roguelikedevelopment.org/index.php?title=Ray_casting"]
    FOV_BASIC = 0,
    #[doc = "  Diamond: http://www.geocities.com/temerra/los_rays.html"]
    FOV_DIAMOND = 1,
    #[doc = " Shadow casting: http://roguebasin.roguelikedevelopment.org/index.php?title=FOV_using_recursive_shadowcasting"]
    FOV_SHADOW = 2,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_0 = 3,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_1 = 4,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_2 = 5,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_3 = 6,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_4 = 7,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_5 = 8,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_6 = 9,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_7 = 10,
    #[doc = "  Permissive: http://roguebasin.roguelikedevelopment.org/index.php?title=Precise_Permissive_Field_of_View"]
    FOV_PERMISSIVE_8 = 11,
    #[doc = "  Mingos' Restrictive Precise Angle Shadowcasting (contribution by Mingos)"]
    FOV_RESTRICTIVE = 12,
    #[doc = "  Mingos' Restrictive Precise Angle Shadowcasting (contribution by Mingos)"]
    NB_FOV_ALGORITHMS = 13,
}
extern "C" {
    pub fn TCOD_map_new(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut TCOD_Map;
}
extern "C" {
    pub fn TCOD_map_clear(map: *mut TCOD_Map, transparent: bool, walkable: bool);
}
extern "C" {
    pub fn TCOD_map_copy(source: *const TCOD_Map, dest: *mut TCOD_Map);
}
extern "C" {
    pub fn TCOD_map_set_properties(
        map: *mut TCOD_Map,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        is_transparent: bool,
        is_walkable: bool,
    );
}
extern "C" {
    pub fn TCOD_map_delete(map: *mut TCOD_Map);
}
extern "C" {
    pub fn TCOD_map_compute_fov(
        map: *mut TCOD_Map,
        player_x: ::std::os::raw::c_int,
        player_y: ::std::os::raw::c_int,
        max_radius: ::std::os::raw::c_int,
        light_walls: bool,
        algo: TCOD_fov_algorithm_t,
    );
}
extern "C" {
    pub fn TCOD_map_is_in_fov(
        map: *const TCOD_Map,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_map_set_in_fov(
        map: *mut TCOD_Map,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        fov: bool,
    );
}
extern "C" {
    pub fn TCOD_map_is_transparent(
        map: *const TCOD_Map,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_map_is_walkable(
        map: *mut TCOD_Map,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_map_get_width(map: *const TCOD_Map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_map_get_height(map: *const TCOD_Map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_map_get_nb_cells(map: *const TCOD_Map) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "Return the default tileset, may be NULL."]
    #[doc = ""]
    #[doc = "A non-NULL return value is a new reference to the global tileset."]
    #[doc = "When you are done you will need to call `TCOD_tileset_delete` on this"]
    #[doc = "pointer."]
    #[doc = ""]
    #[doc = "This function is provisional, the API may change in the future."]
    pub fn TCOD_get_default_tileset() -> *mut TCOD_Tileset;
}
extern "C" {
    #[doc = "Set the default tileset and update the default display to use it."]
    #[doc = ""]
    #[doc = "This will keep alive a reference to the given tileset.  If you no longer"]
    #[doc = "need the pointer then you should call `TCOD_tileset_delete` on it after"]
    #[doc = "this function."]
    #[doc = ""]
    #[doc = "This function is provisional, the API may change in the future."]
    pub fn TCOD_set_default_tileset(tileset: *mut TCOD_Tileset);
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_noise_type_t {
    TCOD_NOISE_PERLIN = 1,
    TCOD_NOISE_SIMPLEX = 2,
    TCOD_NOISE_WAVELET = 4,
    TCOD_NOISE_DEFAULT = 0,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TCOD_Noise {
    pub ndim: ::std::os::raw::c_int,
    #[doc = " Randomized map of indexes into buffer"]
    pub map: [::std::os::raw::c_uchar; 256usize],
    #[doc = " Random 256 x ndim buffer"]
    pub buffer: [[f32; 4usize]; 256usize],
    pub H: f32,
    pub lacunarity: f32,
    pub exponent: [f32; 128usize],
    pub waveletTileData: *mut f32,
    pub rand: TCOD_random_t,
    pub noise_type: TCOD_noise_type_t,
}
#[test]
fn bindgen_test_layout_TCOD_Noise() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Noise>(),
        4888usize,
        concat!("Size of: ", stringify!(TCOD_Noise))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Noise>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Noise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).ndim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(ndim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).map as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).buffer as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).H as *const _ as usize },
        4356usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(H)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).lacunarity as *const _ as usize },
        4360usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(lacunarity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).exponent as *const _ as usize },
        4364usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).waveletTileData as *const _ as usize },
        4876usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(waveletTileData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).rand as *const _ as usize },
        4880usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Noise>())).noise_type as *const _ as usize },
        4884usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Noise),
            "::",
            stringify!(noise_type)
        )
    );
}
impl Default for TCOD_Noise {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_noise_t = *mut TCOD_Noise;
extern "C" {
    pub fn TCOD_noise_new(
        dimensions: ::std::os::raw::c_int,
        hurst: f32,
        lacunarity: f32,
        random: TCOD_random_t,
    ) -> TCOD_noise_t;
}
extern "C" {
    pub fn TCOD_noise_set_type(noise: TCOD_noise_t, type_: TCOD_noise_type_t);
}
extern "C" {
    pub fn TCOD_noise_get_ex(noise: TCOD_noise_t, f: *mut f32, type_: TCOD_noise_type_t) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_fbm_ex(
        noise: TCOD_noise_t,
        f: *mut f32,
        octaves: f32,
        type_: TCOD_noise_type_t,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_turbulence_ex(
        noise: TCOD_noise_t,
        f: *mut f32,
        octaves: f32,
        type_: TCOD_noise_type_t,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get(noise: TCOD_noise_t, f: *mut f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_fbm(noise: TCOD_noise_t, f: *mut f32, octaves: f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_turbulence(noise: TCOD_noise_t, f: *mut f32, octaves: f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_delete(noise: TCOD_noise_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_heightmap_t {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub values: *mut f32,
}
#[test]
fn bindgen_test_layout_TCOD_heightmap_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_heightmap_t>(),
        12usize,
        concat!("Size of: ", stringify!(TCOD_heightmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_heightmap_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_heightmap_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_heightmap_t>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_heightmap_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_heightmap_t>())).h as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_heightmap_t),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_heightmap_t>())).values as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_heightmap_t),
            "::",
            stringify!(values)
        )
    );
}
impl Default for TCOD_heightmap_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_heightmap_new(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut TCOD_heightmap_t;
}
extern "C" {
    pub fn TCOD_heightmap_delete(hm: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_get_value(
        hm: *const TCOD_heightmap_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_get_interpolated_value(
        hm: *const TCOD_heightmap_t,
        x: f32,
        y: f32,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_set_value(
        hm: *mut TCOD_heightmap_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        value: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_get_slope(
        hm: *const TCOD_heightmap_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_get_normal(
        hm: *const TCOD_heightmap_t,
        x: f32,
        y: f32,
        n: *mut f32,
        waterLevel: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_count_cells(
        hm: *const TCOD_heightmap_t,
        min: f32,
        max: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_heightmap_has_land_on_border(hm: *const TCOD_heightmap_t, waterLevel: f32) -> bool;
}
extern "C" {
    pub fn TCOD_heightmap_get_minmax(hm: *const TCOD_heightmap_t, min: *mut f32, max: *mut f32);
}
extern "C" {
    pub fn TCOD_heightmap_copy(hm_source: *const TCOD_heightmap_t, hm_dest: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_add(hm: *mut TCOD_heightmap_t, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_scale(hm: *mut TCOD_heightmap_t, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_clamp(hm: *mut TCOD_heightmap_t, min: f32, max: f32);
}
extern "C" {
    pub fn TCOD_heightmap_normalize(hm: *mut TCOD_heightmap_t, min: f32, max: f32);
}
extern "C" {
    pub fn TCOD_heightmap_clear(hm: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_lerp_hm(
        hm1: *const TCOD_heightmap_t,
        hm2: *const TCOD_heightmap_t,
        hmres: *mut TCOD_heightmap_t,
        coef: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_add_hm(
        hm1: *const TCOD_heightmap_t,
        hm2: *const TCOD_heightmap_t,
        hmres: *mut TCOD_heightmap_t,
    );
}
extern "C" {
    pub fn TCOD_heightmap_multiply_hm(
        hm1: *const TCOD_heightmap_t,
        hm2: *const TCOD_heightmap_t,
        hmres: *mut TCOD_heightmap_t,
    );
}
extern "C" {
    pub fn TCOD_heightmap_add_hill(
        hm: *mut TCOD_heightmap_t,
        hx: f32,
        hy: f32,
        hradius: f32,
        hheight: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_dig_hill(
        hm: *mut TCOD_heightmap_t,
        hx: f32,
        hy: f32,
        hradius: f32,
        hheight: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_dig_bezier(
        hm: *mut TCOD_heightmap_t,
        px: *mut ::std::os::raw::c_int,
        py: *mut ::std::os::raw::c_int,
        startRadius: f32,
        startDepth: f32,
        endRadius: f32,
        endDepth: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_rain_erosion(
        hm: *mut TCOD_heightmap_t,
        nbDrops: ::std::os::raw::c_int,
        erosionCoef: f32,
        sedimentationCoef: f32,
        rnd: TCOD_random_t,
    );
}
extern "C" {
    pub fn TCOD_heightmap_kernel_transform(
        hm: *mut TCOD_heightmap_t,
        kernelsize: ::std::os::raw::c_int,
        dx: *const ::std::os::raw::c_int,
        dy: *const ::std::os::raw::c_int,
        weight: *const f32,
        minLevel: f32,
        maxLevel: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_add_voronoi(
        hm: *mut TCOD_heightmap_t,
        nbPoints: ::std::os::raw::c_int,
        nbCoef: ::std::os::raw::c_int,
        coef: *const f32,
        rnd: TCOD_random_t,
    );
}
extern "C" {
    pub fn TCOD_heightmap_mid_point_displacement(
        hm: *mut TCOD_heightmap_t,
        rnd: TCOD_random_t,
        roughness: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_add_fbm(
        hm: *mut TCOD_heightmap_t,
        noise: TCOD_noise_t,
        mulx: f32,
        muly: f32,
        addx: f32,
        addy: f32,
        octaves: f32,
        delta: f32,
        scale: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_scale_fbm(
        hm: *mut TCOD_heightmap_t,
        noise: TCOD_noise_t,
        mulx: f32,
        muly: f32,
        addx: f32,
        addy: f32,
        octaves: f32,
        delta: f32,
        scale: f32,
    );
}
extern "C" {
    pub fn TCOD_heightmap_islandify(hm: *mut TCOD_heightmap_t, seaLevel: f32, rnd: TCOD_random_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TCOD_lex_t {
    pub file_line: ::std::os::raw::c_int,
    pub token_type: ::std::os::raw::c_int,
    pub token_int_val: ::std::os::raw::c_int,
    pub token_idx: ::std::os::raw::c_int,
    pub token_float_val: f32,
    pub tok: *mut ::std::os::raw::c_char,
    pub toklen: ::std::os::raw::c_int,
    pub lastStringDelim: ::std::os::raw::c_char,
    pub pos: *mut ::std::os::raw::c_char,
    pub buf: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub last_javadoc_comment: *mut ::std::os::raw::c_char,
    pub nb_symbols: ::std::os::raw::c_int,
    pub nb_keywords: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub symbols: [[::std::os::raw::c_char; 5usize]; 100usize],
    pub keywords: [[::std::os::raw::c_char; 20usize]; 100usize],
    pub simpleCmt: *const ::std::os::raw::c_char,
    pub cmtStart: *const ::std::os::raw::c_char,
    pub cmtStop: *const ::std::os::raw::c_char,
    pub javadocCmtStart: *const ::std::os::raw::c_char,
    pub stringDelim: *const ::std::os::raw::c_char,
    pub javadoc_read: bool,
    pub allocBuf: bool,
    pub savept: bool,
}
#[test]
fn bindgen_test_layout_TCOD_lex_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_lex_t>(),
        2584usize,
        concat!("Size of: ", stringify!(TCOD_lex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_lex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_lex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).file_line as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(file_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).token_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(token_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).token_int_val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(token_int_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).token_idx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(token_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).token_float_val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(token_float_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).tok as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(tok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).toklen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(toklen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).lastStringDelim as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(lastStringDelim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).pos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).buf as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).filename as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).last_javadoc_comment as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(last_javadoc_comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).nb_symbols as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(nb_symbols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).nb_keywords as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(nb_keywords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).symbols as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(symbols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).keywords as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(keywords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).simpleCmt as *const _ as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(simpleCmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).cmtStart as *const _ as usize },
        2564usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(cmtStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).cmtStop as *const _ as usize },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(cmtStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).javadocCmtStart as *const _ as usize },
        2572usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(javadocCmtStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).stringDelim as *const _ as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(stringDelim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).javadoc_read as *const _ as usize },
        2580usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(javadoc_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).allocBuf as *const _ as usize },
        2581usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(allocBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_lex_t>())).savept as *const _ as usize },
        2582usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_lex_t),
            "::",
            stringify!(savept)
        )
    );
}
impl Default for TCOD_lex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_lex_new_intern() -> *mut TCOD_lex_t;
}
extern "C" {
    pub fn TCOD_lex_new(
        symbols: *mut *const ::std::os::raw::c_char,
        keywords: *mut *const ::std::os::raw::c_char,
        simpleComment: *const ::std::os::raw::c_char,
        commentStart: *const ::std::os::raw::c_char,
        commentStop: *const ::std::os::raw::c_char,
        javadocCommentStart: *const ::std::os::raw::c_char,
        stringDelim: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut TCOD_lex_t;
}
extern "C" {
    pub fn TCOD_lex_delete(lex: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_set_data_buffer(lex: *mut TCOD_lex_t, dat: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_lex_set_data_file(
        lex: *mut TCOD_lex_t,
        filename: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_lex_parse(lex: *mut TCOD_lex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_parse_until_token_type(
        lex: *mut TCOD_lex_t,
        token_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_parse_until_token_value(
        lex: *mut TCOD_lex_t,
        token_value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_lex_expect_token_type(
        lex: *mut TCOD_lex_t,
        token_type: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_lex_expect_token_value(
        lex: *mut TCOD_lex_t,
        token_type: ::std::os::raw::c_int,
        token_value: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_lex_savepoint(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_restore(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_get_last_javadoc(lex: *mut TCOD_lex_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_get_token_name(
        token_type: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_get_last_error() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_lex_hextoint(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_get_instance() -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_new(algo: TCOD_random_algo_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_save(mersenne: TCOD_random_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_restore(mersenne: TCOD_random_t, backup: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_random_new_from_seed(algo: TCOD_random_algo_t, seed: u32) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_delete(mersenne: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_random_set_distribution(mersenne: TCOD_random_t, distribution: TCOD_distribution_t);
}
extern "C" {
    pub fn TCOD_random_get_int(
        mersenne: TCOD_random_t,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_get_float(mersenne: TCOD_random_t, min: f32, max: f32) -> f32;
}
extern "C" {
    pub fn TCOD_random_get_double(mersenne: TCOD_random_t, min: f64, max: f64) -> f64;
}
extern "C" {
    pub fn TCOD_random_get_int_mean(
        mersenne: TCOD_random_t,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
        mean: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_get_float_mean(
        mersenne: TCOD_random_t,
        min: f32,
        max: f32,
        mean: f32,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_random_get_double_mean(
        mersenne: TCOD_random_t,
        min: f64,
        max: f64,
        mean: f64,
    ) -> f64;
}
extern "C" {
    pub fn TCOD_random_dice_new(s: *const ::std::os::raw::c_char) -> TCOD_dice_t;
}
extern "C" {
    pub fn TCOD_random_dice_roll(
        mersenne: TCOD_random_t,
        dice: TCOD_dice_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_random_dice_roll_s(
        mersenne: TCOD_random_t,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_mouse_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub dx: ::std::os::raw::c_int,
    pub dy: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub cy: ::std::os::raw::c_int,
    pub dcx: ::std::os::raw::c_int,
    pub dcy: ::std::os::raw::c_int,
    pub lbutton: bool,
    pub rbutton: bool,
    pub mbutton: bool,
    pub lbutton_pressed: bool,
    pub rbutton_pressed: bool,
    pub mbutton_pressed: bool,
    pub wheel_up: bool,
    pub wheel_down: bool,
}
#[test]
fn bindgen_test_layout_TCOD_mouse_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_mouse_t>(),
        40usize,
        concat!("Size of: ", stringify!(TCOD_mouse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_mouse_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_mouse_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).dx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).dy as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).cx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).cy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).dcx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(dcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).dcy as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(dcy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).lbutton as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(lbutton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).rbutton as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(rbutton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).mbutton as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(mbutton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).lbutton_pressed as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(lbutton_pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).rbutton_pressed as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(rbutton_pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).mbutton_pressed as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(mbutton_pressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).wheel_up as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(wheel_up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_mouse_t>())).wheel_down as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_mouse_t),
            "::",
            stringify!(wheel_down)
        )
    );
}
extern "C" {
    pub fn TCOD_mouse_show_cursor(visible: bool);
}
extern "C" {
    pub fn TCOD_mouse_get_status() -> TCOD_mouse_t;
}
extern "C" {
    pub fn TCOD_mouse_is_cursor_visible() -> bool;
}
extern "C" {
    pub fn TCOD_mouse_move(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_mouse_includes_touch(enable: bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_NameGen {
    _unused: [u8; 0],
}
pub type TCOD_namegen_t = *mut TCOD_NameGen;
extern "C" {
    pub fn TCOD_namegen_parse(filename: *const ::std::os::raw::c_char, random: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_namegen_generate(
        name: *mut ::std::os::raw::c_char,
        allocate: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_namegen_generate_custom(
        name: *mut ::std::os::raw::c_char,
        rule: *mut ::std::os::raw::c_char,
        allocate: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_namegen_get_sets() -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_namegen_destroy();
}
pub type TCOD_path_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        xFrom: ::std::os::raw::c_int,
        yFrom: ::std::os::raw::c_int,
        xTo: ::std::os::raw::c_int,
        yTo: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ) -> f32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Path {
    _unused: [u8; 0],
}
pub type TCOD_path_t = *mut TCOD_Path;
extern "C" {
    pub fn TCOD_path_new_using_map(map: TCOD_map_t, diagonalCost: f32) -> TCOD_path_t;
}
extern "C" {
    pub fn TCOD_path_new_using_function(
        map_width: ::std::os::raw::c_int,
        map_height: ::std::os::raw::c_int,
        func: TCOD_path_func_t,
        user_data: *mut ::std::os::raw::c_void,
        diagonalCost: f32,
    ) -> TCOD_path_t;
}
extern "C" {
    pub fn TCOD_path_compute(
        path: TCOD_path_t,
        ox: ::std::os::raw::c_int,
        oy: ::std::os::raw::c_int,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_path_walk(
        path: TCOD_path_t,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        recalculate_when_needed: bool,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_path_is_empty(path: TCOD_path_t) -> bool;
}
extern "C" {
    pub fn TCOD_path_size(path: TCOD_path_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_path_reverse(path: TCOD_path_t);
}
extern "C" {
    pub fn TCOD_path_get(
        path: TCOD_path_t,
        index: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_path_get_origin(
        path: TCOD_path_t,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_path_get_destination(
        path: TCOD_path_t,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_path_delete(path: TCOD_path_t);
}
#[doc = "  Dijkstra data structure"]
#[doc = ""]
#[doc = "  All attributes are considered private."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Dijkstra {
    pub diagonal_cost: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub nodes_max: ::std::os::raw::c_int,
    pub map: TCOD_map_t,
    pub func: TCOD_path_func_t,
    pub user_data: *mut ::std::os::raw::c_void,
    pub distances: *mut ::std::os::raw::c_uint,
    pub nodes: *mut ::std::os::raw::c_uint,
    pub path: TCOD_list_t,
}
#[test]
fn bindgen_test_layout_TCOD_Dijkstra() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Dijkstra>(),
        40usize,
        concat!("Size of: ", stringify!(TCOD_Dijkstra))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Dijkstra>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Dijkstra))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).diagonal_cost as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(diagonal_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).nodes_max as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(nodes_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).map as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).func as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).user_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).distances as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(distances)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).nodes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Dijkstra>())).path as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Dijkstra),
            "::",
            stringify!(path)
        )
    );
}
impl Default for TCOD_Dijkstra {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_dijkstra_t = *mut TCOD_Dijkstra;
extern "C" {
    pub fn TCOD_dijkstra_new(map: TCOD_map_t, diagonalCost: f32) -> TCOD_dijkstra_t;
}
extern "C" {
    pub fn TCOD_dijkstra_new_using_function(
        map_width: ::std::os::raw::c_int,
        map_height: ::std::os::raw::c_int,
        func: TCOD_path_func_t,
        user_data: *mut ::std::os::raw::c_void,
        diagonalCost: f32,
    ) -> TCOD_dijkstra_t;
}
extern "C" {
    pub fn TCOD_dijkstra_compute(
        dijkstra: TCOD_dijkstra_t,
        root_x: ::std::os::raw::c_int,
        root_y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_dijkstra_get_distance(
        dijkstra: TCOD_dijkstra_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_dijkstra_path_set(
        dijkstra: TCOD_dijkstra_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_is_empty(path: TCOD_dijkstra_t) -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_size(path: TCOD_dijkstra_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_dijkstra_reverse(path: TCOD_dijkstra_t);
}
extern "C" {
    pub fn TCOD_dijkstra_get(
        path: TCOD_dijkstra_t,
        index: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_dijkstra_path_walk(
        dijkstra: TCOD_dijkstra_t,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_delete(dijkstra: TCOD_dijkstra_t);
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct TCOD_HeapNode {
    pub priority: ::std::os::raw::c_int,
    pub data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_TCOD_HeapNode() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_HeapNode>(),
        4usize,
        concat!("Size of: ", stringify!(TCOD_HeapNode))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_HeapNode>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_HeapNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_HeapNode>())).priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_HeapNode),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_HeapNode>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_HeapNode),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Heap {
    pub heap: *mut TCOD_HeapNode,
    pub size: ::std::os::raw::c_int,
    pub capacity: ::std::os::raw::c_int,
    pub node_size: size_t,
    pub data_size: size_t,
}
#[test]
fn bindgen_test_layout_TCOD_Heap() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Heap>(),
        20usize,
        concat!("Size of: ", stringify!(TCOD_Heap))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Heap>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Heap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Heap>())).heap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Heap),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Heap>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Heap),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Heap>())).capacity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Heap),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Heap>())).node_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Heap),
            "::",
            stringify!(node_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Heap>())).data_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Heap),
            "::",
            stringify!(data_size)
        )
    );
}
impl Default for TCOD_Heap {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_heap_init(heap: *mut TCOD_Heap, data_size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_heap_uninit(heap: *mut TCOD_Heap);
}
extern "C" {
    pub fn TCOD_heap_clear(heap: *mut TCOD_Heap);
}
extern "C" {
    pub fn TCOD_minheap_push(
        minheap: *mut TCOD_Heap,
        priority: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_minheap_pop(minheap: *mut TCOD_Heap, out: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn TCOD_minheap_heapify(minheap: *mut TCOD_Heap);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_ArrayData {
    pub ndim: i8,
    pub int_type: ::std::os::raw::c_int,
    pub shape: [size_t; 5usize],
    pub strides: [size_t; 5usize],
    pub data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_TCOD_ArrayData() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_ArrayData>(),
        52usize,
        concat!("Size of: ", stringify!(TCOD_ArrayData))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_ArrayData>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_ArrayData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ArrayData>())).ndim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ArrayData),
            "::",
            stringify!(ndim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ArrayData>())).int_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ArrayData),
            "::",
            stringify!(int_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ArrayData>())).shape as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ArrayData),
            "::",
            stringify!(shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ArrayData>())).strides as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ArrayData),
            "::",
            stringify!(strides)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ArrayData>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ArrayData),
            "::",
            stringify!(data)
        )
    );
}
impl Default for TCOD_ArrayData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_BasicGraph2D {
    pub cost: TCOD_ArrayData,
    pub cardinal: ::std::os::raw::c_int,
    pub diagonal: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TCOD_BasicGraph2D() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_BasicGraph2D>(),
        60usize,
        concat!("Size of: ", stringify!(TCOD_BasicGraph2D))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_BasicGraph2D>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_BasicGraph2D))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_BasicGraph2D>())).cost as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_BasicGraph2D),
            "::",
            stringify!(cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_BasicGraph2D>())).cardinal as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_BasicGraph2D),
            "::",
            stringify!(cardinal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_BasicGraph2D>())).diagonal as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_BasicGraph2D),
            "::",
            stringify!(diagonal)
        )
    );
}
impl Default for TCOD_BasicGraph2D {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Pathfinder {
    pub ndim: i8,
    pub shape: [size_t; 4usize],
    pub owns_distance: bool,
    pub owns_graph: bool,
    pub owns_traversal: bool,
    pub distance: TCOD_ArrayData,
    pub graph: TCOD_BasicGraph2D,
    pub traversal: TCOD_ArrayData,
    pub heap: TCOD_Heap,
}
#[test]
fn bindgen_test_layout_TCOD_Pathfinder() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Pathfinder>(),
        208usize,
        concat!("Size of: ", stringify!(TCOD_Pathfinder))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Pathfinder>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Pathfinder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).ndim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(ndim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).shape as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).owns_distance as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(owns_distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).owns_graph as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(owns_graph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).owns_traversal as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(owns_traversal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).distance as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).graph as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).traversal as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(traversal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Pathfinder>())).heap as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Pathfinder),
            "::",
            stringify!(heap)
        )
    );
}
impl Default for TCOD_Pathfinder {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_pf_new(ndim: ::std::os::raw::c_int, shape: *const size_t) -> *mut TCOD_Pathfinder;
}
extern "C" {
    pub fn TCOD_pf_delete(path: *mut TCOD_Pathfinder);
}
extern "C" {
    pub fn TCOD_pf_set_distance_pointer(
        path: *mut TCOD_Pathfinder,
        data: *mut ::std::os::raw::c_void,
        int_type: ::std::os::raw::c_int,
        strides: *const size_t,
    );
}
extern "C" {
    pub fn TCOD_pf_set_graph2d_pointer(
        path: *mut TCOD_Pathfinder,
        data: *mut ::std::os::raw::c_void,
        int_type: ::std::os::raw::c_int,
        strides: *const size_t,
        cardinal: ::std::os::raw::c_int,
        diagonal: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_pf_set_traversal_pointer(
        path: *mut TCOD_Pathfinder,
        data: *mut ::std::os::raw::c_void,
        int_type: ::std::os::raw::c_int,
        strides: *const size_t,
    );
}
extern "C" {
    pub fn TCOD_pf_recompile(path: *mut TCOD_Pathfinder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_pf_compute(path: *mut TCOD_Pathfinder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_pf_compute_step(path: *mut TCOD_Pathfinder) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Frontier {
    pub ndim: i8,
    pub active_dist: ::std::os::raw::c_int,
    pub active_index: [::std::os::raw::c_int; 4usize],
    pub heap: TCOD_Heap,
}
#[test]
fn bindgen_test_layout_TCOD_Frontier() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Frontier>(),
        44usize,
        concat!("Size of: ", stringify!(TCOD_Frontier))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Frontier>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Frontier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Frontier>())).ndim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Frontier),
            "::",
            stringify!(ndim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Frontier>())).active_dist as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Frontier),
            "::",
            stringify!(active_dist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Frontier>())).active_index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Frontier),
            "::",
            stringify!(active_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Frontier>())).heap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Frontier),
            "::",
            stringify!(heap)
        )
    );
}
impl Default for TCOD_Frontier {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[doc = "Create a new pathfinder frontier."]
    #[doc = ""]
    #[doc = "`ndim` is the number of dimensions.  Must be in the range `1 <= n <= 4`."]
    pub fn TCOD_frontier_new(ndim: ::std::os::raw::c_int) -> *mut TCOD_Frontier;
}
extern "C" {
    #[doc = "Delete a pathfinder frontier."]
    pub fn TCOD_frontier_delete(frontier: *mut TCOD_Frontier);
}
extern "C" {
    #[doc = "Pop the next node from this frontier."]
    #[doc = ""]
    #[doc = "The popped node variables will placed in the `active_dist` and"]
    #[doc = "`active_index` attributes."]
    pub fn TCOD_frontier_pop(frontier: *mut TCOD_Frontier) -> TCOD_Error;
}
extern "C" {
    #[doc = "Add a node to this frontier."]
    #[doc = ""]
    #[doc = "`index[frontier->ndim]` is the position of the node to add to the frontier."]
    #[doc = ""]
    #[doc = "`dist` is the total distance of the node.  This should be a low number"]
    #[doc = "like 0, but can also be a negative number such as `INT_MIN`."]
    #[doc = "When adding a node as an edge then `dist` is `frontier->active_dist` plus"]
    #[doc = "the cost of the edge."]
    #[doc = ""]
    #[doc = "`heuristic` is the true priority of the node, used to affect node order."]
    #[doc = "For Dijkstra-like algorithms this should be the same as `dist`."]
    #[doc = "For A* this should be `dist` plus the maximum possible distance to the"]
    #[doc = "goal."]
    pub fn TCOD_frontier_push(
        frontier: *mut TCOD_Frontier,
        index: *const ::std::os::raw::c_int,
        dist: ::std::os::raw::c_int,
        heuristic: ::std::os::raw::c_int,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "Return the current number of nodes in this frontier."]
    pub fn TCOD_frontier_size(frontier: *const TCOD_Frontier) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "Remove all nodes from this frontier."]
    pub fn TCOD_frontier_clear(frontier: *mut TCOD_Frontier) -> TCOD_Error;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_value_type_t {
    TCOD_TYPE_NONE = 0,
    TCOD_TYPE_BOOL = 1,
    TCOD_TYPE_CHAR = 2,
    TCOD_TYPE_INT = 3,
    TCOD_TYPE_FLOAT = 4,
    TCOD_TYPE_STRING = 5,
    TCOD_TYPE_COLOR = 6,
    TCOD_TYPE_DICE = 7,
    TCOD_TYPE_VALUELIST00 = 8,
    TCOD_TYPE_VALUELIST01 = 9,
    TCOD_TYPE_VALUELIST02 = 10,
    TCOD_TYPE_VALUELIST03 = 11,
    TCOD_TYPE_VALUELIST04 = 12,
    TCOD_TYPE_VALUELIST05 = 13,
    TCOD_TYPE_VALUELIST06 = 14,
    TCOD_TYPE_VALUELIST07 = 15,
    TCOD_TYPE_VALUELIST08 = 16,
    TCOD_TYPE_VALUELIST09 = 17,
    TCOD_TYPE_VALUELIST10 = 18,
    TCOD_TYPE_VALUELIST11 = 19,
    TCOD_TYPE_VALUELIST12 = 20,
    TCOD_TYPE_VALUELIST13 = 21,
    TCOD_TYPE_VALUELIST14 = 22,
    TCOD_TYPE_VALUELIST15 = 23,
    TCOD_TYPE_CUSTOM00 = 24,
    TCOD_TYPE_CUSTOM01 = 25,
    TCOD_TYPE_CUSTOM02 = 26,
    TCOD_TYPE_CUSTOM03 = 27,
    TCOD_TYPE_CUSTOM04 = 28,
    TCOD_TYPE_CUSTOM05 = 29,
    TCOD_TYPE_CUSTOM06 = 30,
    TCOD_TYPE_CUSTOM07 = 31,
    TCOD_TYPE_CUSTOM08 = 32,
    TCOD_TYPE_CUSTOM09 = 33,
    TCOD_TYPE_CUSTOM10 = 34,
    TCOD_TYPE_CUSTOM11 = 35,
    TCOD_TYPE_CUSTOM12 = 36,
    TCOD_TYPE_CUSTOM13 = 37,
    TCOD_TYPE_CUSTOM14 = 38,
    TCOD_TYPE_CUSTOM15 = 39,
    TCOD_TYPE_LIST = 1024,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TCOD_value_t {
    pub b: bool,
    pub c: ::std::os::raw::c_char,
    pub i: i32,
    pub f: f32,
    pub s: *mut ::std::os::raw::c_char,
    pub col: TCOD_color_t,
    pub dice: TCOD_dice_t,
    pub list: TCOD_list_t,
    pub custom: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_TCOD_value_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_value_t>(),
        16usize,
        concat!("Size of: ", stringify!(TCOD_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_value_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).col as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).dice as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(dice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_value_t>())).custom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_value_t),
            "::",
            stringify!(custom)
        )
    );
}
impl Default for TCOD_value_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_parser_struct_t = *mut TCOD_ParserStruct;
extern "C" {
    pub fn TCOD_struct_get_name(def: TCOD_parser_struct_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_struct_add_property(
        def: TCOD_parser_struct_t,
        name: *const ::std::os::raw::c_char,
        type_: TCOD_value_type_t,
        mandatory: bool,
    );
}
extern "C" {
    pub fn TCOD_struct_add_list_property(
        def: TCOD_parser_struct_t,
        name: *const ::std::os::raw::c_char,
        type_: TCOD_value_type_t,
        mandatory: bool,
    );
}
extern "C" {
    pub fn TCOD_struct_add_value_list(
        def: TCOD_parser_struct_t,
        name: *const ::std::os::raw::c_char,
        value_list: *mut *const ::std::os::raw::c_char,
        mandatory: bool,
    );
}
extern "C" {
    pub fn TCOD_struct_add_value_list_sized(
        def: TCOD_parser_struct_t,
        name: *const ::std::os::raw::c_char,
        value_list: *mut *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        mandatory: bool,
    );
}
extern "C" {
    pub fn TCOD_struct_add_flag(def: TCOD_parser_struct_t, propname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_struct_add_structure(
        def: TCOD_parser_struct_t,
        sub_structure: TCOD_parser_struct_t,
    );
}
extern "C" {
    pub fn TCOD_struct_is_mandatory(
        def: TCOD_parser_struct_t,
        propname: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_struct_get_type(
        def: TCOD_parser_struct_t,
        propname: *const ::std::os::raw::c_char,
    ) -> TCOD_value_type_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct TCOD_parser_listener_t {
    pub new_struct: ::std::option::Option<
        unsafe extern "C" fn(
            str: TCOD_parser_struct_t,
            name: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub new_flag:
        ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> bool>,
    pub new_property: ::std::option::Option<
        unsafe extern "C" fn(
            propname: *const ::std::os::raw::c_char,
            type_: TCOD_value_type_t,
            value: TCOD_value_t,
        ) -> bool,
    >,
    pub end_struct: ::std::option::Option<
        unsafe extern "C" fn(
            str: TCOD_parser_struct_t,
            name: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub error: ::std::option::Option<unsafe extern "C" fn(msg: *const ::std::os::raw::c_char)>,
}
#[test]
fn bindgen_test_layout_TCOD_parser_listener_t() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_parser_listener_t>(),
        20usize,
        concat!("Size of: ", stringify!(TCOD_parser_listener_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_parser_listener_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_parser_listener_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_parser_listener_t>())).new_struct as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(new_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_parser_listener_t>())).new_flag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(new_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_parser_listener_t>())).new_property as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(new_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_parser_listener_t>())).end_struct as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(end_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_parser_listener_t>())).error as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_parser_listener_t),
            "::",
            stringify!(error)
        )
    );
}
pub type TCOD_parser_custom_t = ::std::option::Option<
    unsafe extern "C" fn(
        lex: *mut TCOD_lex_t,
        listener: *mut TCOD_parser_listener_t,
        str: TCOD_parser_struct_t,
        propname: *mut ::std::os::raw::c_char,
    ) -> TCOD_value_t,
>;
pub type TCOD_parser_t = *mut TCOD_Parser;
extern "C" {
    pub fn TCOD_parser_new() -> TCOD_parser_t;
}
extern "C" {
    pub fn TCOD_parser_new_struct(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> TCOD_parser_struct_t;
}
extern "C" {
    pub fn TCOD_parser_new_custom_type(
        parser: TCOD_parser_t,
        custom_type_parser: TCOD_parser_custom_t,
    ) -> TCOD_value_type_t;
}
extern "C" {
    pub fn TCOD_parser_run(
        parser: TCOD_parser_t,
        filename: *const ::std::os::raw::c_char,
        listener: *mut TCOD_parser_listener_t,
    );
}
extern "C" {
    pub fn TCOD_parser_delete(parser: TCOD_parser_t);
}
extern "C" {
    pub fn TCOD_parser_error(msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn TCOD_parser_has_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_parser_get_bool_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_parser_get_char_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_parser_get_int_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_parser_get_float_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn TCOD_parser_get_string_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_parser_get_color_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_parser_get_dice_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> TCOD_dice_t;
}
extern "C" {
    pub fn TCOD_parser_get_dice_property_py(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
        dice: *mut TCOD_dice_t,
    );
}
extern "C" {
    pub fn TCOD_parser_get_custom_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_parser_get_list_property(
        parser: TCOD_parser_t,
        name: *const ::std::os::raw::c_char,
        type_: TCOD_value_type_t,
    ) -> TCOD_list_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_ParserStruct {
    pub name: *mut ::std::os::raw::c_char,
    pub flags: TCOD_list_t,
    pub props: TCOD_list_t,
    pub lists: TCOD_list_t,
    pub structs: TCOD_list_t,
}
#[test]
fn bindgen_test_layout_TCOD_ParserStruct() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_ParserStruct>(),
        20usize,
        concat!("Size of: ", stringify!(TCOD_ParserStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_ParserStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_ParserStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ParserStruct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ParserStruct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ParserStruct>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ParserStruct),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ParserStruct>())).props as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ParserStruct),
            "::",
            stringify!(props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ParserStruct>())).lists as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ParserStruct),
            "::",
            stringify!(lists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_ParserStruct>())).structs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_ParserStruct),
            "::",
            stringify!(structs)
        )
    );
}
impl Default for TCOD_ParserStruct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_struct_int_t = TCOD_ParserStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Parser {
    pub structs: TCOD_list_t,
    pub customs: [TCOD_parser_custom_t; 16usize],
    pub fatal: bool,
    pub props: TCOD_list_t,
}
#[test]
fn bindgen_test_layout_TCOD_Parser() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_Parser>(),
        76usize,
        concat!("Size of: ", stringify!(TCOD_Parser))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_Parser>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_Parser))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Parser>())).structs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Parser),
            "::",
            stringify!(structs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Parser>())).customs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Parser),
            "::",
            stringify!(customs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Parser>())).fatal as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Parser),
            "::",
            stringify!(fatal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_Parser>())).props as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_Parser),
            "::",
            stringify!(props)
        )
    );
}
impl Default for TCOD_Parser {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type TCOD_parser_int_t = TCOD_Parser;
extern "C" {
    pub fn TCOD_parse_bool_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_char_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_integer_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_float_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_string_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_color_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_dice_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_value_list_value(
        def: *mut TCOD_struct_int_t,
        listnum: ::std::os::raw::c_int,
    ) -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_property_value(
        parser: *mut TCOD_parser_int_t,
        def: TCOD_parser_struct_t,
        propname: *mut ::std::os::raw::c_char,
        list: bool,
    ) -> TCOD_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_TilesetAtlasOpenGL {
    pub tileset: *mut TCOD_Tileset,
    pub observer: *mut TCOD_TilesetObserver,
    pub texture: u32,
    pub texture_size: ::std::os::raw::c_int,
    pub texture_columns: ::std::os::raw::c_int,
    pub texture_rows: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TCOD_TilesetAtlasOpenGL() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_TilesetAtlasOpenGL>(),
        24usize,
        concat!("Size of: ", stringify!(TCOD_TilesetAtlasOpenGL))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_TilesetAtlasOpenGL>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_TilesetAtlasOpenGL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetAtlasOpenGL>())).tileset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasOpenGL),
            "::",
            stringify!(tileset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_TilesetAtlasOpenGL>())).observer as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasOpenGL),
            "::",
            stringify!(observer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetAtlasOpenGL>())).texture as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasOpenGL),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_TilesetAtlasOpenGL>())).texture_size as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasOpenGL),
            "::",
            stringify!(texture_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_TilesetAtlasOpenGL>())).texture_columns as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasOpenGL),
            "::",
            stringify!(texture_columns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_TilesetAtlasOpenGL>())).texture_rows as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasOpenGL),
            "::",
            stringify!(texture_rows)
        )
    );
}
impl Default for TCOD_TilesetAtlasOpenGL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_RendererGLCommon {
    pub window: *mut SDL_Window,
    pub glcontext: *mut ::std::os::raw::c_void,
    pub atlas: *mut TCOD_TilesetAtlasOpenGL,
    pub sdl_subsystems: u32,
    pub last_offset_x: f64,
    pub last_offset_y: f64,
    pub last_scale_x: f64,
    pub last_scale_y: f64,
}
#[test]
fn bindgen_test_layout_TCOD_RendererGLCommon() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_RendererGLCommon>(),
        48usize,
        concat!("Size of: ", stringify!(TCOD_RendererGLCommon))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_RendererGLCommon>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_RendererGLCommon))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGLCommon>())).window as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGLCommon),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGLCommon>())).glcontext as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGLCommon),
            "::",
            stringify!(glcontext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGLCommon>())).atlas as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGLCommon),
            "::",
            stringify!(atlas)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGLCommon>())).sdl_subsystems as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGLCommon),
            "::",
            stringify!(sdl_subsystems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGLCommon>())).last_offset_x as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGLCommon),
            "::",
            stringify!(last_offset_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGLCommon>())).last_offset_y as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGLCommon),
            "::",
            stringify!(last_offset_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGLCommon>())).last_scale_x as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGLCommon),
            "::",
            stringify!(last_scale_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGLCommon>())).last_scale_y as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGLCommon),
            "::",
            stringify!(last_scale_y)
        )
    );
}
impl Default for TCOD_RendererGLCommon {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_gl_atlas_new(tileset: *mut TCOD_Tileset) -> *mut TCOD_TilesetAtlasOpenGL;
}
extern "C" {
    pub fn TCOD_gl_atlas_delete(atlas: *mut TCOD_TilesetAtlasOpenGL);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_RendererGL1 {
    pub common: TCOD_RendererGLCommon,
    pub background_texture: u32,
    pub background_width: ::std::os::raw::c_int,
    pub background_height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TCOD_RendererGL1() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_RendererGL1>(),
        64usize,
        concat!("Size of: ", stringify!(TCOD_RendererGL1))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_RendererGL1>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_RendererGL1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGL1>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL1),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGL1>())).background_texture as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL1),
            "::",
            stringify!(background_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGL1>())).background_width as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL1),
            "::",
            stringify!(background_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGL1>())).background_height as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL1),
            "::",
            stringify!(background_height)
        )
    );
}
impl Default for TCOD_RendererGL1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_renderer_init_gl1(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        window_flags: ::std::os::raw::c_int,
        vsync: bool,
        tileset: *mut TCOD_Tileset,
    ) -> *mut TCOD_Context;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_RendererGL2 {
    pub common: TCOD_RendererGLCommon,
    pub program: u32,
    pub console_textures: [u32; 3usize],
    pub console_width: ::std::os::raw::c_int,
    pub console_height: ::std::os::raw::c_int,
    pub vertex_buffer: u32,
}
#[test]
fn bindgen_test_layout_TCOD_RendererGL2() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_RendererGL2>(),
        80usize,
        concat!("Size of: ", stringify!(TCOD_RendererGL2))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_RendererGL2>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_RendererGL2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGL2>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL2),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGL2>())).program as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL2),
            "::",
            stringify!(program)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererGL2>())).console_textures as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL2),
            "::",
            stringify!(console_textures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGL2>())).console_width as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL2),
            "::",
            stringify!(console_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGL2>())).console_height as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL2),
            "::",
            stringify!(console_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererGL2>())).vertex_buffer as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererGL2),
            "::",
            stringify!(vertex_buffer)
        )
    );
}
impl Default for TCOD_RendererGL2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn TCOD_renderer_new_gl2(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        window_flags: ::std::os::raw::c_int,
        vsync: bool,
        tileset: *mut TCOD_Tileset,
    ) -> *mut TCOD_Context;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Texture {
    _unused: [u8; 0],
}
#[doc = "An SDL2 tileset atlas.  This prepares a tileset for use with SDL2."]
#[doc = "\\rst"]
#[doc = ".. versionadded:: 1.16"]
#[doc = "\\endrst"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_TilesetAtlasSDL2 {
    #[doc = " The renderer used to create this atlas."]
    pub renderer: *mut SDL_Renderer,
    #[doc = " The atlas texture."]
    pub texture: *mut SDL_Texture,
    #[doc = " The tileset used to create this atlas. Internal use only."]
    pub tileset: *mut TCOD_Tileset,
    #[doc = " Internal use only."]
    pub observer: *mut TCOD_TilesetObserver,
    #[doc = " Internal use only."]
    pub texture_columns: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TCOD_TilesetAtlasSDL2() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_TilesetAtlasSDL2>(),
        20usize,
        concat!("Size of: ", stringify!(TCOD_TilesetAtlasSDL2))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_TilesetAtlasSDL2>(),
        4usize,
        concat!("Alignment of ", stringify!(TCOD_TilesetAtlasSDL2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetAtlasSDL2>())).renderer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasSDL2),
            "::",
            stringify!(renderer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetAtlasSDL2>())).texture as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasSDL2),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetAtlasSDL2>())).tileset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasSDL2),
            "::",
            stringify!(tileset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_TilesetAtlasSDL2>())).observer as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasSDL2),
            "::",
            stringify!(observer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_TilesetAtlasSDL2>())).texture_columns as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_TilesetAtlasSDL2),
            "::",
            stringify!(texture_columns)
        )
    );
}
impl Default for TCOD_TilesetAtlasSDL2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[doc = "The renderer data for an SDL2 rendering context."]
#[doc = "Internal use only."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_RendererSDL2 {
    pub window: *mut SDL_Window,
    pub renderer: *mut SDL_Renderer,
    pub atlas: *mut TCOD_TilesetAtlasSDL2,
    pub cache_console: *mut TCOD_Console,
    pub cache_texture: *mut SDL_Texture,
    pub sdl_subsystems: u32,
    pub last_offset_x: f64,
    pub last_offset_y: f64,
    pub last_scale_x: f64,
    pub last_scale_y: f64,
}
#[test]
fn bindgen_test_layout_TCOD_RendererSDL2() {
    assert_eq!(
        ::std::mem::size_of::<TCOD_RendererSDL2>(),
        56usize,
        concat!("Size of: ", stringify!(TCOD_RendererSDL2))
    );
    assert_eq!(
        ::std::mem::align_of::<TCOD_RendererSDL2>(),
        8usize,
        concat!("Alignment of ", stringify!(TCOD_RendererSDL2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).window as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).renderer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(renderer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).atlas as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(atlas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).cache_console as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(cache_console)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).cache_texture as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(cache_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TCOD_RendererSDL2>())).sdl_subsystems as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(sdl_subsystems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).last_offset_x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(last_offset_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).last_offset_y as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(last_offset_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).last_scale_x as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(last_scale_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TCOD_RendererSDL2>())).last_scale_y as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TCOD_RendererSDL2),
            "::",
            stringify!(last_scale_y)
        )
    );
}
impl Default for TCOD_RendererSDL2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[doc = "Return a libtcod rendering context using an SDL2 renderer."]
    pub fn TCOD_renderer_init_sdl2(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        window_flags: ::std::os::raw::c_int,
        renderer_flags: ::std::os::raw::c_int,
        tileset: *mut TCOD_Tileset,
    ) -> *mut TCOD_Context;
}
extern "C" {
    #[doc = "Return a new SDL2 atlas created from a tileset for an SDL2 renderer."]
    #[doc = ""]
    #[doc = "You may delete the tileset if you no longer have use for it."]
    #[doc = ""]
    #[doc = "Will return NULL on an error, you can check the error with"]
    #[doc = "`TCOD_get_error`."]
    pub fn TCOD_sdl2_atlas_new(
        renderer: *mut SDL_Renderer,
        tileset: *mut TCOD_Tileset,
    ) -> *mut TCOD_TilesetAtlasSDL2;
}
extern "C" {
    #[doc = "Delete an SDL2 tileset atlas."]
    pub fn TCOD_sdl2_atlas_delete(atlas: *mut TCOD_TilesetAtlasSDL2);
}
extern "C" {
    #[doc = "Render a console onto a managed target texture."]
    #[doc = ""]
    #[doc = "`atlas` is an SDL2 atlas created with `TCOD_sdl2_atlas_new`."]
    #[doc = "The renderer used to make this `atlas` must support"]
    #[doc = "`SDL_RENDERER_TARGETTEXTURE`, unless `target` is NULL."]
    #[doc = ""]
    #[doc = "`console` is a non-NULL pointer to the libtcod console you want to render."]
    #[doc = ""]
    #[doc = "`cache` can be NULL, or be pointer to a console pointer."]
    #[doc = "If `*cache` is NULL then a console will be created."]
    #[doc = "If `*cache` isn't NULL then the console pointed to might be deleted or"]
    #[doc = "recreated, especially if it does not match the size of `console`."]
    #[doc = ""]
    #[doc = "`target` can be NULL, or be pointer to where you want the output texture"]
    #[doc = "to be placed."]
    #[doc = "The texture at `*target` may be deleted or recreated.  When this function"]
    #[doc = "is successful then the texture at `*target` will be non-NULL and will be"]
    #[doc = "exactly fitted to the size of `console` and the tile size of `atlas`."]
    #[doc = ""]
    #[doc = "If `target` is NULL when the current render target is used instead, the"]
    #[doc = "drawn area will not be scaled to fit the render target."]
    #[doc = ""]
    #[doc = "If SDL2 ever provides a `SDL_RENDER_TARGETS_RESET` event then the console"]
    #[doc = "at `*cache` must be deleted and set to NULL, or else the next render will"]
    #[doc = "only partially update the texture at `*target`."]
    #[doc = ""]
    #[doc = "Returns a negative value on an error, check `TCOD_get_error`."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_sdl2_render_texture(
        atlas: *const TCOD_TilesetAtlasSDL2,
        console: *const TCOD_Console,
        cache: *mut *mut TCOD_Console,
        target: *mut *mut SDL_Texture,
    ) -> TCOD_Error;
}
extern "C" {
    pub fn TCOD_sys_startup();
}
extern "C" {
    pub fn TCOD_sys_shutdown();
}
extern "C" {
    pub fn TCOD_sys_elapsed_milli() -> u32;
}
extern "C" {
    pub fn TCOD_sys_elapsed_seconds() -> f32;
}
extern "C" {
    pub fn TCOD_sys_sleep_milli(val: u32);
}
extern "C" {
    pub fn TCOD_sys_set_fps(val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_fps() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_sys_get_last_frame_length() -> f32;
}
extern "C" {
    pub fn TCOD_sys_save_screenshot(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_sys_force_fullscreen_resolution(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_sys_set_renderer(renderer: TCOD_renderer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_sys_get_renderer() -> TCOD_renderer_t;
}
extern "C" {
    pub fn TCOD_sys_get_current_resolution(
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_sys_get_fullscreen_offsets(
        offx: *mut ::std::os::raw::c_int,
        offy: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_sys_get_char_size(w: *mut ::std::os::raw::c_int, h: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = "  Upload a tile to the active tileset."]
    #[doc = ""]
    #[doc = "  `asciiCode` is the Unicode codepoint for this tile."]
    #[doc = ""]
    #[doc = "  `fontx` and `fonty` are the tile-coordinates on the active tilemap."]
    #[doc = ""]
    #[doc = "  `img` is the tile to upload."]
    #[doc = ""]
    #[doc = "  `x` and `y` are the upper-left pixel-coordinates of the tile on the `img`."]
    pub fn TCOD_sys_update_char(
        asciiCode: ::std::os::raw::c_int,
        fontx: ::std::os::raw::c_int,
        fonty: ::std::os::raw::c_int,
        img: TCOD_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_sys_get_SDL_window() -> *mut SDL_Window;
}
extern "C" {
    pub fn TCOD_sys_get_SDL_renderer() -> *mut SDL_Renderer;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TCOD_event_t {
    TCOD_EVENT_NONE = 0,
    TCOD_EVENT_KEY_PRESS = 1,
    TCOD_EVENT_KEY_RELEASE = 2,
    TCOD_EVENT_KEY = 3,
    TCOD_EVENT_MOUSE_MOVE = 4,
    TCOD_EVENT_MOUSE_PRESS = 8,
    TCOD_EVENT_MOUSE_RELEASE = 16,
    TCOD_EVENT_MOUSE = 28,
    TCOD_EVENT_FINGER_MOVE = 32,
    TCOD_EVENT_FINGER_PRESS = 64,
    TCOD_EVENT_FINGER_RELEASE = 128,
    TCOD_EVENT_FINGER = 224,
    TCOD_EVENT_ANY = 255,
}
extern "C" {
    pub fn TCOD_sys_wait_for_event(
        eventMask: ::std::os::raw::c_int,
        key: *mut TCOD_key_t,
        mouse: *mut TCOD_mouse_t,
        flush: bool,
    ) -> TCOD_event_t;
}
extern "C" {
    pub fn TCOD_sys_check_for_event(
        eventMask: ::std::os::raw::c_int,
        key: *mut TCOD_key_t,
        mouse: *mut TCOD_mouse_t,
    ) -> TCOD_event_t;
}
extern "C" {
    pub fn TCOD_sys_create_directory(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_delete_file(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_delete_directory(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_is_directory(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_get_directory_content(
        path: *const ::std::os::raw::c_char,
        pattern: *const ::std::os::raw::c_char,
    ) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_sys_file_exists(filename: *const ::std::os::raw::c_char, ...) -> bool;
}
extern "C" {
    pub fn TCOD_sys_read_file(
        filename: *const ::std::os::raw::c_char,
        buf: *mut *mut ::std::os::raw::c_uchar,
        size: *mut size_t,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_sys_write_file(
        filename: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_uchar,
        size: u32,
    ) -> bool;
}
extern "C" {
    pub fn TCOD_sys_clipboard_set(value: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_clipboard_get() -> *mut ::std::os::raw::c_char;
}
pub type TCOD_thread_t = *mut ::std::os::raw::c_void;
pub type TCOD_semaphore_t = *mut ::std::os::raw::c_void;
pub type TCOD_mutex_t = *mut ::std::os::raw::c_void;
pub type TCOD_cond_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_thread_new(
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> TCOD_thread_t;
}
extern "C" {
    pub fn TCOD_thread_delete(th: TCOD_thread_t);
}
extern "C" {
    pub fn TCOD_sys_get_num_cores() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_thread_wait(th: TCOD_thread_t);
}
extern "C" {
    pub fn TCOD_mutex_new() -> TCOD_mutex_t;
}
extern "C" {
    pub fn TCOD_mutex_in(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_mutex_out(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_mutex_delete(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_semaphore_new(initVal: ::std::os::raw::c_int) -> TCOD_semaphore_t;
}
extern "C" {
    pub fn TCOD_semaphore_lock(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_semaphore_unlock(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_semaphore_delete(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_condition_new() -> TCOD_cond_t;
}
extern "C" {
    pub fn TCOD_condition_signal(sem: TCOD_cond_t);
}
extern "C" {
    pub fn TCOD_condition_broadcast(sem: TCOD_cond_t);
}
extern "C" {
    pub fn TCOD_condition_wait(sem: TCOD_cond_t, mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_condition_delete(sem: TCOD_cond_t);
}
pub type TCOD_library_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn TCOD_load_library(path: *const ::std::os::raw::c_char) -> TCOD_library_t;
}
extern "C" {
    pub fn TCOD_get_function_address(
        library: TCOD_library_t,
        function_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn TCOD_close_library(arg1: TCOD_library_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Surface {
    _unused: [u8; 0],
}
pub type SDL_renderer_t =
    ::std::option::Option<unsafe extern "C" fn(sdl_renderer: *mut SDL_Surface)>;
extern "C" {
    pub fn TCOD_sys_register_SDL_renderer(renderer: SDL_renderer_t);
}
extern "C" {
    #[doc = "Load a BDF font from a file path."]
    #[doc = ""]
    #[doc = "For the best results, you should use a BDF font with a cell-based"]
    #[doc = "monospace alignment."]
    #[doc = ""]
    #[doc = "May return NULL on failure.  See `TCOD_get_error` for the error message."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_load_bdf(path: *const ::std::os::raw::c_char) -> *mut TCOD_Tileset;
}
extern "C" {
    #[doc = "Load a BDF font from memory."]
    #[doc = ""]
    #[doc = "`size` is the byte length of `buffer`.  `buffer` is the BDF data to load."]
    #[doc = ""]
    #[doc = "May return NULL on failure.  See `TCOD_get_error` for the error message."]
    #[doc = ""]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_load_bdf_memory(
        size: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_uchar,
    ) -> *mut TCOD_Tileset;
}
extern "C" {
    #[doc = "  Try to return a fall-back Tileset, may return NULL."]
    #[doc = ""]
    #[doc = "  Used when one is needed, but was not provided by the user."]
    pub fn TCOD_tileset_load_fallback_font_(
        tile_width: ::std::os::raw::c_int,
        tile_height: ::std::os::raw::c_int,
    ) -> *mut TCOD_Tileset;
}
extern "C" {
    #[doc = "Render a console to a SDL_Surface with a software renderer."]
    #[doc = ""]
    #[doc = "`tileset` is the tiles to render with, must not be NULL."]
    #[doc = ""]
    #[doc = "`console` is the console to render, must not be NULL."]
    #[doc = ""]
    #[doc = "`cache` is an optional pointer to a consoled used as a cache.  The console"]
    #[doc = "at `*cache` will be created or modified.  The `cache` will be used to skip"]
    #[doc = "drawing already drawn tiles on any subsequent calls."]
    #[doc = ""]
    #[doc = "`surface_out` is a pointer to where to put the surface will be managed."]
    #[doc = "The surface at `*surface_out` will be created or modified and will change"]
    #[doc = "to match the size of `console` and `tileset`.  The pixel format will be"]
    #[doc = "SDL_PIXELFORMAT_RGBA32."]
    #[doc = ""]
    #[doc = "Returns a negative value on error, see `TCOD_get_error`."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_tileset_render_to_surface(
        tileset: *const TCOD_Tileset,
        console: *const TCOD_Console,
        cache: *mut *mut TCOD_Console,
        surface_out: *mut *mut SDL_Surface,
    ) -> TCOD_Error;
}
extern "C" {
    #[doc = "  Return a tileset from a TrueType font file."]
    pub fn TCOD_load_truetype_font_(
        path: *const ::std::os::raw::c_char,
        tile_width: ::std::os::raw::c_int,
        tile_height: ::std::os::raw::c_int,
    ) -> *mut TCOD_Tileset;
}
extern "C" {
    #[doc = "  Set the global tileset from a TrueType font file."]
    pub fn TCOD_tileset_load_truetype_(
        path: *const ::std::os::raw::c_char,
        tile_width: ::std::os::raw::c_int,
        tile_height: ::std::os::raw::c_int,
    ) -> TCOD_Error;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Text {
    _unused: [u8; 0],
}
pub type TCOD_text_t = *mut TCOD_Text;
extern "C" {
    pub fn TCOD_text_init(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        max_chars: ::std::os::raw::c_int,
    ) -> TCOD_text_t;
}
extern "C" {
    pub fn TCOD_text_init2(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        max_chars: ::std::os::raw::c_int,
    ) -> TCOD_text_t;
}
extern "C" {
    pub fn TCOD_text_set_pos(txt: TCOD_text_t, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_text_set_properties(
        txt: TCOD_text_t,
        cursor_char: ::std::os::raw::c_int,
        blink_interval: ::std::os::raw::c_int,
        prompt: *const ::std::os::raw::c_char,
        tab_size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn TCOD_text_set_colors(
        txt: TCOD_text_t,
        fore: TCOD_color_t,
        back: TCOD_color_t,
        back_transparency: f32,
    );
}
extern "C" {
    pub fn TCOD_text_update(txt: TCOD_text_t, key: TCOD_key_t) -> bool;
}
extern "C" {
    pub fn TCOD_text_render(txt: TCOD_text_t, con: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_text_get(txt: TCOD_text_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_text_reset(txt: TCOD_text_t);
}
extern "C" {
    pub fn TCOD_text_delete(txt: TCOD_text_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TCOD_Zip {
    _unused: [u8; 0],
}
pub type TCOD_zip_t = *mut TCOD_Zip;
extern "C" {
    pub fn TCOD_zip_new() -> TCOD_zip_t;
}
extern "C" {
    pub fn TCOD_zip_delete(zip: TCOD_zip_t);
}
extern "C" {
    pub fn TCOD_zip_put_char(zip: TCOD_zip_t, val: ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_zip_put_int(zip: TCOD_zip_t, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TCOD_zip_put_float(zip: TCOD_zip_t, val: f32);
}
extern "C" {
    pub fn TCOD_zip_put_string(zip: TCOD_zip_t, val: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TCOD_zip_put_color(zip: TCOD_zip_t, val: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_zip_put_image(zip: TCOD_zip_t, val: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_zip_put_console(zip: TCOD_zip_t, val: *const TCOD_Console);
}
extern "C" {
    #[doc = "Write a TCOD_Random* object."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_zip_put_random(zip: TCOD_zip_t, val: *const TCOD_Random);
}
extern "C" {
    pub fn TCOD_zip_put_data(
        zip: TCOD_zip_t,
        nbBytes: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn TCOD_zip_get_current_bytes(zip: TCOD_zip_t) -> u32;
}
extern "C" {
    pub fn TCOD_zip_save_to_file(
        zip: TCOD_zip_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_load_from_file(
        zip: TCOD_zip_t,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_char(zip: TCOD_zip_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_zip_get_int(zip: TCOD_zip_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_float(zip: TCOD_zip_t) -> f32;
}
extern "C" {
    pub fn TCOD_zip_get_string(zip: TCOD_zip_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TCOD_zip_get_color(zip: TCOD_zip_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_zip_get_image(zip: TCOD_zip_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_zip_get_console(zip: TCOD_zip_t) -> TCOD_console_t;
}
extern "C" {
    #[doc = "Read a TCOD_Random* object."]
    #[doc = "\\rst"]
    #[doc = ".. versionadded:: 1.16"]
    #[doc = "\\endrst"]
    pub fn TCOD_zip_get_random(zip: TCOD_zip_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_zip_get_data(
        zip: TCOD_zip_t,
        nbBytes: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_remaining_bytes(zip: TCOD_zip_t) -> u32;
}
extern "C" {
    pub fn TCOD_zip_skip_bytes(zip: TCOD_zip_t, nbBytes: u32);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_Event {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = "  Parse an SDL_Event into a key event and return the relevant TCOD_event_t."]
    #[doc = ""]
    #[doc = "  Returns TCOD_EVENT_NONE if the event wasn't keyboard related."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.11"]
    #[doc = "  \\endrst"]
    pub fn TCOD_sys_process_key_event(in_: *const SDL_Event, out: *mut TCOD_key_t) -> TCOD_event_t;
}
extern "C" {
    #[doc = "  Parse an SDL_Event into a mouse event and return the relevant TCOD_event_t."]
    #[doc = ""]
    #[doc = "  Returns TCOD_EVENT_NONE if the event wasn't mouse related."]
    #[doc = "  \\rst"]
    #[doc = "  .. versionadded:: 1.11"]
    #[doc = "  \\endrst"]
    pub fn TCOD_sys_process_mouse_event(
        in_: *const SDL_Event,
        out: *mut TCOD_mouse_t,
    ) -> TCOD_event_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
