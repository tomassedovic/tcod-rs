#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals,
         missing_copy_implementations)]
extern crate libc;

/* automatically generated by rust-bindgen */

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag; 1us];
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
pub struct __mbstate_t {
    pub data: [u64; 16us],
}
impl __mbstate_t {
    pub fn __mbstate8(&mut self) -> *mut [::libc::c_char; 128us] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
#[repr(C)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<extern "C" fn
                                             (arg1: *mut ::libc::c_void)>,
    pub __arg: *mut ::libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
#[repr(C)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56us],
}
#[repr(C)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 40us],
}
#[repr(C)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8us],
}
#[repr(C)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56us],
}
#[repr(C)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8us],
}
#[repr(C)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8us],
}
#[repr(C)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 192us],
}
#[repr(C)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 16us],
}
#[repr(C)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::libc::c_char; 1168us],
}
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16us];
pub type __darwin_uuid_string_t = [::libc::c_char; 37us];
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type size_t = __darwin_size_t;
pub type mbstate_t = __darwin_mbstate_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
pub struct Struct___sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
}
pub enum Struct___sFILEX { }
#[repr(C)]
pub struct Struct___sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _close: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                          -> ::libc::c_int>,
    pub _read: ::std::option::Option<extern "C" fn
                                         (arg1: *mut ::libc::c_void,
                                          arg2: *mut ::libc::c_char,
                                          arg3: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub _seek: ::std::option::Option<extern "C" fn
                                         (arg1: *mut ::libc::c_void,
                                          arg2: fpos_t, arg3: ::libc::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<extern "C" fn
                                          (arg1: *mut ::libc::c_void,
                                           arg2: *const ::libc::c_char,
                                           arg3: ::libc::c_int)
                                          -> ::libc::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar; 3us],
    pub _nbuf: [::libc::c_uchar; 1us],
    pub _lb: Struct___sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: fpos_t,
}
pub type FILE = Struct___sFILE;
pub type off_t = __darwin_off_t;
pub type ssize_t = __darwin_ssize_t;
#[repr(C)]
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::libc::c_long,
}
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *mut ::libc::c_char,
}
pub type wint_t = __darwin_wint_t;
pub type wctype_t = __darwin_wctype_t;
#[repr(C)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[repr(C)]
pub struct _RuneRange {
    pub __nranges: ::libc::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[repr(C)]
pub struct _RuneCharClass {
    pub __name: [::libc::c_char; 14us],
    pub __mask: __uint32_t,
}
#[repr(C)]
pub struct _RuneLocale {
    pub __magic: [::libc::c_char; 8us],
    pub __encoding: [::libc::c_char; 32us],
    pub __sgetrune: ::std::option::Option<extern "C" fn
                                              (arg1: *const ::libc::c_char,
                                               arg2: __darwin_size_t,
                                               arg3:
                                                   *mut *const ::libc::c_char)
                                              -> __darwin_rune_t>,
    pub __sputrune: ::std::option::Option<extern "C" fn
                                              (arg1: __darwin_rune_t,
                                               arg2: *mut ::libc::c_char,
                                               arg3: __darwin_size_t,
                                               arg4: *mut *mut ::libc::c_char)
                                              -> ::libc::c_int>,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256us],
    pub __maplower: [__darwin_rune_t; 256us],
    pub __mapupper: [__darwin_rune_t; 256us],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::libc::c_void,
    pub __variable_len: ::libc::c_int,
    pub __ncharclasses: ::libc::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = int64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::libc::c_ulong;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::libc::c_char;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::libc::c_int;
#[repr(C)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t; 32us],
}
pub type fd_set = Struct_fd_set;
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type idtype_t = ::libc::c_uint;
pub static P_ALL: ::libc::c_uint = 0;
pub static P_PID: ::libc::c_uint = 1;
pub static P_PGID: ::libc::c_uint = 2;
pub type sig_atomic_t = ::libc::c_int;
#[repr(C)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::libc::c_uint,
    pub __ebx: ::libc::c_uint,
    pub __ecx: ::libc::c_uint,
    pub __edx: ::libc::c_uint,
    pub __edi: ::libc::c_uint,
    pub __esi: ::libc::c_uint,
    pub __ebp: ::libc::c_uint,
    pub __esp: ::libc::c_uint,
    pub __ss: ::libc::c_uint,
    pub __eflags: ::libc::c_uint,
    pub __eip: ::libc::c_uint,
    pub __cs: ::libc::c_uint,
    pub __ds: ::libc::c_uint,
    pub __es: ::libc::c_uint,
    pub __fs: ::libc::c_uint,
    pub __gs: ::libc::c_uint,
}
#[repr(C)]
pub struct Struct___darwin_fp_control {
    pub __invalid: ::libc::c_ushort,
    pub __denorm: ::libc::c_ushort,
    pub __zdiv: ::libc::c_ushort,
    pub __ovrfl: ::libc::c_ushort,
    pub __undfl: ::libc::c_ushort,
    pub __precis: ::libc::c_ushort,
    pub unnamed_field1: ::libc::c_ushort,
    pub __pc: ::libc::c_ushort,
    pub __rc: ::libc::c_ushort,
    pub unnamed_field2: ::libc::c_ushort,
    pub unnamed_field3: ::libc::c_ushort,
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
pub struct Struct___darwin_fp_status {
    pub __invalid: ::libc::c_ushort,
    pub __denorm: ::libc::c_ushort,
    pub __zdiv: ::libc::c_ushort,
    pub __ovrfl: ::libc::c_ushort,
    pub __undfl: ::libc::c_ushort,
    pub __precis: ::libc::c_ushort,
    pub __stkflt: ::libc::c_ushort,
    pub __errsumm: ::libc::c_ushort,
    pub __c0: ::libc::c_ushort,
    pub __c1: ::libc::c_ushort,
    pub __c2: ::libc::c_ushort,
    pub __tos: ::libc::c_ushort,
    pub __c3: ::libc::c_ushort,
    pub __busy: ::libc::c_ushort,
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::libc::c_char; 10us],
    pub __mmst_rsrv: [::libc::c_char; 6us],
}
#[repr(C)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::libc::c_char; 16us],
}
#[repr(C)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::libc::c_int; 2us],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224us],
    pub __fpu_reserved1: ::libc::c_int,
}
#[repr(C)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::libc::c_int; 2us],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224us],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64us],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
#[repr(C)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[repr(C)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::libc::c_uint,
    pub __dr1: ::libc::c_uint,
    pub __dr2: ::libc::c_uint,
    pub __dr3: ::libc::c_uint,
    pub __dr4: ::libc::c_uint,
    pub __dr5: ::libc::c_uint,
    pub __dr6: ::libc::c_uint,
    pub __dr7: ::libc::c_uint,
}
#[repr(C)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[repr(C)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::libc::c_int; 2us],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96us],
    pub __fpu_reserved1: ::libc::c_int,
}
#[repr(C)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::libc::c_int; 2us],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96us],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64us],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
#[repr(C)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[repr(C)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[repr(C)]
pub struct Struct___darwin_mcontext32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_float_state,
}
#[repr(C)]
pub struct Struct___darwin_mcontext_avx32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_avx_state,
}
#[repr(C)]
pub struct Struct___darwin_mcontext64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_float_state64,
}
#[repr(C)]
pub struct Struct___darwin_mcontext_avx64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_avx_state64,
}
pub type mcontext_t = *mut Struct___darwin_mcontext64;
#[repr(C)]
pub struct Struct___darwin_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::libc::c_int,
}
pub type stack_t = Struct___darwin_sigaltstack;
#[repr(C)]
pub struct Struct___darwin_ucontext {
    pub uc_onstack: ::libc::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct___darwin_sigaltstack,
    pub uc_link: *mut Struct___darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct___darwin_mcontext64,
}
pub type ucontext_t = Struct___darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
pub struct Union_sigval {
    pub data: [u64; 1us],
}
impl Union_sigval {
    pub fn sival_int(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_sigevent {
    pub sigev_notify: ::libc::c_int,
    pub sigev_signo: ::libc::c_int,
    pub sigev_value: Union_sigval,
    pub sigev_notify_function: ::std::option::Option<extern "C" fn
                                                         (arg1:
                                                              Union_sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[repr(C)]
pub struct Struct___siginfo {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::libc::c_int,
    pub si_addr: *mut ::libc::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::libc::c_long,
    pub __pad: [::libc::c_ulong; 7us],
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
pub struct Union___sigaction_u {
    pub data: [u64; 1us],
}
impl Union___sigaction_u {
    pub fn __sa_handler(&mut self) ->
     *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)> {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __sa_sigaction(&mut self) ->
     *mut ::std::option::Option<extern "C" fn
                                    (arg1: ::libc::c_int,
                                     arg2: *mut Struct___siginfo,
                                     arg3: *mut ::libc::c_void)> {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<extern "C" fn
                                            (arg1: *mut ::libc::c_void,
                                             arg2: ::libc::c_int,
                                             arg3: ::libc::c_int,
                                             arg4: *mut siginfo_t,
                                             arg5: *mut ::libc::c_void)>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
#[repr(C)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
pub type sig_t = ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)>;
#[repr(C)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)>,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
#[repr(C)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_char,
    pub ss_onstack: ::libc::c_int,
}
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
#[repr(C)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
pub type rlim_t = __uint64_t;
#[repr(C)]
pub struct Struct_rusage {
    pub ru_utime: Struct_timeval,
    pub ru_stime: Struct_timeval,
    pub ru_maxrss: ::libc::c_long,
    pub ru_ixrss: ::libc::c_long,
    pub ru_idrss: ::libc::c_long,
    pub ru_isrss: ::libc::c_long,
    pub ru_minflt: ::libc::c_long,
    pub ru_majflt: ::libc::c_long,
    pub ru_nswap: ::libc::c_long,
    pub ru_inblock: ::libc::c_long,
    pub ru_oublock: ::libc::c_long,
    pub ru_msgsnd: ::libc::c_long,
    pub ru_msgrcv: ::libc::c_long,
    pub ru_nsignals: ::libc::c_long,
    pub ru_nvcsw: ::libc::c_long,
    pub ru_nivcsw: ::libc::c_long,
}
pub type rusage_info_t = *mut ::libc::c_void;
#[repr(C)]
pub struct Struct_rusage_info_v0 {
    pub ri_uuid: [uint8_t; 16us],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
}
#[repr(C)]
pub struct Struct_rusage_info_v1 {
    pub ri_uuid: [uint8_t; 16us],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
}
#[repr(C)]
pub struct Struct_rusage_info_v2 {
    pub ri_uuid: [uint8_t; 16us],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
}
#[repr(C)]
pub struct Struct_rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[repr(C)]
pub struct Struct_proc_rlimit_control_wakeupmon {
    pub wm_flags: uint32_t,
    pub wm_rate: int32_t,
}
#[repr(C)]
pub struct Union_wait {
    pub data: [u32; 1us],
}
impl Union_wait {
    pub fn w_status(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn w_T(&mut self) -> *mut Struct_Unnamed1 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn w_S(&mut self) -> *mut Struct_Unnamed2 {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_Unnamed1 {
    pub w_Termsig: ::libc::c_uint,
    pub w_Coredump: ::libc::c_uint,
    pub w_Retcode: ::libc::c_uint,
    pub w_Filler: ::libc::c_uint,
}
#[repr(C)]
pub struct Struct_Unnamed2 {
    pub w_Stopval: ::libc::c_uint,
    pub w_Stopsig: ::libc::c_uint,
    pub w_Filler: ::libc::c_uint,
}
#[repr(C)]
pub struct div_t {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
#[repr(C)]
pub struct ldiv_t {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
#[repr(C)]
pub struct lldiv_t {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
pub type ptrdiff_t = ::libc::c_long;
#[repr(C)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
pub type SDL_bool = ::libc::c_uint;
pub static SDL_FALSE: ::libc::c_uint = 0;
pub static SDL_TRUE: ::libc::c_uint = 1;
pub type Sint8 = int8_t;
pub type Uint8 = uint8_t;
pub type Sint16 = int16_t;
pub type Uint16 = uint16_t;
pub type Sint32 = int32_t;
pub type Uint32 = uint32_t;
pub type Sint64 = int64_t;
pub type Uint64 = uint64_t;
pub type SDL_dummy_uint8 = [::libc::c_int; 1us];
pub type SDL_dummy_sint8 = [::libc::c_int; 1us];
pub type SDL_dummy_uint16 = [::libc::c_int; 1us];
pub type SDL_dummy_sint16 = [::libc::c_int; 1us];
pub type SDL_dummy_uint32 = [::libc::c_int; 1us];
pub type SDL_dummy_sint32 = [::libc::c_int; 1us];
pub type SDL_dummy_uint64 = [::libc::c_int; 1us];
pub type SDL_dummy_sint64 = [::libc::c_int; 1us];
pub type SDL_DUMMY_ENUM = ::libc::c_uint;
pub static DUMMY_ENUM_VALUE: ::libc::c_uint = 0;
pub type SDL_dummy_enum = [::libc::c_int; 1us];
pub enum Struct__SDL_iconv_t { }
pub type SDL_iconv_t = *mut Struct__SDL_iconv_t;
pub type SDL_errorcode = ::libc::c_uint;
pub static SDL_ENOMEM: ::libc::c_uint = 0;
pub static SDL_EFREAD: ::libc::c_uint = 1;
pub static SDL_EFWRITE: ::libc::c_uint = 2;
pub static SDL_EFSEEK: ::libc::c_uint = 3;
pub static SDL_UNSUPPORTED: ::libc::c_uint = 4;
pub static SDL_LASTERROR: ::libc::c_uint = 5;
pub enum Struct_SDL_mutex { }
pub type SDL_mutex = Struct_SDL_mutex;
pub enum Struct_SDL_semaphore { }
pub type SDL_sem = Struct_SDL_semaphore;
pub enum Struct_SDL_cond { }
pub type SDL_cond = Struct_SDL_cond;
pub enum Struct_SDL_Thread { }
pub type SDL_Thread = Struct_SDL_Thread;
#[repr(C)]
pub struct Struct_SDL_RWops {
    pub seek: ::std::option::Option<extern "C" fn
                                        (arg1: *mut Struct_SDL_RWops,
                                         arg2: ::libc::c_int,
                                         arg3: ::libc::c_int)
                                        -> ::libc::c_int>,
    pub read: ::std::option::Option<extern "C" fn
                                        (arg1: *mut Struct_SDL_RWops,
                                         arg2: *mut ::libc::c_void,
                                         arg3: ::libc::c_int,
                                         arg4: ::libc::c_int)
                                        -> ::libc::c_int>,
    pub write: ::std::option::Option<extern "C" fn
                                         (arg1: *mut Struct_SDL_RWops,
                                          arg2: *const ::libc::c_void,
                                          arg3: ::libc::c_int,
                                          arg4: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub close: ::std::option::Option<extern "C" fn
                                         (arg1: *mut Struct_SDL_RWops)
                                         -> ::libc::c_int>,
    pub _type: Uint32,
    pub hidden: Union_Unnamed3,
}
#[repr(C)]
pub struct Union_Unnamed3 {
    pub data: [u64; 3us],
}
impl Union_Unnamed3 {
    pub fn stdio(&mut self) -> *mut Struct_Unnamed4 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn mem(&mut self) -> *mut Struct_Unnamed5 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn unknown(&mut self) -> *mut Struct_Unnamed6 {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_Unnamed4 {
    pub autoclose: ::libc::c_int,
    pub fp: *mut FILE,
}
#[repr(C)]
pub struct Struct_Unnamed5 {
    pub base: *mut Uint8,
    pub here: *mut Uint8,
    pub stop: *mut Uint8,
}
#[repr(C)]
pub struct Struct_Unnamed6 {
    pub data1: *mut ::libc::c_void,
}
pub type SDL_RWops = Struct_SDL_RWops;
#[repr(C)]
pub struct Struct_SDL_AudioSpec {
    pub freq: ::libc::c_int,
    pub format: Uint16,
    pub channels: Uint8,
    pub silence: Uint8,
    pub samples: Uint16,
    pub padding: Uint16,
    pub size: Uint32,
    pub callback: ::std::option::Option<extern "C" fn
                                            (arg1: *mut ::libc::c_void,
                                             arg2: *mut Uint8,
                                             arg3: ::libc::c_int)>,
    pub userdata: *mut ::libc::c_void,
}
pub type SDL_AudioSpec = Struct_SDL_AudioSpec;
#[repr(C)]
pub struct Struct_SDL_AudioCVT {
    pub needed: ::libc::c_int,
    pub src_format: Uint16,
    pub dst_format: Uint16,
    pub rate_incr: ::libc::c_double,
    pub buf: *mut Uint8,
    pub len: ::libc::c_int,
    pub len_cvt: ::libc::c_int,
    pub len_mult: ::libc::c_int,
    pub len_ratio: ::libc::c_double,
    pub filters: [::std::option::Option<extern "C" fn
                                            (arg1: *mut Struct_SDL_AudioCVT,
                                             arg2: Uint16)>; 10us],
    pub filter_index: ::libc::c_int,
}
pub type SDL_AudioCVT = Struct_SDL_AudioCVT;
pub type SDL_audiostatus = ::libc::c_uint;
pub static SDL_AUDIO_STOPPED: ::libc::c_uint = 0;
pub static SDL_AUDIO_PLAYING: ::libc::c_uint = 1;
pub static SDL_AUDIO_PAUSED: ::libc::c_uint = 2;
pub type CDstatus = ::libc::c_int;
pub static CD_TRAYEMPTY: ::libc::c_int = 0;
pub static CD_STOPPED: ::libc::c_int = 1;
pub static CD_PLAYING: ::libc::c_int = 2;
pub static CD_PAUSED: ::libc::c_int = 3;
pub static CD_ERROR: ::libc::c_int = -1;
#[repr(C)]
pub struct Struct_SDL_CDtrack {
    pub id: Uint8,
    pub _type: Uint8,
    pub unused: Uint16,
    pub length: Uint32,
    pub offset: Uint32,
}
pub type SDL_CDtrack = Struct_SDL_CDtrack;
#[repr(C)]
pub struct Struct_SDL_CD {
    pub id: ::libc::c_int,
    pub status: CDstatus,
    pub numtracks: ::libc::c_int,
    pub cur_track: ::libc::c_int,
    pub cur_frame: ::libc::c_int,
    pub track: [SDL_CDtrack; 100us],
}
pub type SDL_CD = Struct_SDL_CD;
pub type SDLKey = ::libc::c_uint;
pub const SDLK_UNKNOWN: ::libc::c_uint = 0;
pub const SDLK_FIRST: ::libc::c_uint = 0;
pub const SDLK_BACKSPACE: ::libc::c_uint = 8;
pub const SDLK_TAB: ::libc::c_uint = 9;
pub const SDLK_CLEAR: ::libc::c_uint = 12;
pub const SDLK_RETURN: ::libc::c_uint = 13;
pub const SDLK_PAUSE: ::libc::c_uint = 19;
pub const SDLK_ESCAPE: ::libc::c_uint = 27;
pub const SDLK_SPACE: ::libc::c_uint = 32;
pub const SDLK_EXCLAIM: ::libc::c_uint = 33;
pub const SDLK_QUOTEDBL: ::libc::c_uint = 34;
pub const SDLK_HASH: ::libc::c_uint = 35;
pub const SDLK_DOLLAR: ::libc::c_uint = 36;
pub const SDLK_AMPERSAND: ::libc::c_uint = 38;
pub const SDLK_QUOTE: ::libc::c_uint = 39;
pub const SDLK_LEFTPAREN: ::libc::c_uint = 40;
pub const SDLK_RIGHTPAREN: ::libc::c_uint = 41;
pub const SDLK_ASTERISK: ::libc::c_uint = 42;
pub const SDLK_PLUS: ::libc::c_uint = 43;
pub const SDLK_COMMA: ::libc::c_uint = 44;
pub const SDLK_MINUS: ::libc::c_uint = 45;
pub const SDLK_PERIOD: ::libc::c_uint = 46;
pub const SDLK_SLASH: ::libc::c_uint = 47;
pub const SDLK_0: ::libc::c_uint = 48;
pub const SDLK_1: ::libc::c_uint = 49;
pub const SDLK_2: ::libc::c_uint = 50;
pub const SDLK_3: ::libc::c_uint = 51;
pub const SDLK_4: ::libc::c_uint = 52;
pub const SDLK_5: ::libc::c_uint = 53;
pub const SDLK_6: ::libc::c_uint = 54;
pub const SDLK_7: ::libc::c_uint = 55;
pub const SDLK_8: ::libc::c_uint = 56;
pub const SDLK_9: ::libc::c_uint = 57;
pub const SDLK_COLON: ::libc::c_uint = 58;
pub const SDLK_SEMICOLON: ::libc::c_uint = 59;
pub const SDLK_LESS: ::libc::c_uint = 60;
pub const SDLK_EQUALS: ::libc::c_uint = 61;
pub const SDLK_GREATER: ::libc::c_uint = 62;
pub const SDLK_QUESTION: ::libc::c_uint = 63;
pub const SDLK_AT: ::libc::c_uint = 64;
pub const SDLK_LEFTBRACKET: ::libc::c_uint = 91;
pub const SDLK_BACKSLASH: ::libc::c_uint = 92;
pub const SDLK_RIGHTBRACKET: ::libc::c_uint = 93;
pub const SDLK_CARET: ::libc::c_uint = 94;
pub const SDLK_UNDERSCORE: ::libc::c_uint = 95;
pub const SDLK_BACKQUOTE: ::libc::c_uint = 96;
pub const SDLK_a: ::libc::c_uint = 97;
pub const SDLK_b: ::libc::c_uint = 98;
pub const SDLK_c: ::libc::c_uint = 99;
pub const SDLK_d: ::libc::c_uint = 100;
pub const SDLK_e: ::libc::c_uint = 101;
pub const SDLK_f: ::libc::c_uint = 102;
pub const SDLK_g: ::libc::c_uint = 103;
pub const SDLK_h: ::libc::c_uint = 104;
pub const SDLK_i: ::libc::c_uint = 105;
pub const SDLK_j: ::libc::c_uint = 106;
pub const SDLK_k: ::libc::c_uint = 107;
pub const SDLK_l: ::libc::c_uint = 108;
pub const SDLK_m: ::libc::c_uint = 109;
pub const SDLK_n: ::libc::c_uint = 110;
pub const SDLK_o: ::libc::c_uint = 111;
pub const SDLK_p: ::libc::c_uint = 112;
pub const SDLK_q: ::libc::c_uint = 113;
pub const SDLK_r: ::libc::c_uint = 114;
pub const SDLK_s: ::libc::c_uint = 115;
pub const SDLK_t: ::libc::c_uint = 116;
pub const SDLK_u: ::libc::c_uint = 117;
pub const SDLK_v: ::libc::c_uint = 118;
pub const SDLK_w: ::libc::c_uint = 119;
pub const SDLK_x: ::libc::c_uint = 120;
pub const SDLK_y: ::libc::c_uint = 121;
pub const SDLK_z: ::libc::c_uint = 122;
pub const SDLK_DELETE: ::libc::c_uint = 127;
pub const SDLK_WORLD_0: ::libc::c_uint = 160;
pub const SDLK_WORLD_1: ::libc::c_uint = 161;
pub const SDLK_WORLD_2: ::libc::c_uint = 162;
pub const SDLK_WORLD_3: ::libc::c_uint = 163;
pub const SDLK_WORLD_4: ::libc::c_uint = 164;
pub const SDLK_WORLD_5: ::libc::c_uint = 165;
pub const SDLK_WORLD_6: ::libc::c_uint = 166;
pub const SDLK_WORLD_7: ::libc::c_uint = 167;
pub const SDLK_WORLD_8: ::libc::c_uint = 168;
pub const SDLK_WORLD_9: ::libc::c_uint = 169;
pub const SDLK_WORLD_10: ::libc::c_uint = 170;
pub const SDLK_WORLD_11: ::libc::c_uint = 171;
pub const SDLK_WORLD_12: ::libc::c_uint = 172;
pub const SDLK_WORLD_13: ::libc::c_uint = 173;
pub const SDLK_WORLD_14: ::libc::c_uint = 174;
pub const SDLK_WORLD_15: ::libc::c_uint = 175;
pub const SDLK_WORLD_16: ::libc::c_uint = 176;
pub const SDLK_WORLD_17: ::libc::c_uint = 177;
pub const SDLK_WORLD_18: ::libc::c_uint = 178;
pub const SDLK_WORLD_19: ::libc::c_uint = 179;
pub const SDLK_WORLD_20: ::libc::c_uint = 180;
pub const SDLK_WORLD_21: ::libc::c_uint = 181;
pub const SDLK_WORLD_22: ::libc::c_uint = 182;
pub const SDLK_WORLD_23: ::libc::c_uint = 183;
pub const SDLK_WORLD_24: ::libc::c_uint = 184;
pub const SDLK_WORLD_25: ::libc::c_uint = 185;
pub const SDLK_WORLD_26: ::libc::c_uint = 186;
pub const SDLK_WORLD_27: ::libc::c_uint = 187;
pub const SDLK_WORLD_28: ::libc::c_uint = 188;
pub const SDLK_WORLD_29: ::libc::c_uint = 189;
pub const SDLK_WORLD_30: ::libc::c_uint = 190;
pub const SDLK_WORLD_31: ::libc::c_uint = 191;
pub const SDLK_WORLD_32: ::libc::c_uint = 192;
pub const SDLK_WORLD_33: ::libc::c_uint = 193;
pub const SDLK_WORLD_34: ::libc::c_uint = 194;
pub const SDLK_WORLD_35: ::libc::c_uint = 195;
pub const SDLK_WORLD_36: ::libc::c_uint = 196;
pub const SDLK_WORLD_37: ::libc::c_uint = 197;
pub const SDLK_WORLD_38: ::libc::c_uint = 198;
pub const SDLK_WORLD_39: ::libc::c_uint = 199;
pub const SDLK_WORLD_40: ::libc::c_uint = 200;
pub const SDLK_WORLD_41: ::libc::c_uint = 201;
pub const SDLK_WORLD_42: ::libc::c_uint = 202;
pub const SDLK_WORLD_43: ::libc::c_uint = 203;
pub const SDLK_WORLD_44: ::libc::c_uint = 204;
pub const SDLK_WORLD_45: ::libc::c_uint = 205;
pub const SDLK_WORLD_46: ::libc::c_uint = 206;
pub const SDLK_WORLD_47: ::libc::c_uint = 207;
pub const SDLK_WORLD_48: ::libc::c_uint = 208;
pub const SDLK_WORLD_49: ::libc::c_uint = 209;
pub const SDLK_WORLD_50: ::libc::c_uint = 210;
pub const SDLK_WORLD_51: ::libc::c_uint = 211;
pub const SDLK_WORLD_52: ::libc::c_uint = 212;
pub const SDLK_WORLD_53: ::libc::c_uint = 213;
pub const SDLK_WORLD_54: ::libc::c_uint = 214;
pub const SDLK_WORLD_55: ::libc::c_uint = 215;
pub const SDLK_WORLD_56: ::libc::c_uint = 216;
pub const SDLK_WORLD_57: ::libc::c_uint = 217;
pub const SDLK_WORLD_58: ::libc::c_uint = 218;
pub const SDLK_WORLD_59: ::libc::c_uint = 219;
pub const SDLK_WORLD_60: ::libc::c_uint = 220;
pub const SDLK_WORLD_61: ::libc::c_uint = 221;
pub const SDLK_WORLD_62: ::libc::c_uint = 222;
pub const SDLK_WORLD_63: ::libc::c_uint = 223;
pub const SDLK_WORLD_64: ::libc::c_uint = 224;
pub const SDLK_WORLD_65: ::libc::c_uint = 225;
pub const SDLK_WORLD_66: ::libc::c_uint = 226;
pub const SDLK_WORLD_67: ::libc::c_uint = 227;
pub const SDLK_WORLD_68: ::libc::c_uint = 228;
pub const SDLK_WORLD_69: ::libc::c_uint = 229;
pub const SDLK_WORLD_70: ::libc::c_uint = 230;
pub const SDLK_WORLD_71: ::libc::c_uint = 231;
pub const SDLK_WORLD_72: ::libc::c_uint = 232;
pub const SDLK_WORLD_73: ::libc::c_uint = 233;
pub const SDLK_WORLD_74: ::libc::c_uint = 234;
pub const SDLK_WORLD_75: ::libc::c_uint = 235;
pub const SDLK_WORLD_76: ::libc::c_uint = 236;
pub const SDLK_WORLD_77: ::libc::c_uint = 237;
pub const SDLK_WORLD_78: ::libc::c_uint = 238;
pub const SDLK_WORLD_79: ::libc::c_uint = 239;
pub const SDLK_WORLD_80: ::libc::c_uint = 240;
pub const SDLK_WORLD_81: ::libc::c_uint = 241;
pub const SDLK_WORLD_82: ::libc::c_uint = 242;
pub const SDLK_WORLD_83: ::libc::c_uint = 243;
pub const SDLK_WORLD_84: ::libc::c_uint = 244;
pub const SDLK_WORLD_85: ::libc::c_uint = 245;
pub const SDLK_WORLD_86: ::libc::c_uint = 246;
pub const SDLK_WORLD_87: ::libc::c_uint = 247;
pub const SDLK_WORLD_88: ::libc::c_uint = 248;
pub const SDLK_WORLD_89: ::libc::c_uint = 249;
pub const SDLK_WORLD_90: ::libc::c_uint = 250;
pub const SDLK_WORLD_91: ::libc::c_uint = 251;
pub const SDLK_WORLD_92: ::libc::c_uint = 252;
pub const SDLK_WORLD_93: ::libc::c_uint = 253;
pub const SDLK_WORLD_94: ::libc::c_uint = 254;
pub const SDLK_WORLD_95: ::libc::c_uint = 255;
pub const SDLK_KP0: ::libc::c_uint = 256;
pub const SDLK_KP1: ::libc::c_uint = 257;
pub const SDLK_KP2: ::libc::c_uint = 258;
pub const SDLK_KP3: ::libc::c_uint = 259;
pub const SDLK_KP4: ::libc::c_uint = 260;
pub const SDLK_KP5: ::libc::c_uint = 261;
pub const SDLK_KP6: ::libc::c_uint = 262;
pub const SDLK_KP7: ::libc::c_uint = 263;
pub const SDLK_KP8: ::libc::c_uint = 264;
pub const SDLK_KP9: ::libc::c_uint = 265;
pub const SDLK_KP_PERIOD: ::libc::c_uint = 266;
pub const SDLK_KP_DIVIDE: ::libc::c_uint = 267;
pub const SDLK_KP_MULTIPLY: ::libc::c_uint = 268;
pub const SDLK_KP_MINUS: ::libc::c_uint = 269;
pub const SDLK_KP_PLUS: ::libc::c_uint = 270;
pub const SDLK_KP_ENTER: ::libc::c_uint = 271;
pub const SDLK_KP_EQUALS: ::libc::c_uint = 272;
pub const SDLK_UP: ::libc::c_uint = 273;
pub const SDLK_DOWN: ::libc::c_uint = 274;
pub const SDLK_RIGHT: ::libc::c_uint = 275;
pub const SDLK_LEFT: ::libc::c_uint = 276;
pub const SDLK_INSERT: ::libc::c_uint = 277;
pub const SDLK_HOME: ::libc::c_uint = 278;
pub const SDLK_END: ::libc::c_uint = 279;
pub const SDLK_PAGEUP: ::libc::c_uint = 280;
pub const SDLK_PAGEDOWN: ::libc::c_uint = 281;
pub const SDLK_F1: ::libc::c_uint = 282;
pub const SDLK_F2: ::libc::c_uint = 283;
pub const SDLK_F3: ::libc::c_uint = 284;
pub const SDLK_F4: ::libc::c_uint = 285;
pub const SDLK_F5: ::libc::c_uint = 286;
pub const SDLK_F6: ::libc::c_uint = 287;
pub const SDLK_F7: ::libc::c_uint = 288;
pub const SDLK_F8: ::libc::c_uint = 289;
pub const SDLK_F9: ::libc::c_uint = 290;
pub const SDLK_F10: ::libc::c_uint = 291;
pub const SDLK_F11: ::libc::c_uint = 292;
pub const SDLK_F12: ::libc::c_uint = 293;
pub const SDLK_F13: ::libc::c_uint = 294;
pub const SDLK_F14: ::libc::c_uint = 295;
pub const SDLK_F15: ::libc::c_uint = 296;
pub const SDLK_NUMLOCK: ::libc::c_uint = 300;
pub const SDLK_CAPSLOCK: ::libc::c_uint = 301;
pub const SDLK_SCROLLOCK: ::libc::c_uint = 302;
pub const SDLK_RSHIFT: ::libc::c_uint = 303;
pub const SDLK_LSHIFT: ::libc::c_uint = 304;
pub const SDLK_RCTRL: ::libc::c_uint = 305;
pub const SDLK_LCTRL: ::libc::c_uint = 306;
pub const SDLK_RALT: ::libc::c_uint = 307;
pub const SDLK_LALT: ::libc::c_uint = 308;
pub const SDLK_RMETA: ::libc::c_uint = 309;
pub const SDLK_LMETA: ::libc::c_uint = 310;
pub const SDLK_LSUPER: ::libc::c_uint = 311;
pub const SDLK_RSUPER: ::libc::c_uint = 312;
pub const SDLK_MODE: ::libc::c_uint = 313;
pub const SDLK_COMPOSE: ::libc::c_uint = 314;
pub const SDLK_HELP: ::libc::c_uint = 315;
pub const SDLK_PRINT: ::libc::c_uint = 316;
pub const SDLK_SYSREQ: ::libc::c_uint = 317;
pub const SDLK_BREAK: ::libc::c_uint = 318;
pub const SDLK_MENU: ::libc::c_uint = 319;
pub const SDLK_POWER: ::libc::c_uint = 320;
pub const SDLK_EURO: ::libc::c_uint = 321;
pub const SDLK_UNDO: ::libc::c_uint = 322;
pub const SDLK_LAST: ::libc::c_uint = 323;
pub type SDLMod = ::libc::c_uint;
pub const KMOD_NONE: ::libc::c_uint = 0;
pub const KMOD_LSHIFT: ::libc::c_uint = 1;
pub const KMOD_RSHIFT: ::libc::c_uint = 2;
pub const KMOD_LCTRL: ::libc::c_uint = 64;
pub const KMOD_RCTRL: ::libc::c_uint = 128;
pub const KMOD_LALT: ::libc::c_uint = 256;
pub const KMOD_RALT: ::libc::c_uint = 512;
pub const KMOD_LMETA: ::libc::c_uint = 1024;
pub const KMOD_RMETA: ::libc::c_uint = 2048;
pub const KMOD_NUM: ::libc::c_uint = 4096;
pub const KMOD_CAPS: ::libc::c_uint = 8192;
pub const KMOD_MODE: ::libc::c_uint = 16384;
pub const KMOD_RESERVED: ::libc::c_uint = 32768;
#[repr(C)]
pub struct Struct_SDL_keysym {
    pub scancode: Uint8,
    pub sym: SDLKey,
    pub _mod: SDLMod,
    pub unicode: Uint16,
}
pub type SDL_keysym = Struct_SDL_keysym;
#[repr(C)]
pub struct Struct_SDL_Rect {
    pub x: Sint16,
    pub y: Sint16,
    pub w: Uint16,
    pub h: Uint16,
}
pub type SDL_Rect = Struct_SDL_Rect;
#[repr(C)]
pub struct Struct_SDL_Color {
    pub r: Uint8,
    pub g: Uint8,
    pub b: Uint8,
    pub unused: Uint8,
}
pub type SDL_Color = Struct_SDL_Color;
#[repr(C)]
pub struct Struct_SDL_Palette {
    pub ncolors: ::libc::c_int,
    pub colors: *mut SDL_Color,
}
pub type SDL_Palette = Struct_SDL_Palette;
#[repr(C)]
pub struct Struct_SDL_PixelFormat {
    pub palette: *mut SDL_Palette,
    pub BitsPerPixel: Uint8,
    pub BytesPerPixel: Uint8,
    pub Rloss: Uint8,
    pub Gloss: Uint8,
    pub Bloss: Uint8,
    pub Aloss: Uint8,
    pub Rshift: Uint8,
    pub Gshift: Uint8,
    pub Bshift: Uint8,
    pub Ashift: Uint8,
    pub Rmask: Uint32,
    pub Gmask: Uint32,
    pub Bmask: Uint32,
    pub Amask: Uint32,
    pub colorkey: Uint32,
    pub alpha: Uint8,
}
pub type SDL_PixelFormat = Struct_SDL_PixelFormat;
#[repr(C)]
pub struct Struct_SDL_Surface {
    pub flags: Uint32,
    pub format: *mut SDL_PixelFormat,
    pub w: ::libc::c_int,
    pub h: ::libc::c_int,
    pub pitch: Uint16,
    pub pixels: *mut ::libc::c_void,
    pub offset: ::libc::c_int,
    pub hwdata: *mut Struct_private_hwdata,
    pub clip_rect: SDL_Rect,
    pub unused1: Uint32,
    pub locked: Uint32,
    pub map: *mut Struct_SDL_BlitMap,
    pub format_version: ::libc::c_uint,
    pub refcount: ::libc::c_int,
}
pub enum Struct_private_hwdata { }
pub enum Struct_SDL_BlitMap { }
pub type SDL_Surface = Struct_SDL_Surface;
pub type SDL_blit =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Struct_SDL_Surface,
                               arg2: *mut SDL_Rect,
                               arg3: *mut Struct_SDL_Surface,
                               arg4: *mut SDL_Rect) -> ::libc::c_int>;
#[repr(C)]
pub struct Struct_SDL_VideoInfo {
    pub hw_available: Uint32,
    pub wm_available: Uint32,
    pub UnusedBits1: Uint32,
    pub UnusedBits2: Uint32,
    pub blit_hw: Uint32,
    pub blit_hw_CC: Uint32,
    pub blit_hw_A: Uint32,
    pub blit_sw: Uint32,
    pub blit_sw_CC: Uint32,
    pub blit_sw_A: Uint32,
    pub blit_fill: Uint32,
    pub UnusedBits3: Uint32,
    pub video_mem: Uint32,
    pub vfmt: *mut SDL_PixelFormat,
    pub current_w: ::libc::c_int,
    pub current_h: ::libc::c_int,
}
pub type SDL_VideoInfo = Struct_SDL_VideoInfo;
#[repr(C)]
pub struct Struct_SDL_Overlay {
    pub format: Uint32,
    pub w: ::libc::c_int,
    pub h: ::libc::c_int,
    pub planes: ::libc::c_int,
    pub pitches: *mut Uint16,
    pub pixels: *mut *mut Uint8,
    pub hwfuncs: *mut Struct_private_yuvhwfuncs,
    pub hwdata: *mut Struct_private_yuvhwdata,
    pub hw_overlay: Uint32,
    pub UnusedBits: Uint32,
}
pub enum Struct_private_yuvhwfuncs { }
pub enum Struct_private_yuvhwdata { }
pub type SDL_Overlay = Struct_SDL_Overlay;
pub type SDL_GLattr = ::libc::c_uint;
pub const SDL_GL_RED_SIZE: ::libc::c_uint = 0;
pub const SDL_GL_GREEN_SIZE: ::libc::c_uint = 1;
pub const SDL_GL_BLUE_SIZE: ::libc::c_uint = 2;
pub const SDL_GL_ALPHA_SIZE: ::libc::c_uint = 3;
pub const SDL_GL_BUFFER_SIZE: ::libc::c_uint = 4;
pub const SDL_GL_DOUBLEBUFFER: ::libc::c_uint = 5;
pub const SDL_GL_DEPTH_SIZE: ::libc::c_uint = 6;
pub const SDL_GL_STENCIL_SIZE: ::libc::c_uint = 7;
pub const SDL_GL_ACCUM_RED_SIZE: ::libc::c_uint = 8;
pub const SDL_GL_ACCUM_GREEN_SIZE: ::libc::c_uint = 9;
pub const SDL_GL_ACCUM_BLUE_SIZE: ::libc::c_uint = 10;
pub const SDL_GL_ACCUM_ALPHA_SIZE: ::libc::c_uint = 11;
pub const SDL_GL_STEREO: ::libc::c_uint = 12;
pub const SDL_GL_MULTISAMPLEBUFFERS: ::libc::c_uint = 13;
pub const SDL_GL_MULTISAMPLESAMPLES: ::libc::c_uint = 14;
pub const SDL_GL_ACCELERATED_VISUAL: ::libc::c_uint = 15;
pub const SDL_GL_SWAP_CONTROL: ::libc::c_uint = 16;
pub type SDL_GrabMode = ::libc::c_int;
pub const SDL_GRAB_QUERY: ::libc::c_int = -1;
pub const SDL_GRAB_OFF: ::libc::c_int = 0;
pub const SDL_GRAB_ON: ::libc::c_int = 1;
pub const SDL_GRAB_FULLSCREEN: ::libc::c_int = 2;
pub enum Struct_WMcursor { }
pub type WMcursor = Struct_WMcursor;
#[repr(C)]
pub struct Struct_SDL_Cursor {
    pub area: SDL_Rect,
    pub hot_x: Sint16,
    pub hot_y: Sint16,
    pub data: *mut Uint8,
    pub mask: *mut Uint8,
    pub save: [*mut Uint8; 2us],
    pub wm_cursor: *mut WMcursor,
}
pub type SDL_Cursor = Struct_SDL_Cursor;
pub enum Struct__SDL_Joystick { }
pub type SDL_Joystick = Struct__SDL_Joystick;
pub type SDL_EventType = ::libc::c_uint;
pub const SDL_NOEVENT: ::libc::c_uint = 0;
pub const SDL_ACTIVEEVENT: ::libc::c_uint = 1;
pub const SDL_KEYDOWN: ::libc::c_uint = 2;
pub const SDL_KEYUP: ::libc::c_uint = 3;
pub const SDL_MOUSEMOTION: ::libc::c_uint = 4;
pub const SDL_MOUSEBUTTONDOWN: ::libc::c_uint = 5;
pub const SDL_MOUSEBUTTONUP: ::libc::c_uint = 6;
pub const SDL_JOYAXISMOTION: ::libc::c_uint = 7;
pub const SDL_JOYBALLMOTION: ::libc::c_uint = 8;
pub const SDL_JOYHATMOTION: ::libc::c_uint = 9;
pub const SDL_JOYBUTTONDOWN: ::libc::c_uint = 10;
pub const SDL_JOYBUTTONUP: ::libc::c_uint = 11;
pub const SDL_QUIT: ::libc::c_uint = 12;
pub const SDL_SYSWMEVENT: ::libc::c_uint = 13;
pub const SDL_EVENT_RESERVEDA: ::libc::c_uint = 14;
pub const SDL_EVENT_RESERVEDB: ::libc::c_uint = 15;
pub const SDL_VIDEORESIZE: ::libc::c_uint = 16;
pub const SDL_VIDEOEXPOSE: ::libc::c_uint = 17;
pub const SDL_EVENT_RESERVED2: ::libc::c_uint = 18;
pub const SDL_EVENT_RESERVED3: ::libc::c_uint = 19;
pub const SDL_EVENT_RESERVED4: ::libc::c_uint = 20;
pub const SDL_EVENT_RESERVED5: ::libc::c_uint = 21;
pub const SDL_EVENT_RESERVED6: ::libc::c_uint = 22;
pub const SDL_EVENT_RESERVED7: ::libc::c_uint = 23;
pub const SDL_USEREVENT: ::libc::c_uint = 24;
pub const SDL_NUMEVENTS: ::libc::c_uint = 32;
pub type SDL_EventMask = ::libc::c_uint;
pub const SDL_ACTIVEEVENTMASK: ::libc::c_uint = 2;
pub const SDL_KEYDOWNMASK: ::libc::c_uint = 4;
pub const SDL_KEYUPMASK: ::libc::c_uint = 8;
pub const SDL_KEYEVENTMASK: ::libc::c_uint = 12;
pub const SDL_MOUSEMOTIONMASK: ::libc::c_uint = 16;
pub const SDL_MOUSEBUTTONDOWNMASK: ::libc::c_uint = 32;
pub const SDL_MOUSEBUTTONUPMASK: ::libc::c_uint = 64;
pub const SDL_MOUSEEVENTMASK: ::libc::c_uint = 112;
pub const SDL_JOYAXISMOTIONMASK: ::libc::c_uint = 128;
pub const SDL_JOYBALLMOTIONMASK: ::libc::c_uint = 256;
pub const SDL_JOYHATMOTIONMASK: ::libc::c_uint = 512;
pub const SDL_JOYBUTTONDOWNMASK: ::libc::c_uint = 1024;
pub const SDL_JOYBUTTONUPMASK: ::libc::c_uint = 2048;
pub const SDL_JOYEVENTMASK: ::libc::c_uint = 3968;
pub const SDL_VIDEORESIZEMASK: ::libc::c_uint = 65536;
pub const SDL_VIDEOEXPOSEMASK: ::libc::c_uint = 131072;
pub const SDL_QUITMASK: ::libc::c_uint = 4096;
pub const SDL_SYSWMEVENTMASK: ::libc::c_uint = 8192;
#[repr(C)]
pub struct Struct_SDL_ActiveEvent {
    pub _type: Uint8,
    pub gain: Uint8,
    pub state: Uint8,
}
pub type SDL_ActiveEvent = Struct_SDL_ActiveEvent;
#[repr(C)]
pub struct Struct_SDL_KeyboardEvent {
    pub _type: Uint8,
    pub which: Uint8,
    pub state: Uint8,
    pub keysym: SDL_keysym,
}
pub type SDL_KeyboardEvent = Struct_SDL_KeyboardEvent;
#[repr(C)]
pub struct Struct_SDL_MouseMotionEvent {
    pub _type: Uint8,
    pub which: Uint8,
    pub state: Uint8,
    pub x: Uint16,
    pub y: Uint16,
    pub xrel: Sint16,
    pub yrel: Sint16,
}
pub type SDL_MouseMotionEvent = Struct_SDL_MouseMotionEvent;
#[repr(C)]
pub struct Struct_SDL_MouseButtonEvent {
    pub _type: Uint8,
    pub which: Uint8,
    pub button: Uint8,
    pub state: Uint8,
    pub x: Uint16,
    pub y: Uint16,
}
pub type SDL_MouseButtonEvent = Struct_SDL_MouseButtonEvent;
#[repr(C)]
pub struct Struct_SDL_JoyAxisEvent {
    pub _type: Uint8,
    pub which: Uint8,
    pub axis: Uint8,
    pub value: Sint16,
}
pub type SDL_JoyAxisEvent = Struct_SDL_JoyAxisEvent;
#[repr(C)]
pub struct Struct_SDL_JoyBallEvent {
    pub _type: Uint8,
    pub which: Uint8,
    pub ball: Uint8,
    pub xrel: Sint16,
    pub yrel: Sint16,
}
pub type SDL_JoyBallEvent = Struct_SDL_JoyBallEvent;
#[repr(C)]
pub struct Struct_SDL_JoyHatEvent {
    pub _type: Uint8,
    pub which: Uint8,
    pub hat: Uint8,
    pub value: Uint8,
}
pub type SDL_JoyHatEvent = Struct_SDL_JoyHatEvent;
#[repr(C)]
pub struct Struct_SDL_JoyButtonEvent {
    pub _type: Uint8,
    pub which: Uint8,
    pub button: Uint8,
    pub state: Uint8,
}
pub type SDL_JoyButtonEvent = Struct_SDL_JoyButtonEvent;
#[repr(C)]
pub struct Struct_SDL_ResizeEvent {
    pub _type: Uint8,
    pub w: ::libc::c_int,
    pub h: ::libc::c_int,
}
pub type SDL_ResizeEvent = Struct_SDL_ResizeEvent;
#[repr(C)]
pub struct Struct_SDL_ExposeEvent {
    pub _type: Uint8,
}
pub type SDL_ExposeEvent = Struct_SDL_ExposeEvent;
#[repr(C)]
pub struct Struct_SDL_QuitEvent {
    pub _type: Uint8,
}
pub type SDL_QuitEvent = Struct_SDL_QuitEvent;
#[repr(C)]
pub struct Struct_SDL_UserEvent {
    pub _type: Uint8,
    pub code: ::libc::c_int,
    pub data1: *mut ::libc::c_void,
    pub data2: *mut ::libc::c_void,
}
pub type SDL_UserEvent = Struct_SDL_UserEvent;
pub enum Struct_SDL_SysWMmsg { }
pub type SDL_SysWMmsg = Struct_SDL_SysWMmsg;
#[repr(C)]
pub struct Struct_SDL_SysWMEvent {
    pub _type: Uint8,
    pub msg: *mut SDL_SysWMmsg,
}
pub type SDL_SysWMEvent = Struct_SDL_SysWMEvent;
#[repr(C)]
pub struct Union_SDL_Event {
    pub data: [u64; 3us],
}
impl Union_SDL_Event {
    pub fn _type(&mut self) -> *mut Uint8 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn active(&mut self) -> *mut SDL_ActiveEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn key(&mut self) -> *mut SDL_KeyboardEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn motion(&mut self) -> *mut SDL_MouseMotionEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn button(&mut self) -> *mut SDL_MouseButtonEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn jaxis(&mut self) -> *mut SDL_JoyAxisEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn jball(&mut self) -> *mut SDL_JoyBallEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn jhat(&mut self) -> *mut SDL_JoyHatEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn jbutton(&mut self) -> *mut SDL_JoyButtonEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn resize(&mut self) -> *mut SDL_ResizeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn expose(&mut self) -> *mut SDL_ExposeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn quit(&mut self) -> *mut SDL_QuitEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn user(&mut self) -> *mut SDL_UserEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn syswm(&mut self) -> *mut SDL_SysWMEvent {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type SDL_Event = Union_SDL_Event;
pub type SDL_eventaction = ::libc::c_uint;
pub static SDL_ADDEVENT: ::libc::c_uint = 0;
pub static SDL_PEEKEVENT: ::libc::c_uint = 1;
pub static SDL_GETEVENT: ::libc::c_uint = 2;
pub type SDL_EventFilter =
    ::std::option::Option<extern "C" fn(arg1: *const SDL_Event)
                              -> ::libc::c_int>;
pub type SDL_TimerCallback =
    ::std::option::Option<extern "C" fn(arg1: Uint32) -> Uint32>;
pub type SDL_NewTimerCallback =
    ::std::option::Option<extern "C" fn
                              (arg1: Uint32, arg2: *mut ::libc::c_void)
                              -> Uint32>;
pub enum Struct__SDL_TimerID { }
pub type SDL_TimerID = *mut Struct__SDL_TimerID;
#[repr(C)]
pub struct Struct_SDL_version {
    pub major: Uint8,
    pub minor: Uint8,
    pub patch: Uint8,
}
pub type SDL_version = Struct_SDL_version;
pub type uint8 = ::libc::c_uchar;
pub type int8 = ::libc::c_char;
pub type uint16 = ::libc::c_ushort;
pub type int16 = ::libc::c_short;
pub type uint32 = ::libc::c_uint;
pub type int32 = ::libc::c_int;
pub type intptr = ::libc::c_long;
pub type uintptr = ::libc::c_ulong;
pub type _bool = uint8;
pub type TCOD_list_t = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy, PartialEq, Show)]
pub struct TCOD_color_t {
    pub r: uint8,
    pub g: uint8,
    pub b: uint8,
}
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const TCOD_COLOR_RED: ::libc::c_uint = 0;
pub const TCOD_COLOR_FLAME: ::libc::c_uint = 1;
pub const TCOD_COLOR_ORANGE: ::libc::c_uint = 2;
pub const TCOD_COLOR_AMBER: ::libc::c_uint = 3;
pub const TCOD_COLOR_YELLOW: ::libc::c_uint = 4;
pub const TCOD_COLOR_LIME: ::libc::c_uint = 5;
pub const TCOD_COLOR_CHARTREUSE: ::libc::c_uint = 6;
pub const TCOD_COLOR_GREEN: ::libc::c_uint = 7;
pub const TCOD_COLOR_SEA: ::libc::c_uint = 8;
pub const TCOD_COLOR_TURQUOISE: ::libc::c_uint = 9;
pub const TCOD_COLOR_CYAN: ::libc::c_uint = 10;
pub const TCOD_COLOR_SKY: ::libc::c_uint = 11;
pub const TCOD_COLOR_AZURE: ::libc::c_uint = 12;
pub const TCOD_COLOR_BLUE: ::libc::c_uint = 13;
pub const TCOD_COLOR_HAN: ::libc::c_uint = 14;
pub const TCOD_COLOR_VIOLET: ::libc::c_uint = 15;
pub const TCOD_COLOR_PURPLE: ::libc::c_uint = 16;
pub const TCOD_COLOR_FUCHSIA: ::libc::c_uint = 17;
pub const TCOD_COLOR_MAGENTA: ::libc::c_uint = 18;
pub const TCOD_COLOR_PINK: ::libc::c_uint = 19;
pub const TCOD_COLOR_CRIMSON: ::libc::c_uint = 20;
pub const TCOD_COLOR_NB: ::libc::c_uint = 21;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const TCOD_COLOR_DESATURATED: ::libc::c_uint = 0;
pub const TCOD_COLOR_LIGHTEST: ::libc::c_uint = 1;
pub const TCOD_COLOR_LIGHTER: ::libc::c_uint = 2;
pub const TCOD_COLOR_LIGHT: ::libc::c_uint = 3;
pub const TCOD_COLOR_NORMAL: ::libc::c_uint = 4;
pub const TCOD_COLOR_DARK: ::libc::c_uint = 5;
pub const TCOD_COLOR_DARKER: ::libc::c_uint = 6;
pub const TCOD_COLOR_DARKEST: ::libc::c_uint = 7;
pub const TCOD_COLOR_LEVELS: ::libc::c_uint = 8;
pub type TCOD_keycode_t = ::libc::c_uint;
pub const TCODK_NONE: ::libc::c_uint = 0;
pub const TCODK_ESCAPE: ::libc::c_uint = 1;
pub const TCODK_BACKSPACE: ::libc::c_uint = 2;
pub const TCODK_TAB: ::libc::c_uint = 3;
pub const TCODK_ENTER: ::libc::c_uint = 4;
pub const TCODK_SHIFT: ::libc::c_uint = 5;
pub const TCODK_CONTROL: ::libc::c_uint = 6;
pub const TCODK_ALT: ::libc::c_uint = 7;
pub const TCODK_PAUSE: ::libc::c_uint = 8;
pub const TCODK_CAPSLOCK: ::libc::c_uint = 9;
pub const TCODK_PAGEUP: ::libc::c_uint = 10;
pub const TCODK_PAGEDOWN: ::libc::c_uint = 11;
pub const TCODK_END: ::libc::c_uint = 12;
pub const TCODK_HOME: ::libc::c_uint = 13;
pub const TCODK_UP: ::libc::c_uint = 14;
pub const TCODK_LEFT: ::libc::c_uint = 15;
pub const TCODK_RIGHT: ::libc::c_uint = 16;
pub const TCODK_DOWN: ::libc::c_uint = 17;
pub const TCODK_PRINTSCREEN: ::libc::c_uint = 18;
pub const TCODK_INSERT: ::libc::c_uint = 19;
pub const TCODK_DELETE: ::libc::c_uint = 20;
pub const TCODK_LWIN: ::libc::c_uint = 21;
pub const TCODK_RWIN: ::libc::c_uint = 22;
pub const TCODK_APPS: ::libc::c_uint = 23;
pub const TCODK_0: ::libc::c_uint = 24;
pub const TCODK_1: ::libc::c_uint = 25;
pub const TCODK_2: ::libc::c_uint = 26;
pub const TCODK_3: ::libc::c_uint = 27;
pub const TCODK_4: ::libc::c_uint = 28;
pub const TCODK_5: ::libc::c_uint = 29;
pub const TCODK_6: ::libc::c_uint = 30;
pub const TCODK_7: ::libc::c_uint = 31;
pub const TCODK_8: ::libc::c_uint = 32;
pub const TCODK_9: ::libc::c_uint = 33;
pub const TCODK_KP0: ::libc::c_uint = 34;
pub const TCODK_KP1: ::libc::c_uint = 35;
pub const TCODK_KP2: ::libc::c_uint = 36;
pub const TCODK_KP3: ::libc::c_uint = 37;
pub const TCODK_KP4: ::libc::c_uint = 38;
pub const TCODK_KP5: ::libc::c_uint = 39;
pub const TCODK_KP6: ::libc::c_uint = 40;
pub const TCODK_KP7: ::libc::c_uint = 41;
pub const TCODK_KP8: ::libc::c_uint = 42;
pub const TCODK_KP9: ::libc::c_uint = 43;
pub const TCODK_KPADD: ::libc::c_uint = 44;
pub const TCODK_KPSUB: ::libc::c_uint = 45;
pub const TCODK_KPDIV: ::libc::c_uint = 46;
pub const TCODK_KPMUL: ::libc::c_uint = 47;
pub const TCODK_KPDEC: ::libc::c_uint = 48;
pub const TCODK_KPENTER: ::libc::c_uint = 49;
pub const TCODK_F1: ::libc::c_uint = 50;
pub const TCODK_F2: ::libc::c_uint = 51;
pub const TCODK_F3: ::libc::c_uint = 52;
pub const TCODK_F4: ::libc::c_uint = 53;
pub const TCODK_F5: ::libc::c_uint = 54;
pub const TCODK_F6: ::libc::c_uint = 55;
pub const TCODK_F7: ::libc::c_uint = 56;
pub const TCODK_F8: ::libc::c_uint = 57;
pub const TCODK_F9: ::libc::c_uint = 58;
pub const TCODK_F10: ::libc::c_uint = 59;
pub const TCODK_F11: ::libc::c_uint = 60;
pub const TCODK_F12: ::libc::c_uint = 61;
pub const TCODK_NUMLOCK: ::libc::c_uint = 62;
pub const TCODK_SCROLLLOCK: ::libc::c_uint = 63;
pub const TCODK_SPACE: ::libc::c_uint = 64;
pub const TCODK_CHAR: ::libc::c_uint = 65;
#[repr(C)]
pub struct TCOD_key_t {
    pub vk: TCOD_keycode_t,
    pub c: ::libc::c_char,
    pub pressed: _bool,
    pub lalt: _bool,
    pub lctrl: _bool,
    pub ralt: _bool,
    pub rctrl: _bool,
    pub shift: _bool,
}
pub type TCOD_chars_t = ::libc::c_uint;
pub const TCOD_CHAR_HLINE: ::libc::c_uint = 196;
pub const TCOD_CHAR_VLINE: ::libc::c_uint = 179;
pub const TCOD_CHAR_NE: ::libc::c_uint = 191;
pub const TCOD_CHAR_NW: ::libc::c_uint = 218;
pub const TCOD_CHAR_SE: ::libc::c_uint = 217;
pub const TCOD_CHAR_SW: ::libc::c_uint = 192;
pub const TCOD_CHAR_TEEW: ::libc::c_uint = 180;
pub const TCOD_CHAR_TEEE: ::libc::c_uint = 195;
pub const TCOD_CHAR_TEEN: ::libc::c_uint = 193;
pub const TCOD_CHAR_TEES: ::libc::c_uint = 194;
pub const TCOD_CHAR_CROSS: ::libc::c_uint = 197;
pub const TCOD_CHAR_DHLINE: ::libc::c_uint = 205;
pub const TCOD_CHAR_DVLINE: ::libc::c_uint = 186;
pub const TCOD_CHAR_DNE: ::libc::c_uint = 187;
pub const TCOD_CHAR_DNW: ::libc::c_uint = 201;
pub const TCOD_CHAR_DSE: ::libc::c_uint = 188;
pub const TCOD_CHAR_DSW: ::libc::c_uint = 200;
pub const TCOD_CHAR_DTEEW: ::libc::c_uint = 185;
pub const TCOD_CHAR_DTEEE: ::libc::c_uint = 204;
pub const TCOD_CHAR_DTEEN: ::libc::c_uint = 202;
pub const TCOD_CHAR_DTEES: ::libc::c_uint = 203;
pub const TCOD_CHAR_DCROSS: ::libc::c_uint = 206;
pub const TCOD_CHAR_BLOCK1: ::libc::c_uint = 176;
pub const TCOD_CHAR_BLOCK2: ::libc::c_uint = 177;
pub const TCOD_CHAR_BLOCK3: ::libc::c_uint = 178;
pub const TCOD_CHAR_ARROW_N: ::libc::c_uint = 24;
pub const TCOD_CHAR_ARROW_S: ::libc::c_uint = 25;
pub const TCOD_CHAR_ARROW_E: ::libc::c_uint = 26;
pub const TCOD_CHAR_ARROW_W: ::libc::c_uint = 27;
pub const TCOD_CHAR_ARROW2_N: ::libc::c_uint = 30;
pub const TCOD_CHAR_ARROW2_S: ::libc::c_uint = 31;
pub const TCOD_CHAR_ARROW2_E: ::libc::c_uint = 16;
pub const TCOD_CHAR_ARROW2_W: ::libc::c_uint = 17;
pub const TCOD_CHAR_DARROW_H: ::libc::c_uint = 29;
pub const TCOD_CHAR_DARROW_V: ::libc::c_uint = 18;
pub const TCOD_CHAR_CHECKBOX_UNSET: ::libc::c_uint = 224;
pub const TCOD_CHAR_CHECKBOX_SET: ::libc::c_uint = 225;
pub const TCOD_CHAR_RADIO_UNSET: ::libc::c_uint = 9;
pub const TCOD_CHAR_RADIO_SET: ::libc::c_uint = 10;
pub const TCOD_CHAR_SUBP_NW: ::libc::c_uint = 226;
pub const TCOD_CHAR_SUBP_NE: ::libc::c_uint = 227;
pub const TCOD_CHAR_SUBP_N: ::libc::c_uint = 228;
pub const TCOD_CHAR_SUBP_SE: ::libc::c_uint = 229;
pub const TCOD_CHAR_SUBP_DIAG: ::libc::c_uint = 230;
pub const TCOD_CHAR_SUBP_E: ::libc::c_uint = 231;
pub const TCOD_CHAR_SUBP_SW: ::libc::c_uint = 232;
pub const TCOD_CHAR_SMILIE: ::libc::c_uint = 1;
pub const TCOD_CHAR_SMILIE_INV: ::libc::c_uint = 2;
pub const TCOD_CHAR_HEART: ::libc::c_uint = 3;
pub const TCOD_CHAR_DIAMOND: ::libc::c_uint = 4;
pub const TCOD_CHAR_CLUB: ::libc::c_uint = 5;
pub const TCOD_CHAR_SPADE: ::libc::c_uint = 6;
pub const TCOD_CHAR_BULLET: ::libc::c_uint = 7;
pub const TCOD_CHAR_BULLET_INV: ::libc::c_uint = 8;
pub const TCOD_CHAR_MALE: ::libc::c_uint = 11;
pub const TCOD_CHAR_FEMALE: ::libc::c_uint = 12;
pub const TCOD_CHAR_NOTE: ::libc::c_uint = 13;
pub const TCOD_CHAR_NOTE_DOUBLE: ::libc::c_uint = 14;
pub const TCOD_CHAR_LIGHT: ::libc::c_uint = 15;
pub const TCOD_CHAR_EXCLAM_DOUBLE: ::libc::c_uint = 19;
pub const TCOD_CHAR_PILCROW: ::libc::c_uint = 20;
pub const TCOD_CHAR_SECTION: ::libc::c_uint = 21;
pub const TCOD_CHAR_POUND: ::libc::c_uint = 156;
pub const TCOD_CHAR_MULTIPLICATION: ::libc::c_uint = 158;
pub const TCOD_CHAR_FUNCTION: ::libc::c_uint = 159;
pub const TCOD_CHAR_RESERVED: ::libc::c_uint = 169;
pub const TCOD_CHAR_HALF: ::libc::c_uint = 171;
pub const TCOD_CHAR_ONE_QUARTER: ::libc::c_uint = 172;
pub const TCOD_CHAR_COPYRIGHT: ::libc::c_uint = 184;
pub const TCOD_CHAR_CENT: ::libc::c_uint = 189;
pub const TCOD_CHAR_YEN: ::libc::c_uint = 190;
pub const TCOD_CHAR_CURRENCY: ::libc::c_uint = 207;
pub const TCOD_CHAR_THREE_QUARTERS: ::libc::c_uint = 243;
pub const TCOD_CHAR_DIVISION: ::libc::c_uint = 246;
pub const TCOD_CHAR_GRADE: ::libc::c_uint = 248;
pub const TCOD_CHAR_UMLAUT: ::libc::c_uint = 249;
pub const TCOD_CHAR_POW1: ::libc::c_uint = 251;
pub const TCOD_CHAR_POW3: ::libc::c_uint = 252;
pub const TCOD_CHAR_POW2: ::libc::c_uint = 253;
pub const TCOD_CHAR_BULLET_SQUARE: ::libc::c_uint = 254;
pub type TCOD_colctrl_t = ::libc::c_uint;
pub const TCOD_COLCTRL_1: ::libc::c_uint = 1;
pub const TCOD_COLCTRL_2: ::libc::c_uint = 2;
pub const TCOD_COLCTRL_3: ::libc::c_uint = 3;
pub const TCOD_COLCTRL_4: ::libc::c_uint = 4;
pub const TCOD_COLCTRL_5: ::libc::c_uint = 5;
pub const TCOD_COLCTRL_NUMBER: ::libc::c_uint = 5;
pub const TCOD_COLCTRL_FORE_RGB: ::libc::c_uint = 6;
pub const TCOD_COLCTRL_BACK_RGB: ::libc::c_uint = 7;
pub const TCOD_COLCTRL_STOP: ::libc::c_uint = 8;
pub type TCOD_bkgnd_flag_t = ::libc::c_uint;
pub const TCOD_BKGND_NONE: ::libc::c_uint = 0;
pub const TCOD_BKGND_SET: ::libc::c_uint = 1;
pub const TCOD_BKGND_MULTIPLY: ::libc::c_uint = 2;
pub const TCOD_BKGND_LIGHTEN: ::libc::c_uint = 3;
pub const TCOD_BKGND_DARKEN: ::libc::c_uint = 4;
pub const TCOD_BKGND_SCREEN: ::libc::c_uint = 5;
pub const TCOD_BKGND_COLOR_DODGE: ::libc::c_uint = 6;
pub const TCOD_BKGND_COLOR_BURN: ::libc::c_uint = 7;
pub const TCOD_BKGND_ADD: ::libc::c_uint = 8;
pub const TCOD_BKGND_ADDA: ::libc::c_uint = 9;
pub const TCOD_BKGND_BURN: ::libc::c_uint = 10;
pub const TCOD_BKGND_OVERLAY: ::libc::c_uint = 11;
pub const TCOD_BKGND_ALPH: ::libc::c_uint = 12;
pub const TCOD_BKGND_DEFAULT: ::libc::c_uint = 13;
pub type TCOD_key_status_t = ::libc::c_uint;
pub const TCOD_KEY_PRESSED: ::libc::c_uint = 1;
pub const TCOD_KEY_RELEASED: ::libc::c_uint = 2;
pub type TCOD_font_flags_t = ::libc::c_uint;
pub const TCOD_FONT_LAYOUT_ASCII_INCOL: ::libc::c_uint = 1;
pub const TCOD_FONT_LAYOUT_ASCII_INROW: ::libc::c_uint = 2;
pub const TCOD_FONT_TYPE_GREYSCALE: ::libc::c_uint = 4;
pub const TCOD_FONT_TYPE_GRAYSCALE: ::libc::c_uint = 4;
pub const TCOD_FONT_LAYOUT_TCOD: ::libc::c_uint = 8;
pub type TCOD_renderer_t = ::libc::c_uint;
pub const TCOD_RENDERER_GLSL: ::libc::c_uint = 0;
pub const TCOD_RENDERER_OPENGL: ::libc::c_uint = 1;
pub const TCOD_RENDERER_SDL: ::libc::c_uint = 2;
pub const TCOD_NB_RENDERERS: ::libc::c_uint = 3;
pub type TCOD_alignment_t = ::libc::c_uint;
pub const TCOD_LEFT: ::libc::c_uint = 0;
pub const TCOD_RIGHT: ::libc::c_uint = 1;
pub const TCOD_CENTER: ::libc::c_uint = 2;
pub type TCOD_console_t = *mut ::libc::c_void;
pub type TCOD_image_t = *mut ::libc::c_void;
#[repr(C)]
pub struct TCOD_mouse_t {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub dx: ::libc::c_int,
    pub dy: ::libc::c_int,
    pub cx: ::libc::c_int,
    pub cy: ::libc::c_int,
    pub dcx: ::libc::c_int,
    pub dcy: ::libc::c_int,
    pub lbutton: _bool,
    pub rbutton: _bool,
    pub mbutton: _bool,
    pub lbutton_pressed: _bool,
    pub rbutton_pressed: _bool,
    pub mbutton_pressed: _bool,
    pub wheel_up: _bool,
    pub wheel_down: _bool,
}
pub type TCOD_event_t = ::libc::c_uint;
pub const TCOD_EVENT_KEY_PRESS: ::libc::c_uint = 1;
pub const TCOD_EVENT_KEY_RELEASE: ::libc::c_uint = 2;
pub const TCOD_EVENT_KEY: ::libc::c_uint = 3;
pub const TCOD_EVENT_MOUSE_MOVE: ::libc::c_uint = 4;
pub const TCOD_EVENT_MOUSE_PRESS: ::libc::c_uint = 8;
pub const TCOD_EVENT_MOUSE_RELEASE: ::libc::c_uint = 16;
pub const TCOD_EVENT_MOUSE: ::libc::c_uint = 28;
pub const TCOD_EVENT_ANY: ::libc::c_uint = 31;
pub type TCOD_thread_t = *mut ::libc::c_void;
pub type TCOD_semaphore_t = *mut ::libc::c_void;
pub type TCOD_mutex_t = *mut ::libc::c_void;
pub type TCOD_cond_t = *mut ::libc::c_void;
pub type TCOD_library_t = *mut ::libc::c_void;
pub type SDL_renderer_t =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)>;
#[repr(C)]
pub struct TCOD_dice_t {
    pub nb_rolls: ::libc::c_int,
    pub nb_faces: ::libc::c_int,
    pub multiplier: ::libc::c_float,
    pub addsub: ::libc::c_float,
}
pub type TCOD_random_algo_t = ::libc::c_uint;
pub const TCOD_RNG_MT: ::libc::c_uint = 0;
pub const TCOD_RNG_CMWC: ::libc::c_uint = 1;
pub type TCOD_distribution_t = ::libc::c_uint;
pub const TCOD_DISTRIBUTION_LINEAR: ::libc::c_uint = 0;
pub const TCOD_DISTRIBUTION_GAUSSIAN: ::libc::c_uint = 1;
pub const TCOD_DISTRIBUTION_GAUSSIAN_RANGE: ::libc::c_uint = 2;
pub const TCOD_DISTRIBUTION_GAUSSIAN_INVERSE: ::libc::c_uint = 3;
pub const TCOD_DISTRIBUTION_GAUSSIAN_RANGE_INVERSE: ::libc::c_uint = 4;
pub type TCOD_random_t = *mut ::libc::c_void;
pub type TCOD_line_listener_t =
    ::std::option::Option<extern "C" fn
                              (arg1: ::libc::c_int, arg2: ::libc::c_int)
                              -> _bool>;
#[repr(C)]
pub struct TCOD_bresenham_data_t {
    pub stepx: ::libc::c_int,
    pub stepy: ::libc::c_int,
    pub e: ::libc::c_int,
    pub deltax: ::libc::c_int,
    pub deltay: ::libc::c_int,
    pub origx: ::libc::c_int,
    pub origy: ::libc::c_int,
    pub destx: ::libc::c_int,
    pub desty: ::libc::c_int,
}
pub type TCOD_noise_t = *mut ::libc::c_void;
pub type TCOD_noise_type_t = ::libc::c_uint;
pub const TCOD_NOISE_PERLIN: ::libc::c_uint = 1;
pub const TCOD_NOISE_SIMPLEX: ::libc::c_uint = 2;
pub const TCOD_NOISE_WAVELET: ::libc::c_uint = 4;
pub const TCOD_NOISE_DEFAULT: ::libc::c_uint = 0;
pub type TCOD_map_t = *mut ::libc::c_void;
pub type TCOD_fov_algorithm_t = ::libc::c_uint;
pub const FOV_BASIC: ::libc::c_uint = 0;
pub const FOV_DIAMOND: ::libc::c_uint = 1;
pub const FOV_SHADOW: ::libc::c_uint = 2;
pub const FOV_PERMISSIVE_0: ::libc::c_uint = 3;
pub const FOV_PERMISSIVE_1: ::libc::c_uint = 4;
pub const FOV_PERMISSIVE_2: ::libc::c_uint = 5;
pub const FOV_PERMISSIVE_3: ::libc::c_uint = 6;
pub const FOV_PERMISSIVE_4: ::libc::c_uint = 7;
pub const FOV_PERMISSIVE_5: ::libc::c_uint = 8;
pub const FOV_PERMISSIVE_6: ::libc::c_uint = 9;
pub const FOV_PERMISSIVE_7: ::libc::c_uint = 10;
pub const FOV_PERMISSIVE_8: ::libc::c_uint = 11;
pub const FOV_RESTRICTIVE: ::libc::c_uint = 12;
pub const NB_FOV_ALGORITHMS: ::libc::c_uint = 13;
pub type TCOD_path_func_t =
    ::std::option::Option<extern "C" fn
                              (arg1: ::libc::c_int, arg2: ::libc::c_int,
                               arg3: ::libc::c_int, arg4: ::libc::c_int,
                               arg5: *mut ::libc::c_void) -> ::libc::c_float>;
pub type TCOD_path_t = *mut ::libc::c_void;
pub type TCOD_dijkstra_t = *mut ::libc::c_void;
#[repr(C)]
pub struct TCOD_lex_t {
    pub file_line: ::libc::c_int,
    pub token_type: ::libc::c_int,
    pub token_int_val: ::libc::c_int,
    pub token_idx: ::libc::c_int,
    pub token_float_val: ::libc::c_float,
    pub tok: *mut ::libc::c_char,
    pub toklen: ::libc::c_int,
    pub lastStringDelim: ::libc::c_char,
    pub pos: *mut ::libc::c_char,
    pub buf: *mut ::libc::c_char,
    pub filename: *mut ::libc::c_char,
    pub last_javadoc_comment: *mut ::libc::c_char,
    pub nb_symbols: ::libc::c_int,
    pub nb_keywords: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub symbols: [[::libc::c_char; 5us]; 100us],
    pub keywords: [[::libc::c_char; 20us]; 100us],
    pub simpleCmt: *const ::libc::c_char,
    pub cmtStart: *const ::libc::c_char,
    pub cmtStop: *const ::libc::c_char,
    pub javadocCmtStart: *const ::libc::c_char,
    pub stringDelim: *const ::libc::c_char,
    pub javadoc_read: _bool,
    pub allocBuf: _bool,
    pub savept: _bool,
}
pub type TCOD_value_type_t = ::libc::c_uint;
pub const TCOD_TYPE_NONE: ::libc::c_uint = 0;
pub const TCOD_TYPE_BOOL: ::libc::c_uint = 1;
pub const TCOD_TYPE_CHAR: ::libc::c_uint = 2;
pub const TCOD_TYPE_INT: ::libc::c_uint = 3;
pub const TCOD_TYPE_FLOAT: ::libc::c_uint = 4;
pub const TCOD_TYPE_STRING: ::libc::c_uint = 5;
pub const TCOD_TYPE_COLOR: ::libc::c_uint = 6;
pub const TCOD_TYPE_DICE: ::libc::c_uint = 7;
pub const TCOD_TYPE_VALUELIST00: ::libc::c_uint = 8;
pub const TCOD_TYPE_VALUELIST01: ::libc::c_uint = 9;
pub const TCOD_TYPE_VALUELIST02: ::libc::c_uint = 10;
pub const TCOD_TYPE_VALUELIST03: ::libc::c_uint = 11;
pub const TCOD_TYPE_VALUELIST04: ::libc::c_uint = 12;
pub const TCOD_TYPE_VALUELIST05: ::libc::c_uint = 13;
pub const TCOD_TYPE_VALUELIST06: ::libc::c_uint = 14;
pub const TCOD_TYPE_VALUELIST07: ::libc::c_uint = 15;
pub const TCOD_TYPE_VALUELIST08: ::libc::c_uint = 16;
pub const TCOD_TYPE_VALUELIST09: ::libc::c_uint = 17;
pub const TCOD_TYPE_VALUELIST10: ::libc::c_uint = 18;
pub const TCOD_TYPE_VALUELIST11: ::libc::c_uint = 19;
pub const TCOD_TYPE_VALUELIST12: ::libc::c_uint = 20;
pub const TCOD_TYPE_VALUELIST13: ::libc::c_uint = 21;
pub const TCOD_TYPE_VALUELIST14: ::libc::c_uint = 22;
pub const TCOD_TYPE_VALUELIST15: ::libc::c_uint = 23;
pub const TCOD_TYPE_CUSTOM00: ::libc::c_uint = 24;
pub const TCOD_TYPE_CUSTOM01: ::libc::c_uint = 25;
pub const TCOD_TYPE_CUSTOM02: ::libc::c_uint = 26;
pub const TCOD_TYPE_CUSTOM03: ::libc::c_uint = 27;
pub const TCOD_TYPE_CUSTOM04: ::libc::c_uint = 28;
pub const TCOD_TYPE_CUSTOM05: ::libc::c_uint = 29;
pub const TCOD_TYPE_CUSTOM06: ::libc::c_uint = 30;
pub const TCOD_TYPE_CUSTOM07: ::libc::c_uint = 31;
pub const TCOD_TYPE_CUSTOM08: ::libc::c_uint = 32;
pub const TCOD_TYPE_CUSTOM09: ::libc::c_uint = 33;
pub const TCOD_TYPE_CUSTOM10: ::libc::c_uint = 34;
pub const TCOD_TYPE_CUSTOM11: ::libc::c_uint = 35;
pub const TCOD_TYPE_CUSTOM12: ::libc::c_uint = 36;
pub const TCOD_TYPE_CUSTOM13: ::libc::c_uint = 37;
pub const TCOD_TYPE_CUSTOM14: ::libc::c_uint = 38;
pub const TCOD_TYPE_CUSTOM15: ::libc::c_uint = 39;
pub const TCOD_TYPE_LIST: ::libc::c_uint = 1024;
#[repr(C)]
pub struct TCOD_value_t {
    pub data: [u64; 2us],
}
impl TCOD_value_t {
    pub fn b(&mut self) -> *mut _bool {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn c(&mut self) -> *mut ::libc::c_char {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn i(&mut self) -> *mut int32 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn f(&mut self) -> *mut ::libc::c_float {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn s(&mut self) -> *mut *mut ::libc::c_char {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn col(&mut self) -> *mut TCOD_color_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn dice(&mut self) -> *mut TCOD_dice_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn list(&mut self) -> *mut TCOD_list_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn custom(&mut self) -> *mut *mut ::libc::c_void {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type TCOD_parser_struct_t = *mut ::libc::c_void;
#[repr(C)]
pub struct TCOD_parser_listener_t {
    pub new_struct: ::std::option::Option<extern "C" fn
                                              (arg1: TCOD_parser_struct_t,
                                               arg2: *const ::libc::c_char)
                                              -> _bool>,
    pub new_flag: ::std::option::Option<extern "C" fn
                                            (arg1: *const ::libc::c_char)
                                            -> _bool>,
    pub new_property: ::std::option::Option<extern "C" fn
                                                (arg1: *const ::libc::c_char,
                                                 arg2: TCOD_value_type_t,
                                                 arg3: TCOD_value_t)
                                                -> _bool>,
    pub end_struct: ::std::option::Option<extern "C" fn
                                              (arg1: TCOD_parser_struct_t,
                                               arg2: *const ::libc::c_char)
                                              -> _bool>,
    pub error: ::std::option::Option<extern "C" fn
                                         (arg1: *const ::libc::c_char)>,
}
pub type TCOD_parser_custom_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut TCOD_lex_t,
                               arg2: *mut TCOD_parser_listener_t,
                               arg3: TCOD_parser_struct_t,
                               arg4: *mut ::libc::c_char) -> TCOD_value_t>;
pub type TCOD_parser_t = *mut ::libc::c_void;
#[repr(C)]
pub struct TCOD_struct_int_t {
    pub name: *mut ::libc::c_char,
    pub flags: TCOD_list_t,
    pub props: TCOD_list_t,
    pub lists: TCOD_list_t,
    pub structs: TCOD_list_t,
}
#[repr(C)]
pub struct TCOD_parser_int_t {
    pub structs: TCOD_list_t,
    pub customs: [TCOD_parser_custom_t; 16us],
    pub fatal: _bool,
    pub props: TCOD_list_t,
}
#[repr(C)]
pub struct Struct__TCOD_tree_t {
    pub next: *mut Struct__TCOD_tree_t,
    pub father: *mut Struct__TCOD_tree_t,
    pub sons: *mut Struct__TCOD_tree_t,
}
pub type TCOD_tree_t = Struct__TCOD_tree_t;
#[repr(C)]
pub struct TCOD_bsp_t {
    pub tree: TCOD_tree_t,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub w: ::libc::c_int,
    pub h: ::libc::c_int,
    pub position: ::libc::c_int,
    pub level: uint8,
    pub horizontal: _bool,
}
pub type TCOD_bsp_callback_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut TCOD_bsp_t,
                               arg2: *mut ::libc::c_void) -> _bool>;
#[repr(C)]
pub struct TCOD_heightmap_t {
    pub w: ::libc::c_int,
    pub h: ::libc::c_int,
    pub values: *mut ::libc::c_float,
}
pub type TCOD_zip_t = *mut ::libc::c_void;
pub type TCOD_namegen_t = *mut ::libc::c_void;
pub type TCOD_text_t = *mut ::libc::c_void;
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
#[link(name = "tcod")]
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut tzname: *mut *mut ::libc::c_char;
    pub static mut getdate_err: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub static mut daylight: ::libc::c_int;
    pub static mut _DefaultRuneLocale: _RuneLocale;
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
    pub static mut __mb_cur_max: ::libc::c_int;
    pub static mut suboptarg: *mut ::libc::c_char;
    pub static mut TCOD_colors: [[TCOD_color_t; 8us]; 21us];
    pub static TCOD_black: TCOD_color_t;
    pub static TCOD_darkest_grey: TCOD_color_t;
    pub static TCOD_darker_grey: TCOD_color_t;
    pub static TCOD_dark_grey: TCOD_color_t;
    pub static TCOD_grey: TCOD_color_t;
    pub static TCOD_light_grey: TCOD_color_t;
    pub static TCOD_lighter_grey: TCOD_color_t;
    pub static TCOD_lightest_grey: TCOD_color_t;
    pub static TCOD_darkest_gray: TCOD_color_t;
    pub static TCOD_darker_gray: TCOD_color_t;
    pub static TCOD_dark_gray: TCOD_color_t;
    pub static TCOD_gray: TCOD_color_t;
    pub static TCOD_light_gray: TCOD_color_t;
    pub static TCOD_lighter_gray: TCOD_color_t;
    pub static TCOD_lightest_gray: TCOD_color_t;
    pub static TCOD_white: TCOD_color_t;
    pub static TCOD_darkest_sepia: TCOD_color_t;
    pub static TCOD_darker_sepia: TCOD_color_t;
    pub static TCOD_dark_sepia: TCOD_color_t;
    pub static TCOD_sepia: TCOD_color_t;
    pub static TCOD_light_sepia: TCOD_color_t;
    pub static TCOD_lighter_sepia: TCOD_color_t;
    pub static TCOD_lightest_sepia: TCOD_color_t;
    pub static TCOD_red: TCOD_color_t;
    pub static TCOD_flame: TCOD_color_t;
    pub static TCOD_orange: TCOD_color_t;
    pub static TCOD_amber: TCOD_color_t;
    pub static TCOD_yellow: TCOD_color_t;
    pub static TCOD_lime: TCOD_color_t;
    pub static TCOD_chartreuse: TCOD_color_t;
    pub static TCOD_green: TCOD_color_t;
    pub static TCOD_sea: TCOD_color_t;
    pub static TCOD_turquoise: TCOD_color_t;
    pub static TCOD_cyan: TCOD_color_t;
    pub static TCOD_sky: TCOD_color_t;
    pub static TCOD_azure: TCOD_color_t;
    pub static TCOD_blue: TCOD_color_t;
    pub static TCOD_han: TCOD_color_t;
    pub static TCOD_violet: TCOD_color_t;
    pub static TCOD_purple: TCOD_color_t;
    pub static TCOD_fuchsia: TCOD_color_t;
    pub static TCOD_magenta: TCOD_color_t;
    pub static TCOD_pink: TCOD_color_t;
    pub static TCOD_crimson: TCOD_color_t;
    pub static TCOD_dark_red: TCOD_color_t;
    pub static TCOD_dark_flame: TCOD_color_t;
    pub static TCOD_dark_orange: TCOD_color_t;
    pub static TCOD_dark_amber: TCOD_color_t;
    pub static TCOD_dark_yellow: TCOD_color_t;
    pub static TCOD_dark_lime: TCOD_color_t;
    pub static TCOD_dark_chartreuse: TCOD_color_t;
    pub static TCOD_dark_green: TCOD_color_t;
    pub static TCOD_dark_sea: TCOD_color_t;
    pub static TCOD_dark_turquoise: TCOD_color_t;
    pub static TCOD_dark_cyan: TCOD_color_t;
    pub static TCOD_dark_sky: TCOD_color_t;
    pub static TCOD_dark_azure: TCOD_color_t;
    pub static TCOD_dark_blue: TCOD_color_t;
    pub static TCOD_dark_han: TCOD_color_t;
    pub static TCOD_dark_violet: TCOD_color_t;
    pub static TCOD_dark_purple: TCOD_color_t;
    pub static TCOD_dark_fuchsia: TCOD_color_t;
    pub static TCOD_dark_magenta: TCOD_color_t;
    pub static TCOD_dark_pink: TCOD_color_t;
    pub static TCOD_dark_crimson: TCOD_color_t;
    pub static TCOD_darker_red: TCOD_color_t;
    pub static TCOD_darker_flame: TCOD_color_t;
    pub static TCOD_darker_orange: TCOD_color_t;
    pub static TCOD_darker_amber: TCOD_color_t;
    pub static TCOD_darker_yellow: TCOD_color_t;
    pub static TCOD_darker_lime: TCOD_color_t;
    pub static TCOD_darker_chartreuse: TCOD_color_t;
    pub static TCOD_darker_green: TCOD_color_t;
    pub static TCOD_darker_sea: TCOD_color_t;
    pub static TCOD_darker_turquoise: TCOD_color_t;
    pub static TCOD_darker_cyan: TCOD_color_t;
    pub static TCOD_darker_sky: TCOD_color_t;
    pub static TCOD_darker_azure: TCOD_color_t;
    pub static TCOD_darker_blue: TCOD_color_t;
    pub static TCOD_darker_han: TCOD_color_t;
    pub static TCOD_darker_violet: TCOD_color_t;
    pub static TCOD_darker_purple: TCOD_color_t;
    pub static TCOD_darker_fuchsia: TCOD_color_t;
    pub static TCOD_darker_magenta: TCOD_color_t;
    pub static TCOD_darker_pink: TCOD_color_t;
    pub static TCOD_darker_crimson: TCOD_color_t;
    pub static TCOD_darkest_red: TCOD_color_t;
    pub static TCOD_darkest_flame: TCOD_color_t;
    pub static TCOD_darkest_orange: TCOD_color_t;
    pub static TCOD_darkest_amber: TCOD_color_t;
    pub static TCOD_darkest_yellow: TCOD_color_t;
    pub static TCOD_darkest_lime: TCOD_color_t;
    pub static TCOD_darkest_chartreuse: TCOD_color_t;
    pub static TCOD_darkest_green: TCOD_color_t;
    pub static TCOD_darkest_sea: TCOD_color_t;
    pub static TCOD_darkest_turquoise: TCOD_color_t;
    pub static TCOD_darkest_cyan: TCOD_color_t;
    pub static TCOD_darkest_sky: TCOD_color_t;
    pub static TCOD_darkest_azure: TCOD_color_t;
    pub static TCOD_darkest_blue: TCOD_color_t;
    pub static TCOD_darkest_han: TCOD_color_t;
    pub static TCOD_darkest_violet: TCOD_color_t;
    pub static TCOD_darkest_purple: TCOD_color_t;
    pub static TCOD_darkest_fuchsia: TCOD_color_t;
    pub static TCOD_darkest_magenta: TCOD_color_t;
    pub static TCOD_darkest_pink: TCOD_color_t;
    pub static TCOD_darkest_crimson: TCOD_color_t;
    pub static TCOD_light_red: TCOD_color_t;
    pub static TCOD_light_flame: TCOD_color_t;
    pub static TCOD_light_orange: TCOD_color_t;
    pub static TCOD_light_amber: TCOD_color_t;
    pub static TCOD_light_yellow: TCOD_color_t;
    pub static TCOD_light_lime: TCOD_color_t;
    pub static TCOD_light_chartreuse: TCOD_color_t;
    pub static TCOD_light_green: TCOD_color_t;
    pub static TCOD_light_sea: TCOD_color_t;
    pub static TCOD_light_turquoise: TCOD_color_t;
    pub static TCOD_light_cyan: TCOD_color_t;
    pub static TCOD_light_sky: TCOD_color_t;
    pub static TCOD_light_azure: TCOD_color_t;
    pub static TCOD_light_blue: TCOD_color_t;
    pub static TCOD_light_han: TCOD_color_t;
    pub static TCOD_light_violet: TCOD_color_t;
    pub static TCOD_light_purple: TCOD_color_t;
    pub static TCOD_light_fuchsia: TCOD_color_t;
    pub static TCOD_light_magenta: TCOD_color_t;
    pub static TCOD_light_pink: TCOD_color_t;
    pub static TCOD_light_crimson: TCOD_color_t;
    pub static TCOD_lighter_red: TCOD_color_t;
    pub static TCOD_lighter_flame: TCOD_color_t;
    pub static TCOD_lighter_orange: TCOD_color_t;
    pub static TCOD_lighter_amber: TCOD_color_t;
    pub static TCOD_lighter_yellow: TCOD_color_t;
    pub static TCOD_lighter_lime: TCOD_color_t;
    pub static TCOD_lighter_chartreuse: TCOD_color_t;
    pub static TCOD_lighter_green: TCOD_color_t;
    pub static TCOD_lighter_sea: TCOD_color_t;
    pub static TCOD_lighter_turquoise: TCOD_color_t;
    pub static TCOD_lighter_cyan: TCOD_color_t;
    pub static TCOD_lighter_sky: TCOD_color_t;
    pub static TCOD_lighter_azure: TCOD_color_t;
    pub static TCOD_lighter_blue: TCOD_color_t;
    pub static TCOD_lighter_han: TCOD_color_t;
    pub static TCOD_lighter_violet: TCOD_color_t;
    pub static TCOD_lighter_purple: TCOD_color_t;
    pub static TCOD_lighter_fuchsia: TCOD_color_t;
    pub static TCOD_lighter_magenta: TCOD_color_t;
    pub static TCOD_lighter_pink: TCOD_color_t;
    pub static TCOD_lighter_crimson: TCOD_color_t;
    pub static TCOD_lightest_red: TCOD_color_t;
    pub static TCOD_lightest_flame: TCOD_color_t;
    pub static TCOD_lightest_orange: TCOD_color_t;
    pub static TCOD_lightest_amber: TCOD_color_t;
    pub static TCOD_lightest_yellow: TCOD_color_t;
    pub static TCOD_lightest_lime: TCOD_color_t;
    pub static TCOD_lightest_chartreuse: TCOD_color_t;
    pub static TCOD_lightest_green: TCOD_color_t;
    pub static TCOD_lightest_sea: TCOD_color_t;
    pub static TCOD_lightest_turquoise: TCOD_color_t;
    pub static TCOD_lightest_cyan: TCOD_color_t;
    pub static TCOD_lightest_sky: TCOD_color_t;
    pub static TCOD_lightest_azure: TCOD_color_t;
    pub static TCOD_lightest_blue: TCOD_color_t;
    pub static TCOD_lightest_han: TCOD_color_t;
    pub static TCOD_lightest_violet: TCOD_color_t;
    pub static TCOD_lightest_purple: TCOD_color_t;
    pub static TCOD_lightest_fuchsia: TCOD_color_t;
    pub static TCOD_lightest_magenta: TCOD_color_t;
    pub static TCOD_lightest_pink: TCOD_color_t;
    pub static TCOD_lightest_crimson: TCOD_color_t;
    pub static TCOD_desaturated_red: TCOD_color_t;
    pub static TCOD_desaturated_flame: TCOD_color_t;
    pub static TCOD_desaturated_orange: TCOD_color_t;
    pub static TCOD_desaturated_amber: TCOD_color_t;
    pub static TCOD_desaturated_yellow: TCOD_color_t;
    pub static TCOD_desaturated_lime: TCOD_color_t;
    pub static TCOD_desaturated_chartreuse: TCOD_color_t;
    pub static TCOD_desaturated_green: TCOD_color_t;
    pub static TCOD_desaturated_sea: TCOD_color_t;
    pub static TCOD_desaturated_turquoise: TCOD_color_t;
    pub static TCOD_desaturated_cyan: TCOD_color_t;
    pub static TCOD_desaturated_sky: TCOD_color_t;
    pub static TCOD_desaturated_azure: TCOD_color_t;
    pub static TCOD_desaturated_blue: TCOD_color_t;
    pub static TCOD_desaturated_han: TCOD_color_t;
    pub static TCOD_desaturated_violet: TCOD_color_t;
    pub static TCOD_desaturated_purple: TCOD_color_t;
    pub static TCOD_desaturated_fuchsia: TCOD_color_t;
    pub static TCOD_desaturated_magenta: TCOD_color_t;
    pub static TCOD_desaturated_pink: TCOD_color_t;
    pub static TCOD_desaturated_crimson: TCOD_color_t;
    pub static TCOD_brass: TCOD_color_t;
    pub static TCOD_copper: TCOD_color_t;
    pub static TCOD_gold: TCOD_color_t;
    pub static TCOD_silver: TCOD_color_t;
    pub static TCOD_celadon: TCOD_color_t;
    pub static TCOD_peach: TCOD_color_t;
    pub fn clearerr(arg1: *mut FILE);
    pub fn fclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn feof(arg1: *mut FILE) -> ::libc::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::libc::c_int;
    pub fn fgets(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                 arg3: *mut FILE) -> *mut ::libc::c_char;
    pub fn fopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) ->
     *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...) ->
     ::libc::c_int;
    pub fn fputc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fputs(arg1: *const ::libc::c_char, arg2: *mut FILE) ->
     ::libc::c_int;
    pub fn fread(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut FILE) -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...) ->
     ::libc::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::libc::c_long, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::libc::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::libc::c_long;
    pub fn fwrite(arg1: *const ::libc::c_void, arg2: size_t, arg3: size_t,
                  arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn gets(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn perror(arg1: *const ::libc::c_char);
    pub fn printf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn putc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn putchar(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn puts(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn remove(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn rewind(arg1: *mut FILE);
    pub fn scanf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char);
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                   arg3: ::libc::c_int, arg4: size_t) -> ::libc::c_int;
    pub fn sprintf(arg1: *mut ::libc::c_char,
                   arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ungetc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn vprintf(arg1: *const ::libc::c_char, arg2: va_list) ->
     ::libc::c_int;
    pub fn vsprintf(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn ctermid(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fdopen(arg1: ::libc::c_int, arg2: *const ::libc::c_char) ->
     *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::libc::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn popen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) ->
     *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::libc::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                      arg3: va_list) -> ::libc::c_int;
    pub fn __swbuf(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn __sputc(_c: ::libc::c_int, _p: *mut FILE) -> ::libc::c_int;
    pub fn flockfile(arg1: *mut FILE);
    pub fn ftrylockfile(arg1: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(arg1: *mut FILE);
    pub fn getc_unlocked(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn putc_unlocked(arg1: ::libc::c_int, arg2: *mut FILE) ->
     ::libc::c_int;
    pub fn putchar_unlocked(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(arg1: *mut FILE) -> ::libc::c_int;
    pub fn putw(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn tempnam(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn vscanf(arg1: *const ::libc::c_char, arg2: va_list) ->
     ::libc::c_int;
    pub fn vsnprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                     arg3: *const ::libc::c_char, arg4: va_list) ->
     ::libc::c_int;
    pub fn vsscanf(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn dprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char, ...) ->
     ::libc::c_int;
    pub fn vdprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn getdelim(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                    arg3: ::libc::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::libc::c_char,
                    arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn ctermid_r(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::libc::c_char;
    pub fn fmtcheck(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::libc::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                     arg3: ::libc::c_int);
    pub fn setlinebuf(arg1: *mut FILE) -> ::libc::c_int;
    pub fn vasprintf(arg1: *mut *mut ::libc::c_char,
                     arg2: *const ::libc::c_char, arg3: va_list) ->
     ::libc::c_int;
    pub fn zopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                 arg3: ::libc::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const ::libc::c_void,
                   arg2:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut ::libc::c_void,
                                                  arg2: *mut ::libc::c_char,
                                                  arg3: ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg3:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut ::libc::c_void,
                                                  arg2: *const ::libc::c_char,
                                                  arg3: ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg4:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut ::libc::c_void,
                                                  arg2: fpos_t,
                                                  arg3: ::libc::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut ::libc::c_void)
                                                 -> ::libc::c_int>) ->
     *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                         arg3: size_t, arg4: *const ::libc::c_char, ...) ->
     ::libc::c_int;
    pub fn __snprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                          arg3: ::libc::c_int, arg4: size_t,
                          arg5: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                          arg3: size_t, arg4: *const ::libc::c_char,
                          arg5: va_list) -> ::libc::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                           arg3: ::libc::c_int, arg4: size_t,
                           arg5: *const ::libc::c_char, arg6: va_list) ->
     ::libc::c_int;
    pub fn asctime(arg1: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::libc::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> ::libc::c_double;
    pub fn getdate(arg1: *const ::libc::c_char) -> *mut Struct_tm;
    pub fn gmtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn localtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn mktime(arg1: *mut Struct_tm) -> time_t;
    pub fn strftime(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, arg4: *const Struct_tm) ->
     size_t;
    pub fn strptime(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut Struct_tm) -> *mut ::libc::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset();
    pub fn asctime_r(arg1: *const Struct_tm, arg2: *mut ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut Struct_tm) ->
     *mut Struct_tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut Struct_tm) ->
     *mut Struct_tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut Struct_tm) -> time_t;
    pub fn timegm(arg1: *mut Struct_tm) -> time_t;
    pub fn nanosleep(arg1: *const Struct_timespec, arg2: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::libc::c_ulong;
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn isascii(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn __maskrune(arg1: __darwin_ct_rune_t, arg2: ::libc::c_ulong) ->
     ::libc::c_int;
    pub fn __istype(_c: __darwin_ct_rune_t, _f: ::libc::c_ulong) ->
     ::libc::c_int;
    pub fn __isctype(_c: __darwin_ct_rune_t, _f: ::libc::c_ulong) ->
     __darwin_ct_rune_t;
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn __wcwidth(_c: __darwin_ct_rune_t) -> ::libc::c_int;
    pub fn isalnum(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isalpha(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isblank(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn iscntrl(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isdigit(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isgraph(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn islower(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isprint(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn ispunct(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isspace(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isupper(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isxdigit(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn toascii(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn tolower(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn toupper(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn digittoint(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn ishexnumber(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isideogram(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isnumber(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isphonogram(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isrune(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isspecial(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn iswalnum(_wc: wint_t) -> ::libc::c_int;
    pub fn iswalpha(_wc: wint_t) -> ::libc::c_int;
    pub fn iswcntrl(_wc: wint_t) -> ::libc::c_int;
    pub fn iswctype(_wc: wint_t, _charclass: wctype_t) -> ::libc::c_int;
    pub fn iswdigit(_wc: wint_t) -> ::libc::c_int;
    pub fn iswgraph(_wc: wint_t) -> ::libc::c_int;
    pub fn iswlower(_wc: wint_t) -> ::libc::c_int;
    pub fn iswprint(_wc: wint_t) -> ::libc::c_int;
    pub fn iswpunct(_wc: wint_t) -> ::libc::c_int;
    pub fn iswspace(_wc: wint_t) -> ::libc::c_int;
    pub fn iswupper(_wc: wint_t) -> ::libc::c_int;
    pub fn iswxdigit(_wc: wint_t) -> ::libc::c_int;
    pub fn towlower(_wc: wint_t) -> wint_t;
    pub fn towupper(_wc: wint_t) -> wint_t;
    pub fn wctype(arg1: *const ::libc::c_char) -> wctype_t;
    pub fn btowc(arg1: ::libc::c_int) -> wint_t;
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
    pub fn fgetws(arg1: *mut wchar_t, arg2: ::libc::c_int, arg3: *mut FILE) ->
     *mut wchar_t;
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fwide(arg1: *mut FILE, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...) ->
     ::libc::c_int;
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...) ->
     ::libc::c_int;
    pub fn getwc(arg1: *mut FILE) -> wint_t;
    pub fn getwchar() -> wint_t;
    pub fn mbrlen(arg1: *const ::libc::c_char, arg2: size_t,
                  arg3: *mut mbstate_t) -> size_t;
    pub fn mbrtowc(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                   arg3: size_t, arg4: *mut mbstate_t) -> size_t;
    pub fn mbsinit(arg1: *const mbstate_t) -> ::libc::c_int;
    pub fn mbsrtowcs(arg1: *mut wchar_t, arg2: *mut *const ::libc::c_char,
                     arg3: size_t, arg4: *mut mbstate_t) -> size_t;
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
    pub fn putwchar(arg1: wchar_t) -> wint_t;
    pub fn swprintf(arg1: *mut wchar_t, arg2: size_t,
                    arg3: *const wchar_t, ...) -> ::libc::c_int;
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...) ->
     ::libc::c_int;
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
    pub fn vfwprintf(arg1: *mut FILE, arg2: *const wchar_t,
                     arg3: __darwin_va_list) -> ::libc::c_int;
    pub fn vswprintf(arg1: *mut wchar_t, arg2: size_t, arg3: *const wchar_t,
                     arg4: __darwin_va_list) -> ::libc::c_int;
    pub fn vwprintf(arg1: *const wchar_t, arg2: __darwin_va_list) ->
     ::libc::c_int;
    pub fn wcrtomb(arg1: *mut ::libc::c_char, arg2: wchar_t,
                   arg3: *mut mbstate_t) -> size_t;
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
    pub fn wcschr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
    pub fn wcscmp(arg1: *const wchar_t, arg2: *const wchar_t) ->
     ::libc::c_int;
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) ->
     ::libc::c_int;
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> size_t;
    pub fn wcsftime(arg1: *mut wchar_t, arg2: size_t, arg3: *const wchar_t,
                    arg4: *const Struct_tm) -> size_t;
    pub fn wcslen(arg1: *const wchar_t) -> size_t;
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) ->
     *mut wchar_t;
    pub fn wcsncmp(arg1: *const wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> ::libc::c_int;
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) ->
     *mut wchar_t;
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) ->
     *mut wchar_t;
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
    pub fn wcsrtombs(arg1: *mut ::libc::c_char, arg2: *mut *const wchar_t,
                     arg3: size_t, arg4: *mut mbstate_t) -> size_t;
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> size_t;
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) ->
     size_t;
    pub fn wctob(arg1: wint_t) -> ::libc::c_int;
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) ->
     ::libc::c_double;
    pub fn wcstok(arg1: *mut wchar_t, arg2: *const wchar_t,
                  arg3: *mut *mut wchar_t) -> *mut wchar_t;
    pub fn wcstol(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                  arg3: ::libc::c_int) -> ::libc::c_long;
    pub fn wcstoul(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                   arg3: ::libc::c_int) -> ::libc::c_ulong;
    pub fn wmemchr(arg1: *const wchar_t, arg2: wchar_t, arg3: size_t) ->
     *mut wchar_t;
    pub fn wmemcmp(arg1: *const wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> ::libc::c_int;
    pub fn wmemcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) ->
     *mut wchar_t;
    pub fn wmemmove(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) ->
     *mut wchar_t;
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: size_t) ->
     *mut wchar_t;
    pub fn wprintf(arg1: *const wchar_t, ...) -> ::libc::c_int;
    pub fn wscanf(arg1: *const wchar_t, ...) -> ::libc::c_int;
    pub fn wcswidth(arg1: *const wchar_t, arg2: size_t) -> ::libc::c_int;
    pub fn wcwidth(arg1: wchar_t) -> ::libc::c_int;
    pub fn vfwscanf(arg1: *mut FILE, arg2: *const wchar_t,
                    arg3: __darwin_va_list) -> ::libc::c_int;
    pub fn vswscanf(arg1: *const wchar_t, arg2: *const wchar_t,
                    arg3: __darwin_va_list) -> ::libc::c_int;
    pub fn vwscanf(arg1: *const wchar_t, arg2: __darwin_va_list) ->
     ::libc::c_int;
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) ->
     ::libc::c_float;
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) ->
     ::libc::c_double;
    pub fn wcstoll(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                   arg3: ::libc::c_int) -> ::libc::c_longlong;
    pub fn wcstoull(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                    arg3: ::libc::c_int) -> ::libc::c_ulonglong;
    pub fn mbsnrtowcs(arg1: *mut wchar_t, arg2: *mut *const ::libc::c_char,
                      arg3: size_t, arg4: size_t, arg5: *mut mbstate_t) ->
     size_t;
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) ->
     *mut wchar_t;
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t) ->
     ::libc::c_int;
    pub fn wcsncasecmp(arg1: *const wchar_t, arg2: *const wchar_t, n: size_t)
     -> ::libc::c_int;
    pub fn wcsnlen(arg1: *const wchar_t, arg2: size_t) -> size_t;
    pub fn wcsnrtombs(arg1: *mut ::libc::c_char, arg2: *mut *const wchar_t,
                      arg3: size_t, arg4: size_t, arg5: *mut mbstate_t) ->
     size_t;
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut size_t) -> *mut wchar_t;
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) ->
     size_t;
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t) ->
     size_t;
    pub fn signal(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn
                                                (arg1: ::libc::c_int)>) ->
     ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)>;
    pub fn getpriority(arg1: ::libc::c_int, arg2: id_t) -> ::libc::c_int;
    pub fn getiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn getrlimit(arg1: ::libc::c_int, arg2: *mut Struct_rlimit) ->
     ::libc::c_int;
    pub fn getrusage(arg1: ::libc::c_int, arg2: *mut Struct_rusage) ->
     ::libc::c_int;
    pub fn setpriority(arg1: ::libc::c_int, arg2: id_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setrlimit(arg1: ::libc::c_int, arg2: *const Struct_rlimit) ->
     ::libc::c_int;
    pub fn wait(arg1: *mut ::libc::c_int) -> pid_t;
    pub fn waitpid(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int)
     -> pid_t;
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn wait3(arg1: *mut ::libc::c_int, arg2: ::libc::c_int,
                 arg3: *mut Struct_rusage) -> pid_t;
    pub fn wait4(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int,
                 arg4: *mut Struct_rusage) -> pid_t;
    pub fn alloca(arg1: size_t) -> *mut ::libc::c_void;
    pub fn abort();
    pub fn abs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn()>) ->
     ::libc::c_int;
    pub fn atof(arg1: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(arg1: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn bsearch(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t, arg4: size_t,
                   arg5:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *const ::libc::c_void,
                                                  arg2: *const ::libc::c_void)
                                                 -> ::libc::c_int>) ->
     *mut ::libc::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::libc::c_void;
    pub fn div(arg1: ::libc::c_int, arg2: ::libc::c_int) -> div_t;
    pub fn exit(arg1: ::libc::c_int);
    pub fn free(arg1: *mut ::libc::c_void);
    pub fn getenv(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn labs(arg1: ::libc::c_long) -> ::libc::c_long;
    pub fn ldiv(arg1: ::libc::c_long, arg2: ::libc::c_long) -> ldiv_t;
    pub fn llabs(arg1: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn lldiv(arg1: ::libc::c_longlong, arg2: ::libc::c_longlong) ->
     lldiv_t;
    pub fn malloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn mblen(arg1: *const ::libc::c_char, arg2: size_t) -> ::libc::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                  arg3: size_t) -> ::libc::c_int;
    pub fn posix_memalign(arg1: *mut *mut ::libc::c_void, arg2: size_t,
                          arg3: size_t) -> ::libc::c_int;
    pub fn qsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn
                                               (arg1: *const ::libc::c_void,
                                                arg2: *const ::libc::c_void)
                                               -> ::libc::c_int>);
    pub fn rand() -> ::libc::c_int;
    pub fn realloc(arg1: *mut ::libc::c_void, arg2: size_t) ->
     *mut ::libc::c_void;
    pub fn srand(arg1: ::libc::c_uint);
    pub fn strtod(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_double;
    pub fn strtof(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_float;
    pub fn strtol(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_long;
    pub fn strtold(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtoll(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int) ->
     ::libc::c_longlong;
    pub fn strtoul(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int) ->
     ::libc::c_ulong;
    pub fn strtoull(arg1: *const ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int) ->
     ::libc::c_ulonglong;
    pub fn system(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn wcstombs(arg1: *mut ::libc::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    pub fn wctomb(arg1: *mut ::libc::c_char, arg2: wchar_t) -> ::libc::c_int;
    pub fn _Exit(arg1: ::libc::c_int);
    pub fn a64l(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn drand48() -> ::libc::c_double;
    pub fn ecvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn erand48(arg1: [::libc::c_ushort; 3us]) -> ::libc::c_double;
    pub fn fcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn gcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn getsubopt(arg1: *mut *mut ::libc::c_char,
                     arg2: *const *mut ::libc::c_char,
                     arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn grantpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn initstate(arg1: ::libc::c_uint, arg2: *mut ::libc::c_char,
                     arg3: size_t) -> *mut ::libc::c_char;
    pub fn jrand48(arg1: [::libc::c_ushort; 3us]) -> ::libc::c_long;
    pub fn l64a(arg1: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn lcong48(arg1: [::libc::c_ushort; 7us]);
    pub fn lrand48() -> ::libc::c_long;
    pub fn mktemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mrand48() -> ::libc::c_long;
    pub fn nrand48(arg1: [::libc::c_ushort; 3us]) -> ::libc::c_long;
    pub fn posix_openpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ptsname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn putenv(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn random() -> ::libc::c_long;
    pub fn rand_r(arg1: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn realpath(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn seed48(arg1: [::libc::c_ushort; 3us]) -> *mut ::libc::c_ushort;
    pub fn setenv(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setkey(arg1: *const ::libc::c_char);
    pub fn setstate(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn srand48(arg1: ::libc::c_long);
    pub fn srandom(arg1: ::libc::c_uint);
    pub fn unlockpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn unsetenv(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn arc4random() -> u_int32_t;
    pub fn arc4random_addrandom(arg1: *mut ::libc::c_uchar,
                                arg2: ::libc::c_int);
    pub fn arc4random_buf(arg1: *mut ::libc::c_void, arg2: size_t);
    pub fn arc4random_stir();
    pub fn arc4random_uniform(arg1: u_int32_t) -> u_int32_t;
    pub fn atexit_b(arg1: ::libc::c_void) -> ::libc::c_int;
    pub fn bsearch_b(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                     arg3: size_t, arg4: size_t, arg5: ::libc::c_void) ->
     *mut ::libc::c_void;
    pub fn cgetcap(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn cgetclose() -> ::libc::c_int;
    pub fn cgetent(arg1: *mut *mut ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char,
                   arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetfirst(arg1: *mut *mut ::libc::c_char,
                     arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetmatch(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn cgetnext(arg1: *mut *mut ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetnum(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn cgetset(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetstr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetustr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn daemon(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::libc::c_char;
    pub fn devname_r(arg1: dev_t, arg2: mode_t, buf: *mut ::libc::c_char,
                     len: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn getbsize(arg1: *mut ::libc::c_int, arg2: *mut ::libc::c_long) ->
     *mut ::libc::c_char;
    pub fn getloadavg(arg1: *mut ::libc::c_double, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn getprogname() -> *const ::libc::c_char;
    pub fn heapsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                    arg4:
                        ::std::option::Option<extern "C" fn
                                                  (arg1:
                                                       *const ::libc::c_void,
                                                   arg2:
                                                       *const ::libc::c_void)
                                                  -> ::libc::c_int>) ->
     ::libc::c_int;
    pub fn heapsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                      arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn mergesort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                     arg4:
                         ::std::option::Option<extern "C" fn
                                                   (arg1:
                                                        *const ::libc::c_void,
                                                    arg2:
                                                        *const ::libc::c_void)
                                                   -> ::libc::c_int>) ->
     ::libc::c_int;
    pub fn mergesort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                       arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn psort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn
                                               (arg1: *const ::libc::c_void,
                                                arg2: *const ::libc::c_void)
                                               -> ::libc::c_int>);
    pub fn psort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void);
    pub fn psort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut ::libc::c_void,
                                                  arg2: *const ::libc::c_void,
                                                  arg3: *const ::libc::c_void)
                                                 -> ::libc::c_int>);
    pub fn qsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void);
    pub fn qsort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: *mut ::libc::c_void,
                                                  arg2: *const ::libc::c_void,
                                                  arg3: *const ::libc::c_void)
                                                 -> ::libc::c_int>);
    pub fn radixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn setprogname(arg1: *const ::libc::c_char);
    pub fn sradixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                      arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn sranddev();
    pub fn srandomdev();
    pub fn reallocf(arg1: *mut ::libc::c_void, arg2: size_t) ->
     *mut ::libc::c_void;
    pub fn strtoq(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_longlong;
    pub fn strtouq(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int) ->
     ::libc::c_ulonglong;
    pub fn valloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn memchr(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> ::libc::c_int;
    pub fn memcpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memmove(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t) -> *mut ::libc::c_void;
    pub fn memset(arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn strcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn strchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn strcmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn strcoll(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn strcspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> size_t;
    pub fn strerror(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strlen(arg1: *const ::libc::c_char) -> size_t;
    pub fn strncat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strncmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> ::libc::c_int;
    pub fn strncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strpbrk(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strrchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn strspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) ->
     size_t;
    pub fn strstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn strtok(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn strxfrm(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strtok_r(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strerror_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                      arg3: size_t) -> ::libc::c_int;
    pub fn strdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn memccpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: ::libc::c_int, arg4: size_t) -> *mut ::libc::c_void;
    pub fn stpcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn stpncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strndup(arg1: *const ::libc::c_char, arg2: size_t) ->
     *mut ::libc::c_char;
    pub fn strnlen(arg1: *const ::libc::c_char, arg2: size_t) -> size_t;
    pub fn strsignal(sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn memset_s(arg1: *mut ::libc::c_void, arg2: rsize_t,
                    arg3: ::libc::c_int, arg4: rsize_t) -> errno_t;
    pub fn memmem(arg1: *const ::libc::c_void, arg2: size_t,
                  arg3: *const ::libc::c_void, arg4: size_t) ->
     *mut ::libc::c_void;
    pub fn memset_pattern4(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: size_t);
    pub fn memset_pattern8(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: size_t);
    pub fn memset_pattern16(arg1: *mut ::libc::c_void,
                            arg2: *const ::libc::c_void, arg3: size_t);
    pub fn strcasestr(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strnstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strlcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strlcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strmode(arg1: ::libc::c_int, arg2: *mut ::libc::c_char);
    pub fn strsep(arg1: *mut *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn swab(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                arg3: ssize_t);
    pub fn bcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                arg3: size_t) -> ::libc::c_int;
    pub fn bcopy(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                 arg3: size_t);
    pub fn bzero(arg1: *mut ::libc::c_void, arg2: size_t);
    pub fn index(arg1: *const ::libc::c_char, arg2: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn rindex(arg1: *const ::libc::c_char, arg2: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn ffs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(arg1: *const ::libc::c_char,
                       arg2: *const ::libc::c_char, arg3: size_t) ->
     ::libc::c_int;
    pub fn ffsl(arg1: ::libc::c_long) -> ::libc::c_int;
    pub fn ffsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
    pub fn fls(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn flsl(arg1: ::libc::c_long) -> ::libc::c_int;
    pub fn flsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
    pub fn imaxabs(j: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn wcstoumax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn SDL_revcpy(dst: *mut ::libc::c_void, src: *const ::libc::c_void,
                      len: size_t) -> *mut ::libc::c_void;
    pub fn SDL_strrev(string: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn SDL_strupr(string: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn SDL_strlwr(string: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn SDL_ltoa(value: ::libc::c_long, string: *mut ::libc::c_char,
                    radix: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn SDL_ultoa(value: ::libc::c_ulong, string: *mut ::libc::c_char,
                     radix: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn SDL_lltoa(value: Sint64, string: *mut ::libc::c_char,
                     radix: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn SDL_ulltoa(value: Uint64, string: *mut ::libc::c_char,
                      radix: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn SDL_iconv_open(tocode: *const ::libc::c_char,
                          fromcode: *const ::libc::c_char) -> SDL_iconv_t;
    pub fn SDL_iconv_close(cd: SDL_iconv_t) -> ::libc::c_int;
    pub fn SDL_iconv(cd: SDL_iconv_t, inbuf: *mut *const ::libc::c_char,
                     inbytesleft: *mut size_t,
                     outbuf: *mut *mut ::libc::c_char,
                     outbytesleft: *mut size_t) -> size_t;
    pub fn SDL_iconv_string(tocode: *const ::libc::c_char,
                            fromcode: *const ::libc::c_char,
                            inbuf: *const ::libc::c_char, inbytesleft: size_t)
     -> *mut ::libc::c_char;
    pub fn SDL_SetError(fmt: *const ::libc::c_char, ...);
    pub fn SDL_GetError() -> *mut ::libc::c_char;
    pub fn SDL_ClearError();
    pub fn SDL_Error(code: SDL_errorcode);
    pub fn SDL_CreateMutex() -> *mut SDL_mutex;
    pub fn SDL_mutexP(mutex: *mut SDL_mutex) -> ::libc::c_int;
    pub fn SDL_mutexV(mutex: *mut SDL_mutex) -> ::libc::c_int;
    pub fn SDL_DestroyMutex(mutex: *mut SDL_mutex);
    pub fn SDL_CreateSemaphore(initial_value: Uint32) -> *mut SDL_sem;
    pub fn SDL_DestroySemaphore(sem: *mut SDL_sem);
    pub fn SDL_SemWait(sem: *mut SDL_sem) -> ::libc::c_int;
    pub fn SDL_SemTryWait(sem: *mut SDL_sem) -> ::libc::c_int;
    pub fn SDL_SemWaitTimeout(sem: *mut SDL_sem, ms: Uint32) -> ::libc::c_int;
    pub fn SDL_SemPost(sem: *mut SDL_sem) -> ::libc::c_int;
    pub fn SDL_SemValue(sem: *mut SDL_sem) -> Uint32;
    pub fn SDL_CreateCond() -> *mut SDL_cond;
    pub fn SDL_DestroyCond(cond: *mut SDL_cond);
    pub fn SDL_CondSignal(cond: *mut SDL_cond) -> ::libc::c_int;
    pub fn SDL_CondBroadcast(cond: *mut SDL_cond) -> ::libc::c_int;
    pub fn SDL_CondWait(cond: *mut SDL_cond, _mut: *mut SDL_mutex) ->
     ::libc::c_int;
    pub fn SDL_CondWaitTimeout(cond: *mut SDL_cond, mutex: *mut SDL_mutex,
                               ms: Uint32) -> ::libc::c_int;
    pub fn SDL_CreateThread(_fn:
                                ::std::option::Option<extern "C" fn
                                                          (arg1:
                                                               *mut ::libc::c_void)
                                                          -> ::libc::c_int>,
                            data: *mut ::libc::c_void) -> *mut SDL_Thread;
    pub fn SDL_ThreadID() -> Uint32;
    pub fn SDL_GetThreadID(thread: *mut SDL_Thread) -> Uint32;
    pub fn SDL_WaitThread(thread: *mut SDL_Thread,
                          status: *mut ::libc::c_int);
    pub fn SDL_KillThread(thread: *mut SDL_Thread);
    pub fn SDL_RWFromFile(file: *const ::libc::c_char,
                          mode: *const ::libc::c_char) -> *mut SDL_RWops;
    pub fn SDL_RWFromFP(fp: *mut FILE, autoclose: ::libc::c_int) ->
     *mut SDL_RWops;
    pub fn SDL_RWFromMem(mem: *mut ::libc::c_void, size: ::libc::c_int) ->
     *mut SDL_RWops;
    pub fn SDL_RWFromConstMem(mem: *const ::libc::c_void, size: ::libc::c_int)
     -> *mut SDL_RWops;
    pub fn SDL_AllocRW() -> *mut SDL_RWops;
    pub fn SDL_FreeRW(area: *mut SDL_RWops);
    pub fn SDL_ReadLE16(src: *mut SDL_RWops) -> Uint16;
    pub fn SDL_ReadBE16(src: *mut SDL_RWops) -> Uint16;
    pub fn SDL_ReadLE32(src: *mut SDL_RWops) -> Uint32;
    pub fn SDL_ReadBE32(src: *mut SDL_RWops) -> Uint32;
    pub fn SDL_ReadLE64(src: *mut SDL_RWops) -> Uint64;
    pub fn SDL_ReadBE64(src: *mut SDL_RWops) -> Uint64;
    pub fn SDL_WriteLE16(dst: *mut SDL_RWops, value: Uint16) -> ::libc::c_int;
    pub fn SDL_WriteBE16(dst: *mut SDL_RWops, value: Uint16) -> ::libc::c_int;
    pub fn SDL_WriteLE32(dst: *mut SDL_RWops, value: Uint32) -> ::libc::c_int;
    pub fn SDL_WriteBE32(dst: *mut SDL_RWops, value: Uint32) -> ::libc::c_int;
    pub fn SDL_WriteLE64(dst: *mut SDL_RWops, value: Uint64) -> ::libc::c_int;
    pub fn SDL_WriteBE64(dst: *mut SDL_RWops, value: Uint64) -> ::libc::c_int;
    pub fn SDL_AudioInit(driver_name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn SDL_AudioQuit();
    pub fn SDL_AudioDriverName(namebuf: *mut ::libc::c_char,
                               maxlen: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn SDL_OpenAudio(desired: *mut SDL_AudioSpec,
                         obtained: *mut SDL_AudioSpec) -> ::libc::c_int;
    pub fn SDL_GetAudioStatus() -> SDL_audiostatus;
    pub fn SDL_PauseAudio(pause_on: ::libc::c_int);
    pub fn SDL_LoadWAV_RW(src: *mut SDL_RWops, freesrc: ::libc::c_int,
                          spec: *mut SDL_AudioSpec,
                          audio_buf: *mut *mut Uint8, audio_len: *mut Uint32)
     -> *mut SDL_AudioSpec;
    pub fn SDL_FreeWAV(audio_buf: *mut Uint8);
    pub fn SDL_BuildAudioCVT(cvt: *mut SDL_AudioCVT, src_format: Uint16,
                             src_channels: Uint8, src_rate: ::libc::c_int,
                             dst_format: Uint16, dst_channels: Uint8,
                             dst_rate: ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_ConvertAudio(cvt: *mut SDL_AudioCVT) -> ::libc::c_int;
    pub fn SDL_MixAudio(dst: *mut Uint8, src: *const Uint8, len: Uint32,
                        volume: ::libc::c_int);
    pub fn SDL_LockAudio();
    pub fn SDL_UnlockAudio();
    pub fn SDL_CloseAudio();
    pub fn SDL_CDNumDrives() -> ::libc::c_int;
    pub fn SDL_CDName(drive: ::libc::c_int) -> *const ::libc::c_char;
    pub fn SDL_CDOpen(drive: ::libc::c_int) -> *mut SDL_CD;
    pub fn SDL_CDStatus(cdrom: *mut SDL_CD) -> CDstatus;
    pub fn SDL_CDPlayTracks(cdrom: *mut SDL_CD, start_track: ::libc::c_int,
                            start_frame: ::libc::c_int,
                            ntracks: ::libc::c_int, nframes: ::libc::c_int) ->
     ::libc::c_int;
    pub fn SDL_CDPlay(cdrom: *mut SDL_CD, start: ::libc::c_int,
                      length: ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_CDPause(cdrom: *mut SDL_CD) -> ::libc::c_int;
    pub fn SDL_CDResume(cdrom: *mut SDL_CD) -> ::libc::c_int;
    pub fn SDL_CDStop(cdrom: *mut SDL_CD) -> ::libc::c_int;
    pub fn SDL_CDEject(cdrom: *mut SDL_CD) -> ::libc::c_int;
    pub fn SDL_CDClose(cdrom: *mut SDL_CD);
    pub fn SDL_HasRDTSC() -> SDL_bool;
    pub fn SDL_HasMMX() -> SDL_bool;
    pub fn SDL_HasMMXExt() -> SDL_bool;
    pub fn SDL_Has3DNow() -> SDL_bool;
    pub fn SDL_Has3DNowExt() -> SDL_bool;
    pub fn SDL_HasSSE() -> SDL_bool;
    pub fn SDL_HasSSE2() -> SDL_bool;
    pub fn SDL_HasAltiVec() -> SDL_bool;
    pub fn SDL_GetAppState() -> Uint8;
    pub fn SDL_EnableUNICODE(enable: ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_EnableKeyRepeat(delay: ::libc::c_int, interval: ::libc::c_int)
     -> ::libc::c_int;
    pub fn SDL_GetKeyRepeat(delay: *mut ::libc::c_int,
                            interval: *mut ::libc::c_int);
    pub fn SDL_GetKeyState(numkeys: *mut ::libc::c_int) -> *mut Uint8;
    pub fn SDL_GetModState() -> SDLMod;
    pub fn SDL_SetModState(modstate: SDLMod);
    pub fn SDL_GetKeyName(key: SDLKey) -> *mut ::libc::c_char;
    pub fn SDL_VideoInit(driver_name: *const ::libc::c_char, flags: Uint32) ->
     ::libc::c_int;
    pub fn SDL_VideoQuit();
    pub fn SDL_VideoDriverName(namebuf: *mut ::libc::c_char,
                               maxlen: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn SDL_GetVideoSurface() -> *mut SDL_Surface;
    pub fn SDL_GetVideoInfo() -> *const SDL_VideoInfo;
    pub fn SDL_VideoModeOK(width: ::libc::c_int, height: ::libc::c_int,
                           bpp: ::libc::c_int, flags: Uint32) ->
     ::libc::c_int;
    pub fn SDL_ListModes(format: *mut SDL_PixelFormat, flags: Uint32) ->
     *mut *mut SDL_Rect;
    pub fn SDL_SetVideoMode(width: ::libc::c_int, height: ::libc::c_int,
                            bpp: ::libc::c_int, flags: Uint32) ->
     *mut SDL_Surface;
    pub fn SDL_UpdateRects(screen: *mut SDL_Surface, numrects: ::libc::c_int,
                           rects: *mut SDL_Rect);
    pub fn SDL_UpdateRect(screen: *mut SDL_Surface, x: Sint32, y: Sint32,
                          w: Uint32, h: Uint32);
    pub fn SDL_Flip(screen: *mut SDL_Surface) -> ::libc::c_int;
    pub fn SDL_SetGamma(red: ::libc::c_float, green: ::libc::c_float,
                        blue: ::libc::c_float) -> ::libc::c_int;
    pub fn SDL_SetGammaRamp(red: *const Uint16, green: *const Uint16,
                            blue: *const Uint16) -> ::libc::c_int;
    pub fn SDL_GetGammaRamp(red: *mut Uint16, green: *mut Uint16,
                            blue: *mut Uint16) -> ::libc::c_int;
    pub fn SDL_SetColors(surface: *mut SDL_Surface, colors: *mut SDL_Color,
                         firstcolor: ::libc::c_int, ncolors: ::libc::c_int) ->
     ::libc::c_int;
    pub fn SDL_SetPalette(surface: *mut SDL_Surface, flags: ::libc::c_int,
                          colors: *mut SDL_Color, firstcolor: ::libc::c_int,
                          ncolors: ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_MapRGB(format: *const SDL_PixelFormat, r: Uint8, g: Uint8,
                      b: Uint8) -> Uint32;
    pub fn SDL_MapRGBA(format: *const SDL_PixelFormat, r: Uint8, g: Uint8,
                       b: Uint8, a: Uint8) -> Uint32;
    pub fn SDL_GetRGB(pixel: Uint32, fmt: *const SDL_PixelFormat,
                      r: *mut Uint8, g: *mut Uint8, b: *mut Uint8);
    pub fn SDL_GetRGBA(pixel: Uint32, fmt: *const SDL_PixelFormat,
                       r: *mut Uint8, g: *mut Uint8, b: *mut Uint8,
                       a: *mut Uint8);
    pub fn SDL_CreateRGBSurface(flags: Uint32, width: ::libc::c_int,
                                height: ::libc::c_int, depth: ::libc::c_int,
                                Rmask: Uint32, Gmask: Uint32, Bmask: Uint32,
                                Amask: Uint32) -> *mut SDL_Surface;
    pub fn SDL_CreateRGBSurfaceFrom(pixels: *mut ::libc::c_void,
                                    width: ::libc::c_int,
                                    height: ::libc::c_int,
                                    depth: ::libc::c_int,
                                    pitch: ::libc::c_int, Rmask: Uint32,
                                    Gmask: Uint32, Bmask: Uint32,
                                    Amask: Uint32) -> *mut SDL_Surface;
    pub fn SDL_FreeSurface(surface: *mut SDL_Surface);
    pub fn SDL_LockSurface(surface: *mut SDL_Surface) -> ::libc::c_int;
    pub fn SDL_UnlockSurface(surface: *mut SDL_Surface);
    pub fn SDL_LoadBMP_RW(src: *mut SDL_RWops, freesrc: ::libc::c_int) ->
     *mut SDL_Surface;
    pub fn SDL_SaveBMP_RW(surface: *mut SDL_Surface, dst: *mut SDL_RWops,
                          freedst: ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_SetColorKey(surface: *mut SDL_Surface, flag: Uint32,
                           key: Uint32) -> ::libc::c_int;
    pub fn SDL_SetAlpha(surface: *mut SDL_Surface, flag: Uint32, alpha: Uint8)
     -> ::libc::c_int;
    pub fn SDL_SetClipRect(surface: *mut SDL_Surface, rect: *const SDL_Rect)
     -> SDL_bool;
    pub fn SDL_GetClipRect(surface: *mut SDL_Surface, rect: *mut SDL_Rect);
    pub fn SDL_ConvertSurface(src: *mut SDL_Surface,
                              fmt: *mut SDL_PixelFormat, flags: Uint32) ->
     *mut SDL_Surface;
    pub fn SDL_UpperBlit(src: *mut SDL_Surface, srcrect: *mut SDL_Rect,
                         dst: *mut SDL_Surface, dstrect: *mut SDL_Rect) ->
     ::libc::c_int;
    pub fn SDL_LowerBlit(src: *mut SDL_Surface, srcrect: *mut SDL_Rect,
                         dst: *mut SDL_Surface, dstrect: *mut SDL_Rect) ->
     ::libc::c_int;
    pub fn SDL_FillRect(dst: *mut SDL_Surface, dstrect: *mut SDL_Rect,
                        color: Uint32) -> ::libc::c_int;
    pub fn SDL_DisplayFormat(surface: *mut SDL_Surface) -> *mut SDL_Surface;
    pub fn SDL_DisplayFormatAlpha(surface: *mut SDL_Surface) ->
     *mut SDL_Surface;
    pub fn SDL_CreateYUVOverlay(width: ::libc::c_int, height: ::libc::c_int,
                                format: Uint32, display: *mut SDL_Surface) ->
     *mut SDL_Overlay;
    pub fn SDL_LockYUVOverlay(overlay: *mut SDL_Overlay) -> ::libc::c_int;
    pub fn SDL_UnlockYUVOverlay(overlay: *mut SDL_Overlay);
    pub fn SDL_DisplayYUVOverlay(overlay: *mut SDL_Overlay,
                                 dstrect: *mut SDL_Rect) -> ::libc::c_int;
    pub fn SDL_FreeYUVOverlay(overlay: *mut SDL_Overlay);
    pub fn SDL_GL_LoadLibrary(path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn SDL_GL_GetProcAddress(_proc: *const ::libc::c_char) ->
     *mut ::libc::c_void;
    pub fn SDL_GL_SetAttribute(attr: SDL_GLattr, value: ::libc::c_int) ->
     ::libc::c_int;
    pub fn SDL_GL_GetAttribute(attr: SDL_GLattr, value: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn SDL_GL_SwapBuffers();
    pub fn SDL_GL_UpdateRects(numrects: ::libc::c_int, rects: *mut SDL_Rect);
    pub fn SDL_GL_Lock();
    pub fn SDL_GL_Unlock();
    pub fn SDL_WM_SetCaption(title: *const ::libc::c_char,
                             icon: *const ::libc::c_char);
    pub fn SDL_WM_GetCaption(title: *mut *mut ::libc::c_char,
                             icon: *mut *mut ::libc::c_char);
    pub fn SDL_WM_SetIcon(icon: *mut SDL_Surface, mask: *mut Uint8);
    pub fn SDL_WM_IconifyWindow() -> ::libc::c_int;
    pub fn SDL_WM_ToggleFullScreen(surface: *mut SDL_Surface) ->
     ::libc::c_int;
    pub fn SDL_WM_GrabInput(mode: SDL_GrabMode) -> SDL_GrabMode;
    pub fn SDL_SoftStretch(src: *mut SDL_Surface, srcrect: *mut SDL_Rect,
                           dst: *mut SDL_Surface, dstrect: *mut SDL_Rect) ->
     ::libc::c_int;
    pub fn SDL_GetMouseState(x: *mut ::libc::c_int, y: *mut ::libc::c_int) ->
     Uint8;
    pub fn SDL_GetRelativeMouseState(x: *mut ::libc::c_int,
                                     y: *mut ::libc::c_int) -> Uint8;
    pub fn SDL_WarpMouse(x: Uint16, y: Uint16);
    pub fn SDL_CreateCursor(data: *mut Uint8, mask: *mut Uint8,
                            w: ::libc::c_int, h: ::libc::c_int,
                            hot_x: ::libc::c_int, hot_y: ::libc::c_int) ->
     *mut SDL_Cursor;
    pub fn SDL_SetCursor(cursor: *mut SDL_Cursor);
    pub fn SDL_GetCursor() -> *mut SDL_Cursor;
    pub fn SDL_FreeCursor(cursor: *mut SDL_Cursor);
    pub fn SDL_ShowCursor(toggle: ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_NumJoysticks() -> ::libc::c_int;
    pub fn SDL_JoystickName(device_index: ::libc::c_int) ->
     *const ::libc::c_char;
    pub fn SDL_JoystickOpen(device_index: ::libc::c_int) -> *mut SDL_Joystick;
    pub fn SDL_JoystickOpened(device_index: ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_JoystickIndex(joystick: *mut SDL_Joystick) -> ::libc::c_int;
    pub fn SDL_JoystickNumAxes(joystick: *mut SDL_Joystick) -> ::libc::c_int;
    pub fn SDL_JoystickNumBalls(joystick: *mut SDL_Joystick) -> ::libc::c_int;
    pub fn SDL_JoystickNumHats(joystick: *mut SDL_Joystick) -> ::libc::c_int;
    pub fn SDL_JoystickNumButtons(joystick: *mut SDL_Joystick) ->
     ::libc::c_int;
    pub fn SDL_JoystickUpdate();
    pub fn SDL_JoystickEventState(state: ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_JoystickGetAxis(joystick: *mut SDL_Joystick,
                               axis: ::libc::c_int) -> Sint16;
    pub fn SDL_JoystickGetHat(joystick: *mut SDL_Joystick, hat: ::libc::c_int)
     -> Uint8;
    pub fn SDL_JoystickGetBall(joystick: *mut SDL_Joystick,
                               ball: ::libc::c_int, dx: *mut ::libc::c_int,
                               dy: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn SDL_JoystickGetButton(joystick: *mut SDL_Joystick,
                                 button: ::libc::c_int) -> Uint8;
    pub fn SDL_JoystickClose(joystick: *mut SDL_Joystick);
    pub fn SDL_PumpEvents();
    pub fn SDL_PeepEvents(events: *mut SDL_Event, numevents: ::libc::c_int,
                          action: SDL_eventaction, mask: Uint32) ->
     ::libc::c_int;
    pub fn SDL_PollEvent(event: *mut SDL_Event) -> ::libc::c_int;
    pub fn SDL_WaitEvent(event: *mut SDL_Event) -> ::libc::c_int;
    pub fn SDL_PushEvent(event: *mut SDL_Event) -> ::libc::c_int;
    pub fn SDL_SetEventFilter(filter: SDL_EventFilter);
    pub fn SDL_GetEventFilter() -> SDL_EventFilter;
    pub fn SDL_EventState(_type: Uint8, state: ::libc::c_int) -> Uint8;
    pub fn SDL_LoadObject(sofile: *const ::libc::c_char) ->
     *mut ::libc::c_void;
    pub fn SDL_LoadFunction(handle: *mut ::libc::c_void,
                            name: *const ::libc::c_char) ->
     *mut ::libc::c_void;
    pub fn SDL_UnloadObject(handle: *mut ::libc::c_void);
    pub fn SDL_GetTicks() -> Uint32;
    pub fn SDL_Delay(ms: Uint32);
    pub fn SDL_SetTimer(interval: Uint32, callback: SDL_TimerCallback) ->
     ::libc::c_int;
    pub fn SDL_AddTimer(interval: Uint32, callback: SDL_NewTimerCallback,
                        param: *mut ::libc::c_void) -> SDL_TimerID;
    pub fn SDL_RemoveTimer(t: SDL_TimerID) -> SDL_bool;
    pub fn SDL_Linked_Version() -> *const SDL_version;
    pub fn SDL_Init(flags: Uint32) -> ::libc::c_int;
    pub fn SDL_InitSubSystem(flags: Uint32) -> ::libc::c_int;
    pub fn SDL_QuitSubSystem(flags: Uint32);
    pub fn SDL_WasInit(flags: Uint32) -> Uint32;
    pub fn SDL_Quit();
    pub fn TCOD_strdup(s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn TCOD_strcasecmp(s1: *const ::libc::c_char,
                           s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn TCOD_strncasecmp(s1: *const ::libc::c_char,
                            s2: *const ::libc::c_char, n: size_t) ->
     ::libc::c_int;
    pub fn TCOD_list_new() -> TCOD_list_t;
    pub fn TCOD_list_allocate(nb_elements: ::libc::c_int) -> TCOD_list_t;
    pub fn TCOD_list_duplicate(l: TCOD_list_t) -> TCOD_list_t;
    pub fn TCOD_list_delete(l: TCOD_list_t);
    pub fn TCOD_list_push(l: TCOD_list_t, elt: *const ::libc::c_void);
    pub fn TCOD_list_pop(l: TCOD_list_t) -> *mut ::libc::c_void;
    pub fn TCOD_list_peek(l: TCOD_list_t) -> *mut ::libc::c_void;
    pub fn TCOD_list_add_all(l: TCOD_list_t, l2: TCOD_list_t);
    pub fn TCOD_list_get(l: TCOD_list_t, idx: ::libc::c_int) ->
     *mut ::libc::c_void;
    pub fn TCOD_list_set(l: TCOD_list_t, elt: *const ::libc::c_void,
                         idx: ::libc::c_int);
    pub fn TCOD_list_begin(l: TCOD_list_t) -> *mut *mut ::libc::c_void;
    pub fn TCOD_list_end(l: TCOD_list_t) -> *mut *mut ::libc::c_void;
    pub fn TCOD_list_reverse(l: TCOD_list_t);
    pub fn TCOD_list_remove_iterator(l: TCOD_list_t,
                                     elt: *mut *mut ::libc::c_void) ->
     *mut *mut ::libc::c_void;
    pub fn TCOD_list_remove(l: TCOD_list_t, elt: *const ::libc::c_void);
    pub fn TCOD_list_remove_iterator_fast(l: TCOD_list_t,
                                          elt: *mut *mut ::libc::c_void) ->
     *mut *mut ::libc::c_void;
    pub fn TCOD_list_remove_fast(l: TCOD_list_t, elt: *const ::libc::c_void);
    pub fn TCOD_list_contains(l: TCOD_list_t, elt: *const ::libc::c_void) ->
     _bool;
    pub fn TCOD_list_clear(l: TCOD_list_t);
    pub fn TCOD_list_clear_and_delete(l: TCOD_list_t);
    pub fn TCOD_list_size(l: TCOD_list_t) -> ::libc::c_int;
    pub fn TCOD_list_insert_before(l: TCOD_list_t, elt: *const ::libc::c_void,
                                   before: ::libc::c_int) ->
     *mut *mut ::libc::c_void;
    pub fn TCOD_list_is_empty(l: TCOD_list_t) -> _bool;
    pub fn TCOD_color_RGB(r: uint8, g: uint8, b: uint8) -> TCOD_color_t;
    pub fn TCOD_color_HSV(h: ::libc::c_float, s: ::libc::c_float,
                          v: ::libc::c_float) -> TCOD_color_t;
    pub fn TCOD_color_equals(c1: TCOD_color_t, c2: TCOD_color_t) -> _bool;
    pub fn TCOD_color_add(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
    pub fn TCOD_color_subtract(c1: TCOD_color_t, c2: TCOD_color_t) ->
     TCOD_color_t;
    pub fn TCOD_color_multiply(c1: TCOD_color_t, c2: TCOD_color_t) ->
     TCOD_color_t;
    pub fn TCOD_color_multiply_scalar(c1: TCOD_color_t,
                                      value: ::libc::c_float) -> TCOD_color_t;
    pub fn TCOD_color_lerp(c1: TCOD_color_t, c2: TCOD_color_t,
                           coef: ::libc::c_float) -> TCOD_color_t;
    pub fn TCOD_color_set_HSV(c: *mut TCOD_color_t, h: ::libc::c_float,
                              s: ::libc::c_float, v: ::libc::c_float);
    pub fn TCOD_color_get_HSV(c: TCOD_color_t, h: *mut ::libc::c_float,
                              s: *mut ::libc::c_float,
                              v: *mut ::libc::c_float);
    pub fn TCOD_color_get_hue(c: TCOD_color_t) -> ::libc::c_float;
    pub fn TCOD_color_set_hue(c: *mut TCOD_color_t, h: ::libc::c_float);
    pub fn TCOD_color_get_saturation(c: TCOD_color_t) -> ::libc::c_float;
    pub fn TCOD_color_set_saturation(c: *mut TCOD_color_t,
                                     s: ::libc::c_float);
    pub fn TCOD_color_get_value(c: TCOD_color_t) -> ::libc::c_float;
    pub fn TCOD_color_set_value(c: *mut TCOD_color_t, v: ::libc::c_float);
    pub fn TCOD_color_shift_hue(c: *mut TCOD_color_t,
                                hshift: ::libc::c_float);
    pub fn TCOD_color_scale_HSV(c: *mut TCOD_color_t, scoef: ::libc::c_float,
                                vcoef: ::libc::c_float);
    pub fn TCOD_color_gen_map(map: *mut TCOD_color_t, nb_key: ::libc::c_int,
                              key_color: *const TCOD_color_t,
                              key_index: *const ::libc::c_int);
    pub fn TCOD_console_init_root(w: ::libc::c_int, h: ::libc::c_int,
                                  title: *const ::libc::c_char,
                                  fullscreen: _bool,
                                  renderer: TCOD_renderer_t);
    pub fn TCOD_console_set_window_title(title: *const ::libc::c_char);
    pub fn TCOD_console_set_fullscreen(fullscreen: _bool);
    pub fn TCOD_console_is_fullscreen() -> _bool;
    pub fn TCOD_console_is_window_closed() -> _bool;
    pub fn TCOD_console_set_custom_font(fontFile: *const ::libc::c_char,
                                        flags: ::libc::c_int,
                                        nb_char_horiz: ::libc::c_int,
                                        nb_char_vertic: ::libc::c_int);
    pub fn TCOD_console_map_ascii_code_to_font(asciiCode: ::libc::c_int,
                                               fontCharX: ::libc::c_int,
                                               fontCharY: ::libc::c_int);
    pub fn TCOD_console_map_ascii_codes_to_font(asciiCode: ::libc::c_int,
                                                nbCodes: ::libc::c_int,
                                                fontCharX: ::libc::c_int,
                                                fontCharY: ::libc::c_int);
    pub fn TCOD_console_map_string_to_font(s: *const ::libc::c_char,
                                           fontCharX: ::libc::c_int,
                                           fontCharY: ::libc::c_int);
    pub fn TCOD_console_set_dirty(x: ::libc::c_int, y: ::libc::c_int,
                                  w: ::libc::c_int, h: ::libc::c_int);
    pub fn TCOD_console_set_default_background(con: TCOD_console_t,
                                               col: TCOD_color_t);
    pub fn TCOD_console_set_default_foreground(con: TCOD_console_t,
                                               col: TCOD_color_t);
    pub fn TCOD_console_clear(con: TCOD_console_t);
    pub fn TCOD_console_set_char_background(con: TCOD_console_t,
                                            x: ::libc::c_int,
                                            y: ::libc::c_int,
                                            col: TCOD_color_t,
                                            flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_set_char_foreground(con: TCOD_console_t,
                                            x: ::libc::c_int,
                                            y: ::libc::c_int,
                                            col: TCOD_color_t);
    pub fn TCOD_console_set_char(con: TCOD_console_t, x: ::libc::c_int,
                                 y: ::libc::c_int, c: ::libc::c_int);
    pub fn TCOD_console_put_char(con: TCOD_console_t, x: ::libc::c_int,
                                 y: ::libc::c_int, c: ::libc::c_int,
                                 flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_put_char_ex(con: TCOD_console_t, x: ::libc::c_int,
                                    y: ::libc::c_int, c: ::libc::c_int,
                                    fore: TCOD_color_t, back: TCOD_color_t);
    pub fn TCOD_console_set_background_flag(con: TCOD_console_t,
                                            flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_get_background_flag(con: TCOD_console_t) ->
     TCOD_bkgnd_flag_t;
    pub fn TCOD_console_set_alignment(con: TCOD_console_t,
                                      alignment: TCOD_alignment_t);
    pub fn TCOD_console_get_alignment(con: TCOD_console_t) ->
     TCOD_alignment_t;
    pub fn TCOD_console_print(con: TCOD_console_t, x: ::libc::c_int,
                              y: ::libc::c_int,
                              fmt: *const ::libc::c_char, ...);
    pub fn TCOD_console_print_ex(con: TCOD_console_t, x: ::libc::c_int,
                                 y: ::libc::c_int, flag: TCOD_bkgnd_flag_t,
                                 alignment: TCOD_alignment_t,
                                 fmt: *const ::libc::c_char, ...);
    pub fn TCOD_console_print_rect(con: TCOD_console_t, x: ::libc::c_int,
                                   y: ::libc::c_int, w: ::libc::c_int,
                                   h: ::libc::c_int,
                                   fmt: *const ::libc::c_char, ...) ->
     ::libc::c_int;
    pub fn TCOD_console_print_rect_ex(con: TCOD_console_t, x: ::libc::c_int,
                                      y: ::libc::c_int, w: ::libc::c_int,
                                      h: ::libc::c_int,
                                      flag: TCOD_bkgnd_flag_t,
                                      alignment: TCOD_alignment_t,
                                      fmt: *const ::libc::c_char, ...) ->
     ::libc::c_int;
    pub fn TCOD_console_get_height_rect(con: TCOD_console_t, x: ::libc::c_int,
                                        y: ::libc::c_int, w: ::libc::c_int,
                                        h: ::libc::c_int,
                                        fmt: *const ::libc::c_char, ...) ->
     ::libc::c_int;
    pub fn TCOD_console_rect(con: TCOD_console_t, x: ::libc::c_int,
                             y: ::libc::c_int, w: ::libc::c_int,
                             h: ::libc::c_int, clear: _bool,
                             flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_hline(con: TCOD_console_t, x: ::libc::c_int,
                              y: ::libc::c_int, l: ::libc::c_int,
                              flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_vline(con: TCOD_console_t, x: ::libc::c_int,
                              y: ::libc::c_int, l: ::libc::c_int,
                              flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_console_print_frame(con: TCOD_console_t, x: ::libc::c_int,
                                    y: ::libc::c_int, w: ::libc::c_int,
                                    h: ::libc::c_int, empty: _bool,
                                    flag: TCOD_bkgnd_flag_t,
                                    fmt: *const ::libc::c_char, ...);
    pub fn TCOD_console_map_string_to_font_utf(s: *const wchar_t,
                                               fontCharX: ::libc::c_int,
                                               fontCharY: ::libc::c_int);
    pub fn TCOD_console_print_utf(con: TCOD_console_t, x: ::libc::c_int,
                                  y: ::libc::c_int, fmt: *const wchar_t, ...);
    pub fn TCOD_console_print_ex_utf(con: TCOD_console_t, x: ::libc::c_int,
                                     y: ::libc::c_int,
                                     flag: TCOD_bkgnd_flag_t,
                                     alignment: TCOD_alignment_t,
                                     fmt: *const wchar_t, ...);
    pub fn TCOD_console_print_rect_utf(con: TCOD_console_t, x: ::libc::c_int,
                                       y: ::libc::c_int, w: ::libc::c_int,
                                       h: ::libc::c_int,
                                       fmt: *const wchar_t, ...) ->
     ::libc::c_int;
    pub fn TCOD_console_print_rect_ex_utf(con: TCOD_console_t,
                                          x: ::libc::c_int, y: ::libc::c_int,
                                          w: ::libc::c_int, h: ::libc::c_int,
                                          flag: TCOD_bkgnd_flag_t,
                                          alignment: TCOD_alignment_t,
                                          fmt: *const wchar_t, ...) ->
     ::libc::c_int;
    pub fn TCOD_console_get_height_rect_utf(con: TCOD_console_t,
                                            x: ::libc::c_int,
                                            y: ::libc::c_int,
                                            w: ::libc::c_int,
                                            h: ::libc::c_int,
                                            fmt: *const wchar_t, ...) ->
     ::libc::c_int;
    pub fn TCOD_console_get_default_background(con: TCOD_console_t) ->
     TCOD_color_t;
    pub fn TCOD_console_get_default_foreground(con: TCOD_console_t) ->
     TCOD_color_t;
    pub fn TCOD_console_get_char_background(con: TCOD_console_t,
                                            x: ::libc::c_int,
                                            y: ::libc::c_int) -> TCOD_color_t;
    pub fn TCOD_console_get_char_foreground(con: TCOD_console_t,
                                            x: ::libc::c_int,
                                            y: ::libc::c_int) -> TCOD_color_t;
    pub fn TCOD_console_get_char(con: TCOD_console_t, x: ::libc::c_int,
                                 y: ::libc::c_int) -> ::libc::c_int;
    pub fn TCOD_console_set_fade(val: uint8, fade: TCOD_color_t);
    pub fn TCOD_console_get_fade() -> uint8;
    pub fn TCOD_console_get_fading_color() -> TCOD_color_t;
    pub fn TCOD_console_flush();
    pub fn TCOD_console_set_color_control(con: TCOD_colctrl_t,
                                          fore: TCOD_color_t,
                                          back: TCOD_color_t);
    pub fn TCOD_console_check_for_keypress(flags: ::libc::c_int) ->
     TCOD_key_t;
    pub fn TCOD_console_wait_for_keypress(flush: _bool) -> TCOD_key_t;
    pub fn TCOD_console_set_keyboard_repeat(initial_delay: ::libc::c_int,
                                            interval: ::libc::c_int);
    pub fn TCOD_console_disable_keyboard_repeat();
    pub fn TCOD_console_is_key_pressed(key: TCOD_keycode_t) -> _bool;
    pub fn TCOD_console_from_file(filename: *const ::libc::c_char) ->
     TCOD_console_t;
    pub fn TCOD_console_load_asc(con: TCOD_console_t,
                                 filename: *const ::libc::c_char) -> _bool;
    pub fn TCOD_console_load_apf(con: TCOD_console_t,
                                 filename: *const ::libc::c_char) -> _bool;
    pub fn TCOD_console_save_asc(con: TCOD_console_t,
                                 filename: *const ::libc::c_char) -> _bool;
    pub fn TCOD_console_save_apf(con: TCOD_console_t,
                                 filename: *const ::libc::c_char) -> _bool;
    pub fn TCOD_console_new(w: ::libc::c_int, h: ::libc::c_int) ->
     TCOD_console_t;
    pub fn TCOD_console_get_width(con: TCOD_console_t) -> ::libc::c_int;
    pub fn TCOD_console_get_height(con: TCOD_console_t) -> ::libc::c_int;
    pub fn TCOD_console_set_key_color(con: TCOD_console_t, col: TCOD_color_t);
    pub fn TCOD_console_blit(src: TCOD_console_t, xSrc: ::libc::c_int,
                             ySrc: ::libc::c_int, wSrc: ::libc::c_int,
                             hSrc: ::libc::c_int, dst: TCOD_console_t,
                             xDst: ::libc::c_int, yDst: ::libc::c_int,
                             foreground_alpha: ::libc::c_float,
                             background_alpha: ::libc::c_float);
    pub fn TCOD_console_delete(console: TCOD_console_t);
    pub fn TCOD_console_credits();
    pub fn TCOD_console_credits_reset();
    pub fn TCOD_console_credits_render(x: ::libc::c_int, y: ::libc::c_int,
                                       alpha: _bool) -> _bool;
    pub fn TCOD_image_new(width: ::libc::c_int, height: ::libc::c_int) ->
     TCOD_image_t;
    pub fn TCOD_image_from_console(console: TCOD_console_t) -> TCOD_image_t;
    pub fn TCOD_image_refresh_console(image: TCOD_image_t,
                                      console: TCOD_console_t);
    pub fn TCOD_image_load(filename: *const ::libc::c_char) -> TCOD_image_t;
    pub fn TCOD_image_clear(image: TCOD_image_t, color: TCOD_color_t);
    pub fn TCOD_image_invert(image: TCOD_image_t);
    pub fn TCOD_image_hflip(image: TCOD_image_t);
    pub fn TCOD_image_rotate90(image: TCOD_image_t,
                               numRotations: ::libc::c_int);
    pub fn TCOD_image_vflip(image: TCOD_image_t);
    pub fn TCOD_image_scale(image: TCOD_image_t, neww: ::libc::c_int,
                            newh: ::libc::c_int);
    pub fn TCOD_image_save(image: TCOD_image_t,
                           filename: *const ::libc::c_char);
    pub fn TCOD_image_get_size(image: TCOD_image_t, w: *mut ::libc::c_int,
                               h: *mut ::libc::c_int);
    pub fn TCOD_image_get_pixel(image: TCOD_image_t, x: ::libc::c_int,
                                y: ::libc::c_int) -> TCOD_color_t;
    pub fn TCOD_image_get_alpha(image: TCOD_image_t, x: ::libc::c_int,
                                y: ::libc::c_int) -> ::libc::c_int;
    pub fn TCOD_image_get_mipmap_pixel(image: TCOD_image_t,
                                       x0: ::libc::c_float,
                                       y0: ::libc::c_float,
                                       x1: ::libc::c_float,
                                       y1: ::libc::c_float) -> TCOD_color_t;
    pub fn TCOD_image_put_pixel(image: TCOD_image_t, x: ::libc::c_int,
                                y: ::libc::c_int, col: TCOD_color_t);
    pub fn TCOD_image_blit(image: TCOD_image_t, console: TCOD_console_t,
                           x: ::libc::c_float, y: ::libc::c_float,
                           bkgnd_flag: TCOD_bkgnd_flag_t,
                           scalex: ::libc::c_float, scaley: ::libc::c_float,
                           angle: ::libc::c_float);
    pub fn TCOD_image_blit_rect(image: TCOD_image_t, console: TCOD_console_t,
                                x: ::libc::c_int, y: ::libc::c_int,
                                w: ::libc::c_int, h: ::libc::c_int,
                                bkgnd_flag: TCOD_bkgnd_flag_t);
    pub fn TCOD_image_blit_2x(image: TCOD_image_t, dest: TCOD_console_t,
                              dx: ::libc::c_int, dy: ::libc::c_int,
                              sx: ::libc::c_int, sy: ::libc::c_int,
                              w: ::libc::c_int, h: ::libc::c_int);
    pub fn TCOD_image_delete(image: TCOD_image_t);
    pub fn TCOD_image_set_key_color(image: TCOD_image_t,
                                    key_color: TCOD_color_t);
    pub fn TCOD_image_is_pixel_transparent(image: TCOD_image_t,
                                           x: ::libc::c_int, y: ::libc::c_int)
     -> _bool;
    pub fn TCOD_mouse_show_cursor(visible: _bool);
    pub fn TCOD_mouse_get_status() -> TCOD_mouse_t;
    pub fn TCOD_mouse_is_cursor_visible() -> _bool;
    pub fn TCOD_mouse_move(x: ::libc::c_int, y: ::libc::c_int);
    pub fn TCOD_mouse_includes_touch(enable: _bool);
    pub fn TCOD_sys_elapsed_milli() -> uint32;
    pub fn TCOD_sys_elapsed_seconds() -> ::libc::c_float;
    pub fn TCOD_sys_sleep_milli(val: uint32);
    pub fn TCOD_sys_save_screenshot(filename: *const ::libc::c_char);
    pub fn TCOD_sys_force_fullscreen_resolution(width: ::libc::c_int,
                                                height: ::libc::c_int);
    pub fn TCOD_sys_set_renderer(renderer: TCOD_renderer_t);
    pub fn TCOD_sys_get_renderer() -> TCOD_renderer_t;
    pub fn TCOD_sys_set_fps(val: ::libc::c_int);
    pub fn TCOD_sys_get_fps() -> ::libc::c_int;
    pub fn TCOD_sys_get_last_frame_length() -> ::libc::c_float;
    pub fn TCOD_sys_get_current_resolution(w: *mut ::libc::c_int,
                                           h: *mut ::libc::c_int);
    pub fn TCOD_sys_get_fullscreen_offsets(offx: *mut ::libc::c_int,
                                           offy: *mut ::libc::c_int);
    pub fn TCOD_sys_update_char(asciiCode: ::libc::c_int,
                                fontx: ::libc::c_int, fonty: ::libc::c_int,
                                img: TCOD_image_t, x: ::libc::c_int,
                                y: ::libc::c_int);
    pub fn TCOD_sys_get_char_size(w: *mut ::libc::c_int,
                                  h: *mut ::libc::c_int);
    pub fn TCOD_sys_get_sdl_window() -> *mut ::libc::c_void;
    pub fn TCOD_sys_wait_for_event(eventMask: ::libc::c_int,
                                   key: *mut TCOD_key_t,
                                   mouse: *mut TCOD_mouse_t, flush: _bool) ->
     TCOD_event_t;
    pub fn TCOD_sys_check_for_event(eventMask: ::libc::c_int,
                                    key: *mut TCOD_key_t,
                                    mouse: *mut TCOD_mouse_t) -> TCOD_event_t;
    pub fn TCOD_sys_create_directory(path: *const ::libc::c_char) -> _bool;
    pub fn TCOD_sys_delete_file(path: *const ::libc::c_char) -> _bool;
    pub fn TCOD_sys_delete_directory(path: *const ::libc::c_char) -> _bool;
    pub fn TCOD_sys_is_directory(path: *const ::libc::c_char) -> _bool;
    pub fn TCOD_sys_get_directory_content(path: *const ::libc::c_char,
                                          pattern: *const ::libc::c_char) ->
     TCOD_list_t;
    pub fn TCOD_sys_file_exists(filename: *const ::libc::c_char, ...) ->
     _bool;
    pub fn TCOD_sys_read_file(filename: *const ::libc::c_char,
                              buf: *mut *mut ::libc::c_uchar,
                              size: *mut uint32) -> _bool;
    pub fn TCOD_sys_write_file(filename: *const ::libc::c_char,
                               buf: *mut ::libc::c_uchar, size: uint32) ->
     _bool;
    pub fn TCOD_sys_clipboard_set(value: *const ::libc::c_char);
    pub fn TCOD_sys_clipboard_get() -> *mut ::libc::c_char;
    pub fn TCOD_thread_new(func:
                               ::std::option::Option<extern "C" fn
                                                         (arg1:
                                                              *mut ::libc::c_void)
                                                         -> ::libc::c_int>,
                           data: *mut ::libc::c_void) -> TCOD_thread_t;
    pub fn TCOD_thread_delete(th: TCOD_thread_t);
    pub fn TCOD_sys_get_num_cores() -> ::libc::c_int;
    pub fn TCOD_thread_wait(th: TCOD_thread_t);
    pub fn TCOD_mutex_new() -> TCOD_mutex_t;
    pub fn TCOD_mutex_in(_mut: TCOD_mutex_t);
    pub fn TCOD_mutex_out(_mut: TCOD_mutex_t);
    pub fn TCOD_mutex_delete(_mut: TCOD_mutex_t);
    pub fn TCOD_semaphore_new(initVal: ::libc::c_int) -> TCOD_semaphore_t;
    pub fn TCOD_semaphore_lock(sem: TCOD_semaphore_t);
    pub fn TCOD_semaphore_unlock(sem: TCOD_semaphore_t);
    pub fn TCOD_semaphore_delete(sem: TCOD_semaphore_t);
    pub fn TCOD_condition_new() -> TCOD_cond_t;
    pub fn TCOD_condition_signal(sem: TCOD_cond_t);
    pub fn TCOD_condition_broadcast(sem: TCOD_cond_t);
    pub fn TCOD_condition_wait(sem: TCOD_cond_t, _mut: TCOD_mutex_t);
    pub fn TCOD_condition_delete(sem: TCOD_cond_t);
    pub fn TCOD_load_library(path: *const ::libc::c_char) -> TCOD_library_t;
    pub fn TCOD_get_function_address(library: TCOD_library_t,
                                     function_name: *const ::libc::c_char) ->
     *mut ::libc::c_void;
    pub fn TCOD_close_library(arg1: TCOD_library_t);
    pub fn TCOD_sys_register_SDL_renderer(renderer: SDL_renderer_t);
    pub fn TCOD_random_get_instance() -> TCOD_random_t;
    pub fn TCOD_random_new(algo: TCOD_random_algo_t) -> TCOD_random_t;
    pub fn TCOD_random_save(mersenne: TCOD_random_t) -> TCOD_random_t;
    pub fn TCOD_random_restore(mersenne: TCOD_random_t,
                               backup: TCOD_random_t);
    pub fn TCOD_random_new_from_seed(algo: TCOD_random_algo_t, seed: uint32)
     -> TCOD_random_t;
    pub fn TCOD_random_delete(mersenne: TCOD_random_t);
    pub fn TCOD_random_set_distribution(mersenne: TCOD_random_t,
                                        distribution: TCOD_distribution_t);
    pub fn TCOD_random_get_int(mersenne: TCOD_random_t, min: ::libc::c_int,
                               max: ::libc::c_int) -> ::libc::c_int;
    pub fn TCOD_random_get_float(mersenne: TCOD_random_t,
                                 min: ::libc::c_float, max: ::libc::c_float)
     -> ::libc::c_float;
    pub fn TCOD_random_get_double(mersenne: TCOD_random_t,
                                  min: ::libc::c_double,
                                  max: ::libc::c_double) -> ::libc::c_double;
    pub fn TCOD_random_get_int_mean(mersenne: TCOD_random_t,
                                    min: ::libc::c_int, max: ::libc::c_int,
                                    mean: ::libc::c_int) -> ::libc::c_int;
    pub fn TCOD_random_get_float_mean(mersenne: TCOD_random_t,
                                      min: ::libc::c_float,
                                      max: ::libc::c_float,
                                      mean: ::libc::c_float) ->
     ::libc::c_float;
    pub fn TCOD_random_get_double_mean(mersenne: TCOD_random_t,
                                       min: ::libc::c_double,
                                       max: ::libc::c_double,
                                       mean: ::libc::c_double) ->
     ::libc::c_double;
    pub fn TCOD_random_dice_new(s: *const ::libc::c_char) -> TCOD_dice_t;
    pub fn TCOD_random_dice_roll(mersenne: TCOD_random_t, dice: TCOD_dice_t)
     -> ::libc::c_int;
    pub fn TCOD_random_dice_roll_s(mersenne: TCOD_random_t,
                                   s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn TCOD_line_init(xFrom: ::libc::c_int, yFrom: ::libc::c_int,
                          xTo: ::libc::c_int, yTo: ::libc::c_int);
    pub fn TCOD_line_step(xCur: *mut ::libc::c_int, yCur: *mut ::libc::c_int)
     -> _bool;
    pub fn TCOD_line(xFrom: ::libc::c_int, yFrom: ::libc::c_int,
                     xTo: ::libc::c_int, yTo: ::libc::c_int,
                     listener: TCOD_line_listener_t) -> _bool;
    pub fn TCOD_line_init_mt(xFrom: ::libc::c_int, yFrom: ::libc::c_int,
                             xTo: ::libc::c_int, yTo: ::libc::c_int,
                             data: *mut TCOD_bresenham_data_t);
    pub fn TCOD_line_step_mt(xCur: *mut ::libc::c_int,
                             yCur: *mut ::libc::c_int,
                             data: *mut TCOD_bresenham_data_t) -> _bool;
    pub fn TCOD_line_mt(xFrom: ::libc::c_int, yFrom: ::libc::c_int,
                        xTo: ::libc::c_int, yTo: ::libc::c_int,
                        listener: TCOD_line_listener_t,
                        data: *mut TCOD_bresenham_data_t) -> _bool;
    pub fn TCOD_noise_new(dimensions: ::libc::c_int, hurst: ::libc::c_float,
                          lacunarity: ::libc::c_float, random: TCOD_random_t)
     -> TCOD_noise_t;
    pub fn TCOD_noise_set_type(noise: TCOD_noise_t, _type: TCOD_noise_type_t);
    pub fn TCOD_noise_get_ex(noise: TCOD_noise_t, f: *mut ::libc::c_float,
                             _type: TCOD_noise_type_t) -> ::libc::c_float;
    pub fn TCOD_noise_get_fbm_ex(noise: TCOD_noise_t, f: *mut ::libc::c_float,
                                 octaves: ::libc::c_float,
                                 _type: TCOD_noise_type_t) -> ::libc::c_float;
    pub fn TCOD_noise_get_turbulence_ex(noise: TCOD_noise_t,
                                        f: *mut ::libc::c_float,
                                        octaves: ::libc::c_float,
                                        _type: TCOD_noise_type_t) ->
     ::libc::c_float;
    pub fn TCOD_noise_get(noise: TCOD_noise_t, f: *mut ::libc::c_float) ->
     ::libc::c_float;
    pub fn TCOD_noise_get_fbm(noise: TCOD_noise_t, f: *mut ::libc::c_float,
                              octaves: ::libc::c_float) -> ::libc::c_float;
    pub fn TCOD_noise_get_turbulence(noise: TCOD_noise_t,
                                     f: *mut ::libc::c_float,
                                     octaves: ::libc::c_float) ->
     ::libc::c_float;
    pub fn TCOD_noise_delete(noise: TCOD_noise_t);
    pub fn TCOD_map_new(width: ::libc::c_int, height: ::libc::c_int) ->
     TCOD_map_t;
    pub fn TCOD_map_clear(map: TCOD_map_t, transparent: _bool,
                          walkable: _bool);
    pub fn TCOD_map_copy(source: TCOD_map_t, dest: TCOD_map_t);
    pub fn TCOD_map_set_properties(map: TCOD_map_t, x: ::libc::c_int,
                                   y: ::libc::c_int, is_transparent: _bool,
                                   is_walkable: _bool);
    pub fn TCOD_map_delete(map: TCOD_map_t);
    pub fn TCOD_map_compute_fov(map: TCOD_map_t, player_x: ::libc::c_int,
                                player_y: ::libc::c_int,
                                max_radius: ::libc::c_int, light_walls: _bool,
                                algo: TCOD_fov_algorithm_t);
    pub fn TCOD_map_is_in_fov(map: TCOD_map_t, x: ::libc::c_int,
                              y: ::libc::c_int) -> _bool;
    pub fn TCOD_map_set_in_fov(map: TCOD_map_t, x: ::libc::c_int,
                               y: ::libc::c_int, fov: _bool);
    pub fn TCOD_map_is_transparent(map: TCOD_map_t, x: ::libc::c_int,
                                   y: ::libc::c_int) -> _bool;
    pub fn TCOD_map_is_walkable(map: TCOD_map_t, x: ::libc::c_int,
                                y: ::libc::c_int) -> _bool;
    pub fn TCOD_map_get_width(map: TCOD_map_t) -> ::libc::c_int;
    pub fn TCOD_map_get_height(map: TCOD_map_t) -> ::libc::c_int;
    pub fn TCOD_map_get_nb_cells(map: TCOD_map_t) -> ::libc::c_int;
    pub fn TCOD_path_new_using_map(map: TCOD_map_t,
                                   diagonalCost: ::libc::c_float) ->
     TCOD_path_t;
    pub fn TCOD_path_new_using_function(map_width: ::libc::c_int,
                                        map_height: ::libc::c_int,
                                        func: TCOD_path_func_t,
                                        user_data: *mut ::libc::c_void,
                                        diagonalCost: ::libc::c_float) ->
     TCOD_path_t;
    pub fn TCOD_path_compute(path: TCOD_path_t, ox: ::libc::c_int,
                             oy: ::libc::c_int, dx: ::libc::c_int,
                             dy: ::libc::c_int) -> _bool;
    pub fn TCOD_path_walk(path: TCOD_path_t, x: *mut ::libc::c_int,
                          y: *mut ::libc::c_int,
                          recalculate_when_needed: _bool) -> _bool;
    pub fn TCOD_path_is_empty(path: TCOD_path_t) -> _bool;
    pub fn TCOD_path_size(path: TCOD_path_t) -> ::libc::c_int;
    pub fn TCOD_path_reverse(path: TCOD_path_t);
    pub fn TCOD_path_get(path: TCOD_path_t, index: ::libc::c_int,
                         x: *mut ::libc::c_int, y: *mut ::libc::c_int);
    pub fn TCOD_path_get_origin(path: TCOD_path_t, x: *mut ::libc::c_int,
                                y: *mut ::libc::c_int);
    pub fn TCOD_path_get_destination(path: TCOD_path_t, x: *mut ::libc::c_int,
                                     y: *mut ::libc::c_int);
    pub fn TCOD_path_delete(path: TCOD_path_t);
    pub fn TCOD_dijkstra_new(map: TCOD_map_t, diagonalCost: ::libc::c_float)
     -> TCOD_dijkstra_t;
    pub fn TCOD_dijkstra_new_using_function(map_width: ::libc::c_int,
                                            map_height: ::libc::c_int,
                                            func: TCOD_path_func_t,
                                            user_data: *mut ::libc::c_void,
                                            diagonalCost: ::libc::c_float) ->
     TCOD_dijkstra_t;
    pub fn TCOD_dijkstra_compute(dijkstra: TCOD_dijkstra_t,
                                 root_x: ::libc::c_int,
                                 root_y: ::libc::c_int);
    pub fn TCOD_dijkstra_get_distance(dijkstra: TCOD_dijkstra_t,
                                      x: ::libc::c_int, y: ::libc::c_int) ->
     ::libc::c_float;
    pub fn TCOD_dijkstra_path_set(dijkstra: TCOD_dijkstra_t, x: ::libc::c_int,
                                  y: ::libc::c_int) -> _bool;
    pub fn TCOD_dijkstra_is_empty(path: TCOD_dijkstra_t) -> _bool;
    pub fn TCOD_dijkstra_size(path: TCOD_dijkstra_t) -> ::libc::c_int;
    pub fn TCOD_dijkstra_reverse(path: TCOD_dijkstra_t);
    pub fn TCOD_dijkstra_get(path: TCOD_dijkstra_t, index: ::libc::c_int,
                             x: *mut ::libc::c_int, y: *mut ::libc::c_int);
    pub fn TCOD_dijkstra_path_walk(dijkstra: TCOD_dijkstra_t,
                                   x: *mut ::libc::c_int,
                                   y: *mut ::libc::c_int) -> _bool;
    pub fn TCOD_dijkstra_delete(dijkstra: TCOD_dijkstra_t);
    pub fn TCOD_lex_new_intern() -> *mut TCOD_lex_t;
    pub fn TCOD_lex_new(symbols: *mut *const ::libc::c_char,
                        keywords: *mut *const ::libc::c_char,
                        simpleComment: *const ::libc::c_char,
                        commentStart: *const ::libc::c_char,
                        commentStop: *const ::libc::c_char,
                        javadocCommentStart: *const ::libc::c_char,
                        stringDelim: *const ::libc::c_char,
                        flags: ::libc::c_int) -> *mut TCOD_lex_t;
    pub fn TCOD_lex_delete(lex: *mut TCOD_lex_t);
    pub fn TCOD_lex_set_data_buffer(lex: *mut TCOD_lex_t,
                                    dat: *mut ::libc::c_char);
    pub fn TCOD_lex_set_data_file(lex: *mut TCOD_lex_t,
                                  filename: *const ::libc::c_char) -> _bool;
    pub fn TCOD_lex_parse(lex: *mut TCOD_lex_t) -> ::libc::c_int;
    pub fn TCOD_lex_parse_until_token_type(lex: *mut TCOD_lex_t,
                                           token_type: ::libc::c_int) ->
     ::libc::c_int;
    pub fn TCOD_lex_parse_until_token_value(lex: *mut TCOD_lex_t,
                                            token_value:
                                                *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn TCOD_lex_expect_token_type(lex: *mut TCOD_lex_t,
                                      token_type: ::libc::c_int) -> _bool;
    pub fn TCOD_lex_expect_token_value(lex: *mut TCOD_lex_t,
                                       token_type: ::libc::c_int,
                                       token_value: *const ::libc::c_char) ->
     _bool;
    pub fn TCOD_lex_savepoint(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
    pub fn TCOD_lex_restore(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
    pub fn TCOD_lex_get_last_javadoc(lex: *mut TCOD_lex_t) ->
     *mut ::libc::c_char;
    pub fn TCOD_lex_get_token_name(token_type: ::libc::c_int) ->
     *const ::libc::c_char;
    pub fn TCOD_lex_get_last_error() -> *mut ::libc::c_char;
    pub fn TCOD_lex_hextoint(c: ::libc::c_char) -> ::libc::c_int;
    pub fn TCOD_struct_get_name(def: TCOD_parser_struct_t) ->
     *const ::libc::c_char;
    pub fn TCOD_struct_add_property(def: TCOD_parser_struct_t,
                                    name: *const ::libc::c_char,
                                    _type: TCOD_value_type_t,
                                    mandatory: _bool);
    pub fn TCOD_struct_add_list_property(def: TCOD_parser_struct_t,
                                         name: *const ::libc::c_char,
                                         _type: TCOD_value_type_t,
                                         mandatory: _bool);
    pub fn TCOD_struct_add_value_list(def: TCOD_parser_struct_t,
                                      name: *const ::libc::c_char,
                                      value_list: *mut *const ::libc::c_char,
                                      mandatory: _bool);
    pub fn TCOD_struct_add_value_list_sized(def: TCOD_parser_struct_t,
                                            name: *const ::libc::c_char,
                                            value_list:
                                                *mut *const ::libc::c_char,
                                            size: ::libc::c_int,
                                            mandatory: _bool);
    pub fn TCOD_struct_add_flag(def: TCOD_parser_struct_t,
                                propname: *const ::libc::c_char);
    pub fn TCOD_struct_add_structure(def: TCOD_parser_struct_t,
                                     sub_structure: TCOD_parser_struct_t);
    pub fn TCOD_struct_is_mandatory(def: TCOD_parser_struct_t,
                                    propname: *const ::libc::c_char) -> _bool;
    pub fn TCOD_struct_get_type(def: TCOD_parser_struct_t,
                                propname: *const ::libc::c_char) ->
     TCOD_value_type_t;
    pub fn TCOD_parser_new() -> TCOD_parser_t;
    pub fn TCOD_parser_new_struct(parser: TCOD_parser_t,
                                  name: *mut ::libc::c_char) ->
     TCOD_parser_struct_t;
    pub fn TCOD_parser_new_custom_type(parser: TCOD_parser_t,
                                       custom_type_parser:
                                           TCOD_parser_custom_t) ->
     TCOD_value_type_t;
    pub fn TCOD_parser_run(parser: TCOD_parser_t,
                           filename: *const ::libc::c_char,
                           listener: *mut TCOD_parser_listener_t);
    pub fn TCOD_parser_delete(parser: TCOD_parser_t);
    pub fn TCOD_parser_error(msg: *const ::libc::c_char, ...);
    pub fn TCOD_parser_get_bool_property(parser: TCOD_parser_t,
                                         name: *const ::libc::c_char) ->
     _bool;
    pub fn TCOD_parser_get_char_property(parser: TCOD_parser_t,
                                         name: *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn TCOD_parser_get_int_property(parser: TCOD_parser_t,
                                        name: *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn TCOD_parser_get_float_property(parser: TCOD_parser_t,
                                          name: *const ::libc::c_char) ->
     ::libc::c_float;
    pub fn TCOD_parser_get_string_property(parser: TCOD_parser_t,
                                           name: *const ::libc::c_char) ->
     *const ::libc::c_char;
    pub fn TCOD_parser_get_color_property(parser: TCOD_parser_t,
                                          name: *const ::libc::c_char) ->
     TCOD_color_t;
    pub fn TCOD_parser_get_dice_property(parser: TCOD_parser_t,
                                         name: *const ::libc::c_char) ->
     TCOD_dice_t;
    pub fn TCOD_parser_get_dice_property_py(parser: TCOD_parser_t,
                                            name: *const ::libc::c_char,
                                            dice: *mut TCOD_dice_t);
    pub fn TCOD_parser_get_custom_property(parser: TCOD_parser_t,
                                           name: *const ::libc::c_char) ->
     *mut ::libc::c_void;
    pub fn TCOD_parser_get_list_property(parser: TCOD_parser_t,
                                         name: *const ::libc::c_char,
                                         _type: TCOD_value_type_t) ->
     TCOD_list_t;
    pub fn TCOD_parse_bool_value() -> TCOD_value_t;
    pub fn TCOD_parse_char_value() -> TCOD_value_t;
    pub fn TCOD_parse_integer_value() -> TCOD_value_t;
    pub fn TCOD_parse_float_value() -> TCOD_value_t;
    pub fn TCOD_parse_string_value() -> TCOD_value_t;
    pub fn TCOD_parse_color_value() -> TCOD_value_t;
    pub fn TCOD_parse_dice_value() -> TCOD_value_t;
    pub fn TCOD_parse_value_list_value(def: *mut TCOD_struct_int_t,
                                       listnum: ::libc::c_int) ->
     TCOD_value_t;
    pub fn TCOD_parse_property_value(parser: *mut TCOD_parser_int_t,
                                     def: TCOD_parser_struct_t,
                                     propname: *mut ::libc::c_char,
                                     list: _bool) -> TCOD_value_t;
    pub fn TCOD_tree_new() -> *mut TCOD_tree_t;
    pub fn TCOD_tree_add_son(node: *mut TCOD_tree_t, son: *mut TCOD_tree_t);
    pub fn TCOD_bsp_new() -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_new_with_size(x: ::libc::c_int, y: ::libc::c_int,
                                  w: ::libc::c_int, h: ::libc::c_int) ->
     *mut TCOD_bsp_t;
    pub fn TCOD_bsp_delete(node: *mut TCOD_bsp_t);
    pub fn TCOD_bsp_left(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_right(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_father(node: *mut TCOD_bsp_t) -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_is_leaf(node: *mut TCOD_bsp_t) -> _bool;
    pub fn TCOD_bsp_traverse_pre_order(node: *mut TCOD_bsp_t,
                                       listener: TCOD_bsp_callback_t,
                                       userData: *mut ::libc::c_void) ->
     _bool;
    pub fn TCOD_bsp_traverse_in_order(node: *mut TCOD_bsp_t,
                                      listener: TCOD_bsp_callback_t,
                                      userData: *mut ::libc::c_void) -> _bool;
    pub fn TCOD_bsp_traverse_post_order(node: *mut TCOD_bsp_t,
                                        listener: TCOD_bsp_callback_t,
                                        userData: *mut ::libc::c_void) ->
     _bool;
    pub fn TCOD_bsp_traverse_level_order(node: *mut TCOD_bsp_t,
                                         listener: TCOD_bsp_callback_t,
                                         userData: *mut ::libc::c_void) ->
     _bool;
    pub fn TCOD_bsp_traverse_inverted_level_order(node: *mut TCOD_bsp_t,
                                                  listener:
                                                      TCOD_bsp_callback_t,
                                                  userData:
                                                      *mut ::libc::c_void) ->
     _bool;
    pub fn TCOD_bsp_contains(node: *mut TCOD_bsp_t, x: ::libc::c_int,
                             y: ::libc::c_int) -> _bool;
    pub fn TCOD_bsp_find_node(node: *mut TCOD_bsp_t, x: ::libc::c_int,
                              y: ::libc::c_int) -> *mut TCOD_bsp_t;
    pub fn TCOD_bsp_resize(node: *mut TCOD_bsp_t, x: ::libc::c_int,
                           y: ::libc::c_int, w: ::libc::c_int,
                           h: ::libc::c_int);
    pub fn TCOD_bsp_split_once(node: *mut TCOD_bsp_t, horizontal: _bool,
                               position: ::libc::c_int);
    pub fn TCOD_bsp_split_recursive(node: *mut TCOD_bsp_t,
                                    randomizer: TCOD_random_t,
                                    nb: ::libc::c_int,
                                    minHSize: ::libc::c_int,
                                    minVSize: ::libc::c_int,
                                    maxHRatio: ::libc::c_float,
                                    maxVRatio: ::libc::c_float);
    pub fn TCOD_bsp_remove_sons(node: *mut TCOD_bsp_t);
    pub fn TCOD_heightmap_new(w: ::libc::c_int, h: ::libc::c_int) ->
     *mut TCOD_heightmap_t;
    pub fn TCOD_heightmap_delete(hm: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_get_value(hm: *const TCOD_heightmap_t,
                                    x: ::libc::c_int, y: ::libc::c_int) ->
     ::libc::c_float;
    pub fn TCOD_heightmap_get_interpolated_value(hm: *const TCOD_heightmap_t,
                                                 x: ::libc::c_float,
                                                 y: ::libc::c_float) ->
     ::libc::c_float;
    pub fn TCOD_heightmap_set_value(hm: *mut TCOD_heightmap_t,
                                    x: ::libc::c_int, y: ::libc::c_int,
                                    value: ::libc::c_float);
    pub fn TCOD_heightmap_get_slope(hm: *const TCOD_heightmap_t,
                                    x: ::libc::c_int, y: ::libc::c_int) ->
     ::libc::c_float;
    pub fn TCOD_heightmap_get_normal(hm: *const TCOD_heightmap_t,
                                     x: ::libc::c_float, y: ::libc::c_float,
                                     n: [::libc::c_float; 3us],
                                     waterLevel: ::libc::c_float);
    pub fn TCOD_heightmap_count_cells(hm: *const TCOD_heightmap_t,
                                      min: ::libc::c_float,
                                      max: ::libc::c_float) -> ::libc::c_int;
    pub fn TCOD_heightmap_has_land_on_border(hm: *const TCOD_heightmap_t,
                                             waterLevel: ::libc::c_float) ->
     _bool;
    pub fn TCOD_heightmap_get_minmax(hm: *const TCOD_heightmap_t,
                                     min: *mut ::libc::c_float,
                                     max: *mut ::libc::c_float);
    pub fn TCOD_heightmap_copy(hm_source: *const TCOD_heightmap_t,
                               hm_dest: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_add(hm: *mut TCOD_heightmap_t,
                              value: ::libc::c_float);
    pub fn TCOD_heightmap_scale(hm: *mut TCOD_heightmap_t,
                                value: ::libc::c_float);
    pub fn TCOD_heightmap_clamp(hm: *mut TCOD_heightmap_t,
                                min: ::libc::c_float, max: ::libc::c_float);
    pub fn TCOD_heightmap_normalize(hm: *mut TCOD_heightmap_t,
                                    min: ::libc::c_float,
                                    max: ::libc::c_float);
    pub fn TCOD_heightmap_clear(hm: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_lerp_hm(hm1: *const TCOD_heightmap_t,
                                  hm2: *const TCOD_heightmap_t,
                                  hmres: *mut TCOD_heightmap_t,
                                  coef: ::libc::c_float);
    pub fn TCOD_heightmap_add_hm(hm1: *const TCOD_heightmap_t,
                                 hm2: *const TCOD_heightmap_t,
                                 hmres: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_multiply_hm(hm1: *const TCOD_heightmap_t,
                                      hm2: *const TCOD_heightmap_t,
                                      hmres: *mut TCOD_heightmap_t);
    pub fn TCOD_heightmap_add_hill(hm: *mut TCOD_heightmap_t,
                                   hx: ::libc::c_float, hy: ::libc::c_float,
                                   hradius: ::libc::c_float,
                                   hheight: ::libc::c_float);
    pub fn TCOD_heightmap_dig_hill(hm: *mut TCOD_heightmap_t,
                                   hx: ::libc::c_float, hy: ::libc::c_float,
                                   hradius: ::libc::c_float,
                                   hheight: ::libc::c_float);
    pub fn TCOD_heightmap_dig_bezier(hm: *mut TCOD_heightmap_t,
                                     px: [::libc::c_int; 4us],
                                     py: [::libc::c_int; 4us],
                                     startRadius: ::libc::c_float,
                                     startDepth: ::libc::c_float,
                                     endRadius: ::libc::c_float,
                                     endDepth: ::libc::c_float);
    pub fn TCOD_heightmap_rain_erosion(hm: *mut TCOD_heightmap_t,
                                       nbDrops: ::libc::c_int,
                                       erosionCoef: ::libc::c_float,
                                       sedimentationCoef: ::libc::c_float,
                                       rnd: TCOD_random_t);
    pub fn TCOD_heightmap_kernel_transform(hm: *mut TCOD_heightmap_t,
                                           kernelsize: ::libc::c_int,
                                           dx: *const ::libc::c_int,
                                           dy: *const ::libc::c_int,
                                           weight: *const ::libc::c_float,
                                           minLevel: ::libc::c_float,
                                           maxLevel: ::libc::c_float);
    pub fn TCOD_heightmap_add_voronoi(hm: *mut TCOD_heightmap_t,
                                      nbPoints: ::libc::c_int,
                                      nbCoef: ::libc::c_int,
                                      coef: *const ::libc::c_float,
                                      rnd: TCOD_random_t);
    pub fn TCOD_heightmap_add_fbm(hm: *mut TCOD_heightmap_t,
                                  noise: TCOD_noise_t, mulx: ::libc::c_float,
                                  muly: ::libc::c_float,
                                  addx: ::libc::c_float,
                                  addy: ::libc::c_float,
                                  octaves: ::libc::c_float,
                                  delta: ::libc::c_float,
                                  scale: ::libc::c_float);
    pub fn TCOD_heightmap_scale_fbm(hm: *mut TCOD_heightmap_t,
                                    noise: TCOD_noise_t,
                                    mulx: ::libc::c_float,
                                    muly: ::libc::c_float,
                                    addx: ::libc::c_float,
                                    addy: ::libc::c_float,
                                    octaves: ::libc::c_float,
                                    delta: ::libc::c_float,
                                    scale: ::libc::c_float);
    pub fn TCOD_heightmap_islandify(hm: *mut TCOD_heightmap_t,
                                    seaLevel: ::libc::c_float,
                                    rnd: TCOD_random_t);
    pub fn TCOD_zip_new() -> TCOD_zip_t;
    pub fn TCOD_zip_delete(zip: TCOD_zip_t);
    pub fn TCOD_zip_put_char(zip: TCOD_zip_t, val: ::libc::c_char);
    pub fn TCOD_zip_put_int(zip: TCOD_zip_t, val: ::libc::c_int);
    pub fn TCOD_zip_put_float(zip: TCOD_zip_t, val: ::libc::c_float);
    pub fn TCOD_zip_put_string(zip: TCOD_zip_t, val: *const ::libc::c_char);
    pub fn TCOD_zip_put_color(zip: TCOD_zip_t, val: TCOD_color_t);
    pub fn TCOD_zip_put_image(zip: TCOD_zip_t, val: TCOD_image_t);
    pub fn TCOD_zip_put_console(zip: TCOD_zip_t, val: TCOD_console_t);
    pub fn TCOD_zip_put_data(zip: TCOD_zip_t, nbBytes: ::libc::c_int,
                             data: *const ::libc::c_void);
    pub fn TCOD_zip_get_current_bytes(zip: TCOD_zip_t) -> uint32;
    pub fn TCOD_zip_save_to_file(zip: TCOD_zip_t,
                                 filename: *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn TCOD_zip_load_from_file(zip: TCOD_zip_t,
                                   filename: *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn TCOD_zip_get_char(zip: TCOD_zip_t) -> ::libc::c_char;
    pub fn TCOD_zip_get_int(zip: TCOD_zip_t) -> ::libc::c_int;
    pub fn TCOD_zip_get_float(zip: TCOD_zip_t) -> ::libc::c_float;
    pub fn TCOD_zip_get_string(zip: TCOD_zip_t) -> *const ::libc::c_char;
    pub fn TCOD_zip_get_color(zip: TCOD_zip_t) -> TCOD_color_t;
    pub fn TCOD_zip_get_image(zip: TCOD_zip_t) -> TCOD_image_t;
    pub fn TCOD_zip_get_console(zip: TCOD_zip_t) -> TCOD_console_t;
    pub fn TCOD_zip_get_data(zip: TCOD_zip_t, nbBytes: ::libc::c_int,
                             data: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn TCOD_zip_get_remaining_bytes(zip: TCOD_zip_t) -> uint32;
    pub fn TCOD_zip_skip_bytes(zip: TCOD_zip_t, nbBytes: uint32);
    pub fn TCOD_namegen_parse(filename: *const ::libc::c_char,
                              random: TCOD_random_t);
    pub fn TCOD_namegen_generate(name: *mut ::libc::c_char, allocate: _bool)
     -> *mut ::libc::c_char;
    pub fn TCOD_namegen_generate_custom(name: *mut ::libc::c_char,
                                        rule: *mut ::libc::c_char,
                                        allocate: _bool) ->
     *mut ::libc::c_char;
    pub fn TCOD_namegen_get_sets() -> TCOD_list_t;
    pub fn TCOD_namegen_destroy();
    pub fn TCOD_text_init(x: ::libc::c_int, y: ::libc::c_int,
                          w: ::libc::c_int, h: ::libc::c_int,
                          max_chars: ::libc::c_int) -> TCOD_text_t;
    pub fn TCOD_text_set_properties(txt: TCOD_text_t,
                                    cursor_char: ::libc::c_int,
                                    blink_interval: ::libc::c_int,
                                    prompt: *const ::libc::c_char,
                                    tab_size: ::libc::c_int);
    pub fn TCOD_text_set_colors(txt: TCOD_text_t, fore: TCOD_color_t,
                                back: TCOD_color_t,
                                back_transparency: ::libc::c_float);
    pub fn TCOD_text_update(txt: TCOD_text_t, key: TCOD_key_t) -> _bool;
    pub fn TCOD_text_render(txt: TCOD_text_t, con: TCOD_console_t);
    pub fn TCOD_text_get(txt: TCOD_text_t) -> *const ::libc::c_char;
    pub fn TCOD_text_reset(txt: TCOD_text_t);
    pub fn TCOD_text_delete(txt: TCOD_text_t);
}
